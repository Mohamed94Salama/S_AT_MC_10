
Thermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000055a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000055a8  0000563c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a0  008000a0  0000567c  2**0
                  ALLOC
  3 .stab         00003a50  00000000  00000000  0000567c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014a1  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a56d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a6cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a85c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e924  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000eaa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ed66  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f5f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f5 e5       	ldi	r31, 0x55	; 85
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <main>
      8a:	0c 94 d2 2a 	jmp	0x55a4	; 0x55a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 2a 	jmp	0x5536	; 0x5536 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b7 2a 	jmp	0x556e	; 0x556e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a7 2a 	jmp	0x554e	; 0x554e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a7 2a 	jmp	0x554e	; 0x554e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9b 2a 	jmp	0x5536	; 0x5536 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b7 2a 	jmp	0x556e	; 0x556e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a3 2a 	jmp	0x5546	; 0x5546 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e7       	ldi	r22, 0x76	; 118
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bf 2a 	jmp	0x557e	; 0x557e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a7 2a 	jmp	0x554e	; 0x554e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a7 2a 	jmp	0x554e	; 0x554e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a7 2a 	jmp	0x554e	; 0x554e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c3 2a 	jmp	0x5586	; 0x5586 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ab 2a 	jmp	0x5556	; 0x5556 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c7 2a 	jmp	0x558e	; 0x558e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_Init>:

#include "DIO.h"


enuErrorStatus_t DIO_Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_Init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	for(i=0;i<DIO_GROUPS_NO;i++)
     caa:	19 82       	std	Y+1, r1	; 0x01
     cac:	0c 94 5f 14 	jmp	0x28be	; 0x28be <DIO_Init+0x1c20>
	{
		switch(astrDIOConfigParameters[i].enuPinNo)
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	c9 01       	movw	r24, r18
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	82 0f       	add	r24, r18
     cbe:	93 1f       	adc	r25, r19
     cc0:	fc 01       	movw	r30, r24
     cc2:	e6 57       	subi	r30, 0x76	; 118
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	80 81       	ld	r24, Z
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	3b 83       	std	Y+3, r19	; 0x03
     cce:	2a 83       	std	Y+2, r18	; 0x02
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	9b 81       	ldd	r25, Y+3	; 0x03
     cd4:	8f 30       	cpi	r24, 0x0F	; 15
     cd6:	91 05       	cpc	r25, r1
     cd8:	09 f4       	brne	.+2      	; 0xcdc <DIO_Init+0x3e>
     cda:	1a c7       	rjmp	.+3636   	; 0x1b10 <DIO_Init+0xe72>
     cdc:	2a 81       	ldd	r18, Y+2	; 0x02
     cde:	3b 81       	ldd	r19, Y+3	; 0x03
     ce0:	20 31       	cpi	r18, 0x10	; 16
     ce2:	31 05       	cpc	r19, r1
     ce4:	0c f0       	brlt	.+2      	; 0xce8 <DIO_Init+0x4a>
     ce6:	5b c0       	rjmp	.+182    	; 0xd9e <DIO_Init+0x100>
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	9b 81       	ldd	r25, Y+3	; 0x03
     cec:	87 30       	cpi	r24, 0x07	; 7
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <DIO_Init+0x56>
     cf2:	b8 c3       	rjmp	.+1904   	; 0x1464 <DIO_Init+0x7c6>
     cf4:	2a 81       	ldd	r18, Y+2	; 0x02
     cf6:	3b 81       	ldd	r19, Y+3	; 0x03
     cf8:	28 30       	cpi	r18, 0x08	; 8
     cfa:	31 05       	cpc	r19, r1
     cfc:	5c f5       	brge	.+86     	; 0xd54 <DIO_Init+0xb6>
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	91 05       	cpc	r25, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <DIO_Init+0x6c>
     d08:	fd c1       	rjmp	.+1018   	; 0x1104 <DIO_Init+0x466>
     d0a:	2a 81       	ldd	r18, Y+2	; 0x02
     d0c:	3b 81       	ldd	r19, Y+3	; 0x03
     d0e:	24 30       	cpi	r18, 0x04	; 4
     d10:	31 05       	cpc	r19, r1
     d12:	9c f4       	brge	.+38     	; 0xd3a <DIO_Init+0x9c>
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	9b 81       	ldd	r25, Y+3	; 0x03
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	91 05       	cpc	r25, r1
     d1c:	09 f4       	brne	.+2      	; 0xd20 <DIO_Init+0x82>
     d1e:	1a c1       	rjmp	.+564    	; 0xf54 <DIO_Init+0x2b6>
     d20:	2a 81       	ldd	r18, Y+2	; 0x02
     d22:	3b 81       	ldd	r19, Y+3	; 0x03
     d24:	22 30       	cpi	r18, 0x02	; 2
     d26:	31 05       	cpc	r19, r1
     d28:	0c f0       	brlt	.+2      	; 0xd2c <DIO_Init+0x8e>
     d2a:	80 c1       	rjmp	.+768    	; 0x102c <DIO_Init+0x38e>
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	9b 81       	ldd	r25, Y+3	; 0x03
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	09 f4       	brne	.+2      	; 0xd36 <DIO_Init+0x98>
     d34:	a3 c0       	rjmp	.+326    	; 0xe7c <DIO_Init+0x1de>
     d36:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
     d3a:	2a 81       	ldd	r18, Y+2	; 0x02
     d3c:	3b 81       	ldd	r19, Y+3	; 0x03
     d3e:	25 30       	cpi	r18, 0x05	; 5
     d40:	31 05       	cpc	r19, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <DIO_Init+0xa8>
     d44:	b7 c2       	rjmp	.+1390   	; 0x12b4 <DIO_Init+0x616>
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	9b 81       	ldd	r25, Y+3	; 0x03
     d4a:	86 30       	cpi	r24, 0x06	; 6
     d4c:	91 05       	cpc	r25, r1
     d4e:	0c f0       	brlt	.+2      	; 0xd52 <DIO_Init+0xb4>
     d50:	1d c3       	rjmp	.+1594   	; 0x138c <DIO_Init+0x6ee>
     d52:	44 c2       	rjmp	.+1160   	; 0x11dc <DIO_Init+0x53e>
     d54:	2a 81       	ldd	r18, Y+2	; 0x02
     d56:	3b 81       	ldd	r19, Y+3	; 0x03
     d58:	2b 30       	cpi	r18, 0x0B	; 11
     d5a:	31 05       	cpc	r19, r1
     d5c:	09 f4       	brne	.+2      	; 0xd60 <DIO_Init+0xc2>
     d5e:	31 c5       	rjmp	.+2658   	; 0x17c2 <DIO_Init+0xb24>
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	8c 30       	cpi	r24, 0x0C	; 12
     d66:	91 05       	cpc	r25, r1
     d68:	6c f4       	brge	.+26     	; 0xd84 <DIO_Init+0xe6>
     d6a:	2a 81       	ldd	r18, Y+2	; 0x02
     d6c:	3b 81       	ldd	r19, Y+3	; 0x03
     d6e:	29 30       	cpi	r18, 0x09	; 9
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <DIO_Init+0xd8>
     d74:	4e c4       	rjmp	.+2204   	; 0x1612 <DIO_Init+0x974>
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	9b 81       	ldd	r25, Y+3	; 0x03
     d7a:	8a 30       	cpi	r24, 0x0A	; 10
     d7c:	91 05       	cpc	r25, r1
     d7e:	0c f0       	brlt	.+2      	; 0xd82 <DIO_Init+0xe4>
     d80:	b4 c4       	rjmp	.+2408   	; 0x16ea <DIO_Init+0xa4c>
     d82:	dc c3       	rjmp	.+1976   	; 0x153c <DIO_Init+0x89e>
     d84:	2a 81       	ldd	r18, Y+2	; 0x02
     d86:	3b 81       	ldd	r19, Y+3	; 0x03
     d88:	2d 30       	cpi	r18, 0x0D	; 13
     d8a:	31 05       	cpc	r19, r1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <DIO_Init+0xf2>
     d8e:	ef c5       	rjmp	.+3038   	; 0x196e <DIO_Init+0xcd0>
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	9b 81       	ldd	r25, Y+3	; 0x03
     d94:	8e 30       	cpi	r24, 0x0E	; 14
     d96:	91 05       	cpc	r25, r1
     d98:	0c f0       	brlt	.+2      	; 0xd9c <DIO_Init+0xfe>
     d9a:	53 c6       	rjmp	.+3238   	; 0x1a42 <DIO_Init+0xda4>
     d9c:	7e c5       	rjmp	.+2812   	; 0x189a <DIO_Init+0xbfc>
     d9e:	2a 81       	ldd	r18, Y+2	; 0x02
     da0:	3b 81       	ldd	r19, Y+3	; 0x03
     da2:	27 31       	cpi	r18, 0x17	; 23
     da4:	31 05       	cpc	r19, r1
     da6:	11 f4       	brne	.+4      	; 0xdac <DIO_Init+0x10e>
     da8:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <DIO_Init+0x14e2>
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	9b 81       	ldd	r25, Y+3	; 0x03
     db0:	88 31       	cpi	r24, 0x18	; 24
     db2:	91 05       	cpc	r25, r1
     db4:	4c f5       	brge	.+82     	; 0xe08 <DIO_Init+0x16a>
     db6:	2a 81       	ldd	r18, Y+2	; 0x02
     db8:	3b 81       	ldd	r19, Y+3	; 0x03
     dba:	23 31       	cpi	r18, 0x13	; 19
     dbc:	31 05       	cpc	r19, r1
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <DIO_Init+0x126>
     dc0:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <DIO_Init+0x11aa>
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	9b 81       	ldd	r25, Y+3	; 0x03
     dc8:	84 31       	cpi	r24, 0x14	; 20
     dca:	91 05       	cpc	r25, r1
     dcc:	6c f4       	brge	.+26     	; 0xde8 <DIO_Init+0x14a>
     dce:	2a 81       	ldd	r18, Y+2	; 0x02
     dd0:	3b 81       	ldd	r19, Y+3	; 0x03
     dd2:	21 31       	cpi	r18, 0x11	; 17
     dd4:	31 05       	cpc	r19, r1
     dd6:	09 f4       	brne	.+2      	; 0xdda <DIO_Init+0x13c>
     dd8:	69 c7       	rjmp	.+3794   	; 0x1cac <DIO_Init+0x100e>
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	9b 81       	ldd	r25, Y+3	; 0x03
     dde:	82 31       	cpi	r24, 0x12	; 18
     de0:	91 05       	cpc	r25, r1
     de2:	0c f0       	brlt	.+2      	; 0xde6 <DIO_Init+0x148>
     de4:	ca c7       	rjmp	.+3988   	; 0x1d7a <DIO_Init+0x10dc>
     de6:	fb c6       	rjmp	.+3574   	; 0x1bde <DIO_Init+0xf40>
     de8:	2a 81       	ldd	r18, Y+2	; 0x02
     dea:	3b 81       	ldd	r19, Y+3	; 0x03
     dec:	25 31       	cpi	r18, 0x15	; 21
     dee:	31 05       	cpc	r19, r1
     df0:	11 f4       	brne	.+4      	; 0xdf6 <DIO_Init+0x158>
     df2:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <DIO_Init+0x1346>
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	9b 81       	ldd	r25, Y+3	; 0x03
     dfa:	86 31       	cpi	r24, 0x16	; 22
     dfc:	91 05       	cpc	r25, r1
     dfe:	14 f0       	brlt	.+4      	; 0xe04 <DIO_Init+0x166>
     e00:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <DIO_Init+0x1414>
     e04:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <DIO_Init+0x1278>
     e08:	2a 81       	ldd	r18, Y+2	; 0x02
     e0a:	3b 81       	ldd	r19, Y+3	; 0x03
     e0c:	2b 31       	cpi	r18, 0x1B	; 27
     e0e:	31 05       	cpc	r19, r1
     e10:	11 f4       	brne	.+4      	; 0xe16 <DIO_Init+0x178>
     e12:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <DIO_Init+0x181a>
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	8c 31       	cpi	r24, 0x1C	; 28
     e1c:	91 05       	cpc	r25, r1
     e1e:	84 f4       	brge	.+32     	; 0xe40 <DIO_Init+0x1a2>
     e20:	2a 81       	ldd	r18, Y+2	; 0x02
     e22:	3b 81       	ldd	r19, Y+3	; 0x03
     e24:	29 31       	cpi	r18, 0x19	; 25
     e26:	31 05       	cpc	r19, r1
     e28:	11 f4       	brne	.+4      	; 0xe2e <DIO_Init+0x190>
     e2a:	0c 94 8e 11 	jmp	0x231c	; 0x231c <DIO_Init+0x167e>
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	9b 81       	ldd	r25, Y+3	; 0x03
     e32:	8a 31       	cpi	r24, 0x1A	; 26
     e34:	91 05       	cpc	r25, r1
     e36:	14 f0       	brlt	.+4      	; 0xe3c <DIO_Init+0x19e>
     e38:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <DIO_Init+0x174c>
     e3c:	0c 94 27 11 	jmp	0x224e	; 0x224e <DIO_Init+0x15b0>
     e40:	2a 81       	ldd	r18, Y+2	; 0x02
     e42:	3b 81       	ldd	r19, Y+3	; 0x03
     e44:	2d 31       	cpi	r18, 0x1D	; 29
     e46:	31 05       	cpc	r19, r1
     e48:	11 f4       	brne	.+4      	; 0xe4e <DIO_Init+0x1b0>
     e4a:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <DIO_Init+0x19b6>
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	9b 81       	ldd	r25, Y+3	; 0x03
     e52:	8d 31       	cpi	r24, 0x1D	; 29
     e54:	91 05       	cpc	r25, r1
     e56:	14 f4       	brge	.+4      	; 0xe5c <DIO_Init+0x1be>
     e58:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <DIO_Init+0x18e8>
     e5c:	2a 81       	ldd	r18, Y+2	; 0x02
     e5e:	3b 81       	ldd	r19, Y+3	; 0x03
     e60:	2e 31       	cpi	r18, 0x1E	; 30
     e62:	31 05       	cpc	r19, r1
     e64:	11 f4       	brne	.+4      	; 0xe6a <DIO_Init+0x1cc>
     e66:	0c 94 91 13 	jmp	0x2722	; 0x2722 <DIO_Init+0x1a84>
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	9b 81       	ldd	r25, Y+3	; 0x03
     e6e:	8f 31       	cpi	r24, 0x1F	; 31
     e70:	91 05       	cpc	r25, r1
     e72:	11 f4       	brne	.+4      	; 0xe78 <DIO_Init+0x1da>
     e74:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <DIO_Init+0x1b52>
     e78:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
		{
			case PA0:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	c9 01       	movw	r24, r18
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	82 0f       	add	r24, r18
     e8a:	93 1f       	adc	r25, r19
     e8c:	fc 01       	movw	r30, r24
     e8e:	e5 57       	subi	r30, 0x75	; 117
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	80 81       	ld	r24, Z
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	49 f4       	brne	.+18     	; 0xeaa <DIO_Init+0x20c>
				{
					SET_BIT(DDRA_R,PA0);
     e98:	aa e3       	ldi	r26, 0x3A	; 58
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ea e3       	ldi	r30, 0x3A	; 58
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	81 60       	ori	r24, 0x01	; 1
     ea4:	8c 93       	st	X, r24
     ea6:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	c9 01       	movw	r24, r18
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	82 0f       	add	r24, r18
     eb8:	93 1f       	adc	r25, r19
     eba:	fc 01       	movw	r30, r24
     ebc:	e5 57       	subi	r30, 0x75	; 117
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 81       	ld	r24, Z
     ec2:	88 23       	and	r24, r24
     ec4:	f1 f4       	brne	.+60     	; 0xf02 <DIO_Init+0x264>
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	c9 01       	movw	r24, r18
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	82 0f       	add	r24, r18
     ed4:	93 1f       	adc	r25, r19
     ed6:	fc 01       	movw	r30, r24
     ed8:	e4 57       	subi	r30, 0x74	; 116
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	80 81       	ld	r24, Z
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	81 f4       	brne	.+32     	; 0xf02 <DIO_Init+0x264>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRA_R,PA0);
     ee2:	aa e3       	ldi	r26, 0x3A	; 58
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ea e3       	ldi	r30, 0x3A	; 58
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8e 7f       	andi	r24, 0xFE	; 254
     eee:	8c 93       	st	X, r24
					SET_BIT(PORTA_R,PA0);
     ef0:	ab e3       	ldi	r26, 0x3B	; 59
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	eb e3       	ldi	r30, 0x3B	; 59
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
     efe:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	c9 01       	movw	r24, r18
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	82 0f       	add	r24, r18
     f10:	93 1f       	adc	r25, r19
     f12:	fc 01       	movw	r30, r24
     f14:	e5 57       	subi	r30, 0x75	; 117
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	80 81       	ld	r24, Z
     f1a:	88 23       	and	r24, r24
     f1c:	11 f0       	breq	.+4      	; 0xf22 <DIO_Init+0x284>
     f1e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	c9 01       	movw	r24, r18
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	82 0f       	add	r24, r18
     f30:	93 1f       	adc	r25, r19
     f32:	fc 01       	movw	r30, r24
     f34:	e4 57       	subi	r30, 0x74	; 116
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 81       	ld	r24, Z
     f3a:	88 23       	and	r24, r24
     f3c:	11 f0       	breq	.+4      	; 0xf42 <DIO_Init+0x2a4>
     f3e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRA_R,PA0);
     f42:	aa e3       	ldi	r26, 0x3A	; 58
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ea e3       	ldi	r30, 0x3A	; 58
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8e 7f       	andi	r24, 0xFE	; 254
     f4e:	8c 93       	st	X, r24
     f50:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PA1:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	c9 01       	movw	r24, r18
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	fc 01       	movw	r30, r24
     f66:	e5 57       	subi	r30, 0x75	; 117
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 81       	ld	r24, Z
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	49 f4       	brne	.+18     	; 0xf82 <DIO_Init+0x2e4>
				{
					SET_BIT(DDRA_R,PA1);
     f70:	aa e3       	ldi	r26, 0x3A	; 58
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ea e3       	ldi	r30, 0x3A	; 58
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	82 60       	ori	r24, 0x02	; 2
     f7c:	8c 93       	st	X, r24
     f7e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	c9 01       	movw	r24, r18
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	fc 01       	movw	r30, r24
     f94:	e5 57       	subi	r30, 0x75	; 117
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	88 23       	and	r24, r24
     f9c:	f1 f4       	brne	.+60     	; 0xfda <DIO_Init+0x33c>
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	c9 01       	movw	r24, r18
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	82 0f       	add	r24, r18
     fac:	93 1f       	adc	r25, r19
     fae:	fc 01       	movw	r30, r24
     fb0:	e4 57       	subi	r30, 0x74	; 116
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	80 81       	ld	r24, Z
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	81 f4       	brne	.+32     	; 0xfda <DIO_Init+0x33c>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRA_R,PA1);
     fba:	aa e3       	ldi	r26, 0x3A	; 58
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ea e3       	ldi	r30, 0x3A	; 58
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8d 7f       	andi	r24, 0xFD	; 253
     fc6:	8c 93       	st	X, r24
					SET_BIT(PORTA_R,PA1);
     fc8:	ab e3       	ldi	r26, 0x3B	; 59
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	eb e3       	ldi	r30, 0x3B	; 59
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	82 60       	ori	r24, 0x02	; 2
     fd4:	8c 93       	st	X, r24
     fd6:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	c9 01       	movw	r24, r18
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	82 0f       	add	r24, r18
     fe8:	93 1f       	adc	r25, r19
     fea:	fc 01       	movw	r30, r24
     fec:	e5 57       	subi	r30, 0x75	; 117
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	80 81       	ld	r24, Z
     ff2:	88 23       	and	r24, r24
     ff4:	11 f0       	breq	.+4      	; 0xffa <DIO_Init+0x35c>
     ff6:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	c9 01       	movw	r24, r18
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	82 0f       	add	r24, r18
    1008:	93 1f       	adc	r25, r19
    100a:	fc 01       	movw	r30, r24
    100c:	e4 57       	subi	r30, 0x74	; 116
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	88 23       	and	r24, r24
    1014:	11 f0       	breq	.+4      	; 0x101a <DIO_Init+0x37c>
    1016:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRA_R,PA1);
    101a:	aa e3       	ldi	r26, 0x3A	; 58
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	8d 7f       	andi	r24, 0xFD	; 253
    1026:	8c 93       	st	X, r24
    1028:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PA2:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	c9 01       	movw	r24, r18
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	82 0f       	add	r24, r18
    103a:	93 1f       	adc	r25, r19
    103c:	fc 01       	movw	r30, r24
    103e:	e5 57       	subi	r30, 0x75	; 117
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	80 81       	ld	r24, Z
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	49 f4       	brne	.+18     	; 0x105a <DIO_Init+0x3bc>
				{
					SET_BIT(DDRA_R,PA2);
    1048:	aa e3       	ldi	r26, 0x3A	; 58
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	ea e3       	ldi	r30, 0x3A	; 58
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	84 60       	ori	r24, 0x04	; 4
    1054:	8c 93       	st	X, r24
    1056:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	c9 01       	movw	r24, r18
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	82 0f       	add	r24, r18
    1068:	93 1f       	adc	r25, r19
    106a:	fc 01       	movw	r30, r24
    106c:	e5 57       	subi	r30, 0x75	; 117
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	80 81       	ld	r24, Z
    1072:	88 23       	and	r24, r24
    1074:	f1 f4       	brne	.+60     	; 0x10b2 <DIO_Init+0x414>
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	c9 01       	movw	r24, r18
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	82 0f       	add	r24, r18
    1084:	93 1f       	adc	r25, r19
    1086:	fc 01       	movw	r30, r24
    1088:	e4 57       	subi	r30, 0x74	; 116
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	80 81       	ld	r24, Z
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	81 f4       	brne	.+32     	; 0x10b2 <DIO_Init+0x414>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRA_R,PA2);
    1092:	aa e3       	ldi	r26, 0x3A	; 58
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	ea e3       	ldi	r30, 0x3A	; 58
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8b 7f       	andi	r24, 0xFB	; 251
    109e:	8c 93       	st	X, r24
					SET_BIT(PORTA_R,PA2);
    10a0:	ab e3       	ldi	r26, 0x3B	; 59
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	eb e3       	ldi	r30, 0x3B	; 59
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	84 60       	ori	r24, 0x04	; 4
    10ac:	8c 93       	st	X, r24
    10ae:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	c9 01       	movw	r24, r18
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	fc 01       	movw	r30, r24
    10c4:	e5 57       	subi	r30, 0x75	; 117
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	80 81       	ld	r24, Z
    10ca:	88 23       	and	r24, r24
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <DIO_Init+0x434>
    10ce:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	c9 01       	movw	r24, r18
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	82 0f       	add	r24, r18
    10e0:	93 1f       	adc	r25, r19
    10e2:	fc 01       	movw	r30, r24
    10e4:	e4 57       	subi	r30, 0x74	; 116
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	88 23       	and	r24, r24
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <DIO_Init+0x454>
    10ee:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRA_R,PA2);
    10f2:	aa e3       	ldi	r26, 0x3A	; 58
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ea e3       	ldi	r30, 0x3A	; 58
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8b 7f       	andi	r24, 0xFB	; 251
    10fe:	8c 93       	st	X, r24
    1100:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PA3:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	c9 01       	movw	r24, r18
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	fc 01       	movw	r30, r24
    1116:	e5 57       	subi	r30, 0x75	; 117
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	80 81       	ld	r24, Z
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	49 f4       	brne	.+18     	; 0x1132 <DIO_Init+0x494>
				{
					SET_BIT(DDRA_R,PA3);
    1120:	aa e3       	ldi	r26, 0x3A	; 58
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	ea e3       	ldi	r30, 0x3A	; 58
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	88 60       	ori	r24, 0x08	; 8
    112c:	8c 93       	st	X, r24
    112e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	c9 01       	movw	r24, r18
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	fc 01       	movw	r30, r24
    1144:	e5 57       	subi	r30, 0x75	; 117
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 81       	ld	r24, Z
    114a:	88 23       	and	r24, r24
    114c:	f1 f4       	brne	.+60     	; 0x118a <DIO_Init+0x4ec>
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	c9 01       	movw	r24, r18
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	82 0f       	add	r24, r18
    115c:	93 1f       	adc	r25, r19
    115e:	fc 01       	movw	r30, r24
    1160:	e4 57       	subi	r30, 0x74	; 116
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	80 81       	ld	r24, Z
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	81 f4       	brne	.+32     	; 0x118a <DIO_Init+0x4ec>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRA_R,PA3);
    116a:	aa e3       	ldi	r26, 0x3A	; 58
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ea e3       	ldi	r30, 0x3A	; 58
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	87 7f       	andi	r24, 0xF7	; 247
    1176:	8c 93       	st	X, r24
					SET_BIT(PORTA_R,PA3);
    1178:	ab e3       	ldi	r26, 0x3B	; 59
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	eb e3       	ldi	r30, 0x3B	; 59
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	88 60       	ori	r24, 0x08	; 8
    1184:	8c 93       	st	X, r24
    1186:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	c9 01       	movw	r24, r18
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	82 0f       	add	r24, r18
    1198:	93 1f       	adc	r25, r19
    119a:	fc 01       	movw	r30, r24
    119c:	e5 57       	subi	r30, 0x75	; 117
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	80 81       	ld	r24, Z
    11a2:	88 23       	and	r24, r24
    11a4:	11 f0       	breq	.+4      	; 0x11aa <DIO_Init+0x50c>
    11a6:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	c9 01       	movw	r24, r18
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	82 0f       	add	r24, r18
    11b8:	93 1f       	adc	r25, r19
    11ba:	fc 01       	movw	r30, r24
    11bc:	e4 57       	subi	r30, 0x74	; 116
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	88 23       	and	r24, r24
    11c4:	11 f0       	breq	.+4      	; 0x11ca <DIO_Init+0x52c>
    11c6:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRA_R,PA3);
    11ca:	aa e3       	ldi	r26, 0x3A	; 58
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	ea e3       	ldi	r30, 0x3A	; 58
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	87 7f       	andi	r24, 0xF7	; 247
    11d6:	8c 93       	st	X, r24
    11d8:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PA4:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	c9 01       	movw	r24, r18
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	82 0f       	add	r24, r18
    11ea:	93 1f       	adc	r25, r19
    11ec:	fc 01       	movw	r30, r24
    11ee:	e5 57       	subi	r30, 0x75	; 117
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	80 81       	ld	r24, Z
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	49 f4       	brne	.+18     	; 0x120a <DIO_Init+0x56c>
				{
					SET_BIT(DDRA_R,PA4);
    11f8:	aa e3       	ldi	r26, 0x3A	; 58
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ea e3       	ldi	r30, 0x3A	; 58
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	80 61       	ori	r24, 0x10	; 16
    1204:	8c 93       	st	X, r24
    1206:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	c9 01       	movw	r24, r18
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	82 0f       	add	r24, r18
    1218:	93 1f       	adc	r25, r19
    121a:	fc 01       	movw	r30, r24
    121c:	e5 57       	subi	r30, 0x75	; 117
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	80 81       	ld	r24, Z
    1222:	88 23       	and	r24, r24
    1224:	f1 f4       	brne	.+60     	; 0x1262 <DIO_Init+0x5c4>
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	c9 01       	movw	r24, r18
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	82 0f       	add	r24, r18
    1234:	93 1f       	adc	r25, r19
    1236:	fc 01       	movw	r30, r24
    1238:	e4 57       	subi	r30, 0x74	; 116
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	80 81       	ld	r24, Z
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	81 f4       	brne	.+32     	; 0x1262 <DIO_Init+0x5c4>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRA_R,PA4);
    1242:	aa e3       	ldi	r26, 0x3A	; 58
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	ea e3       	ldi	r30, 0x3A	; 58
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	8f 7e       	andi	r24, 0xEF	; 239
    124e:	8c 93       	st	X, r24
					SET_BIT(PORTA_R,PA4);
    1250:	ab e3       	ldi	r26, 0x3B	; 59
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	eb e3       	ldi	r30, 0x3B	; 59
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	80 61       	ori	r24, 0x10	; 16
    125c:	8c 93       	st	X, r24
    125e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	c9 01       	movw	r24, r18
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	82 0f       	add	r24, r18
    1270:	93 1f       	adc	r25, r19
    1272:	fc 01       	movw	r30, r24
    1274:	e5 57       	subi	r30, 0x75	; 117
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	80 81       	ld	r24, Z
    127a:	88 23       	and	r24, r24
    127c:	11 f0       	breq	.+4      	; 0x1282 <DIO_Init+0x5e4>
    127e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	c9 01       	movw	r24, r18
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	82 0f       	add	r24, r18
    1290:	93 1f       	adc	r25, r19
    1292:	fc 01       	movw	r30, r24
    1294:	e4 57       	subi	r30, 0x74	; 116
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	80 81       	ld	r24, Z
    129a:	88 23       	and	r24, r24
    129c:	11 f0       	breq	.+4      	; 0x12a2 <DIO_Init+0x604>
    129e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRA_R,PA4);
    12a2:	aa e3       	ldi	r26, 0x3A	; 58
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	ea e3       	ldi	r30, 0x3A	; 58
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 7e       	andi	r24, 0xEF	; 239
    12ae:	8c 93       	st	X, r24
    12b0:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PA5:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	c9 01       	movw	r24, r18
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	82 0f       	add	r24, r18
    12c2:	93 1f       	adc	r25, r19
    12c4:	fc 01       	movw	r30, r24
    12c6:	e5 57       	subi	r30, 0x75	; 117
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	80 81       	ld	r24, Z
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	49 f4       	brne	.+18     	; 0x12e2 <DIO_Init+0x644>
				{
					SET_BIT(DDRA_R,PA5);
    12d0:	aa e3       	ldi	r26, 0x3A	; 58
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ea e3       	ldi	r30, 0x3A	; 58
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 62       	ori	r24, 0x20	; 32
    12dc:	8c 93       	st	X, r24
    12de:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	c9 01       	movw	r24, r18
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	fc 01       	movw	r30, r24
    12f4:	e5 57       	subi	r30, 0x75	; 117
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	80 81       	ld	r24, Z
    12fa:	88 23       	and	r24, r24
    12fc:	f1 f4       	brne	.+60     	; 0x133a <DIO_Init+0x69c>
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	c9 01       	movw	r24, r18
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	82 0f       	add	r24, r18
    130c:	93 1f       	adc	r25, r19
    130e:	fc 01       	movw	r30, r24
    1310:	e4 57       	subi	r30, 0x74	; 116
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	80 81       	ld	r24, Z
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	81 f4       	brne	.+32     	; 0x133a <DIO_Init+0x69c>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRA_R,PA5);
    131a:	aa e3       	ldi	r26, 0x3A	; 58
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ea e3       	ldi	r30, 0x3A	; 58
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8f 7d       	andi	r24, 0xDF	; 223
    1326:	8c 93       	st	X, r24
					SET_BIT(PORTA_R,PA5);
    1328:	ab e3       	ldi	r26, 0x3B	; 59
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	eb e3       	ldi	r30, 0x3B	; 59
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 62       	ori	r24, 0x20	; 32
    1334:	8c 93       	st	X, r24
    1336:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	c9 01       	movw	r24, r18
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	82 0f       	add	r24, r18
    1348:	93 1f       	adc	r25, r19
    134a:	fc 01       	movw	r30, r24
    134c:	e5 57       	subi	r30, 0x75	; 117
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	80 81       	ld	r24, Z
    1352:	88 23       	and	r24, r24
    1354:	11 f0       	breq	.+4      	; 0x135a <DIO_Init+0x6bc>
    1356:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	c9 01       	movw	r24, r18
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	82 0f       	add	r24, r18
    1368:	93 1f       	adc	r25, r19
    136a:	fc 01       	movw	r30, r24
    136c:	e4 57       	subi	r30, 0x74	; 116
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	80 81       	ld	r24, Z
    1372:	88 23       	and	r24, r24
    1374:	11 f0       	breq	.+4      	; 0x137a <DIO_Init+0x6dc>
    1376:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRA_R,PA5);
    137a:	aa e3       	ldi	r26, 0x3A	; 58
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ea e3       	ldi	r30, 0x3A	; 58
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	8f 7d       	andi	r24, 0xDF	; 223
    1386:	8c 93       	st	X, r24
    1388:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PA6:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	c9 01       	movw	r24, r18
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	82 0f       	add	r24, r18
    139a:	93 1f       	adc	r25, r19
    139c:	fc 01       	movw	r30, r24
    139e:	e5 57       	subi	r30, 0x75	; 117
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	80 81       	ld	r24, Z
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	49 f4       	brne	.+18     	; 0x13ba <DIO_Init+0x71c>
				{
					SET_BIT(DDRA_R,PA6);
    13a8:	aa e3       	ldi	r26, 0x3A	; 58
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ea e3       	ldi	r30, 0x3A	; 58
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 64       	ori	r24, 0x40	; 64
    13b4:	8c 93       	st	X, r24
    13b6:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	c9 01       	movw	r24, r18
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	82 0f       	add	r24, r18
    13c8:	93 1f       	adc	r25, r19
    13ca:	fc 01       	movw	r30, r24
    13cc:	e5 57       	subi	r30, 0x75	; 117
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	80 81       	ld	r24, Z
    13d2:	88 23       	and	r24, r24
    13d4:	f1 f4       	brne	.+60     	; 0x1412 <DIO_Init+0x774>
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	c9 01       	movw	r24, r18
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	82 0f       	add	r24, r18
    13e4:	93 1f       	adc	r25, r19
    13e6:	fc 01       	movw	r30, r24
    13e8:	e4 57       	subi	r30, 0x74	; 116
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	80 81       	ld	r24, Z
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	81 f4       	brne	.+32     	; 0x1412 <DIO_Init+0x774>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRA_R,PA6);
    13f2:	aa e3       	ldi	r26, 0x3A	; 58
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ea e3       	ldi	r30, 0x3A	; 58
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8f 7b       	andi	r24, 0xBF	; 191
    13fe:	8c 93       	st	X, r24
					SET_BIT(PORTA_R,PA6);
    1400:	ab e3       	ldi	r26, 0x3B	; 59
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	eb e3       	ldi	r30, 0x3B	; 59
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	80 64       	ori	r24, 0x40	; 64
    140c:	8c 93       	st	X, r24
    140e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	c9 01       	movw	r24, r18
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	82 0f       	add	r24, r18
    1420:	93 1f       	adc	r25, r19
    1422:	fc 01       	movw	r30, r24
    1424:	e5 57       	subi	r30, 0x75	; 117
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	80 81       	ld	r24, Z
    142a:	88 23       	and	r24, r24
    142c:	11 f0       	breq	.+4      	; 0x1432 <DIO_Init+0x794>
    142e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	c9 01       	movw	r24, r18
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	82 0f       	add	r24, r18
    1440:	93 1f       	adc	r25, r19
    1442:	fc 01       	movw	r30, r24
    1444:	e4 57       	subi	r30, 0x74	; 116
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 81       	ld	r24, Z
    144a:	88 23       	and	r24, r24
    144c:	11 f0       	breq	.+4      	; 0x1452 <DIO_Init+0x7b4>
    144e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRA_R,PA6);
    1452:	aa e3       	ldi	r26, 0x3A	; 58
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ea e3       	ldi	r30, 0x3A	; 58
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8f 7b       	andi	r24, 0xBF	; 191
    145e:	8c 93       	st	X, r24
    1460:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PA7:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	c9 01       	movw	r24, r18
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	82 0f       	add	r24, r18
    1472:	93 1f       	adc	r25, r19
    1474:	fc 01       	movw	r30, r24
    1476:	e5 57       	subi	r30, 0x75	; 117
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	80 81       	ld	r24, Z
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	49 f4       	brne	.+18     	; 0x1492 <DIO_Init+0x7f4>
				{
					SET_BIT(DDRA_R,PA7);
    1480:	aa e3       	ldi	r26, 0x3A	; 58
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	ea e3       	ldi	r30, 0x3A	; 58
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	80 68       	ori	r24, 0x80	; 128
    148c:	8c 93       	st	X, r24
    148e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	c9 01       	movw	r24, r18
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	82 0f       	add	r24, r18
    14a0:	93 1f       	adc	r25, r19
    14a2:	fc 01       	movw	r30, r24
    14a4:	e5 57       	subi	r30, 0x75	; 117
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	80 81       	ld	r24, Z
    14aa:	88 23       	and	r24, r24
    14ac:	f1 f4       	brne	.+60     	; 0x14ea <DIO_Init+0x84c>
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	c9 01       	movw	r24, r18
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	fc 01       	movw	r30, r24
    14c0:	e4 57       	subi	r30, 0x74	; 116
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	81 f4       	brne	.+32     	; 0x14ea <DIO_Init+0x84c>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRA_R,PA7);
    14ca:	aa e3       	ldi	r26, 0x3A	; 58
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ea e3       	ldi	r30, 0x3A	; 58
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 77       	andi	r24, 0x7F	; 127
    14d6:	8c 93       	st	X, r24
					SET_BIT(PORTA_R,PA7);
    14d8:	ab e3       	ldi	r26, 0x3B	; 59
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	eb e3       	ldi	r30, 0x3B	; 59
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 68       	ori	r24, 0x80	; 128
    14e4:	8c 93       	st	X, r24
    14e6:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	c9 01       	movw	r24, r18
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	82 0f       	add	r24, r18
    14f8:	93 1f       	adc	r25, r19
    14fa:	fc 01       	movw	r30, r24
    14fc:	e5 57       	subi	r30, 0x75	; 117
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	80 81       	ld	r24, Z
    1502:	88 23       	and	r24, r24
    1504:	11 f0       	breq	.+4      	; 0x150a <DIO_Init+0x86c>
    1506:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	c9 01       	movw	r24, r18
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	82 0f       	add	r24, r18
    1518:	93 1f       	adc	r25, r19
    151a:	fc 01       	movw	r30, r24
    151c:	e4 57       	subi	r30, 0x74	; 116
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	80 81       	ld	r24, Z
    1522:	88 23       	and	r24, r24
    1524:	11 f0       	breq	.+4      	; 0x152a <DIO_Init+0x88c>
    1526:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRA_R,PA7);
    152a:	aa e3       	ldi	r26, 0x3A	; 58
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ea e3       	ldi	r30, 0x3A	; 58
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	8f 77       	andi	r24, 0x7F	; 127
    1536:	8c 93       	st	X, r24
    1538:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				break;
			}
			
			case PB0:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	c9 01       	movw	r24, r18
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	82 0f       	add	r24, r18
    154a:	93 1f       	adc	r25, r19
    154c:	fc 01       	movw	r30, r24
    154e:	e5 57       	subi	r30, 0x75	; 117
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	80 81       	ld	r24, Z
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	41 f4       	brne	.+16     	; 0x1568 <DIO_Init+0x8ca>
				{
					SET_BIT(DDRB_R,PB0);
    1558:	e7 e3       	ldi	r30, 0x37	; 55
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	a7 e3       	ldi	r26, 0x37	; 55
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	8c 91       	ld	r24, X
    1562:	80 83       	st	Z, r24
    1564:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	c9 01       	movw	r24, r18
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	82 0f       	add	r24, r18
    1576:	93 1f       	adc	r25, r19
    1578:	fc 01       	movw	r30, r24
    157a:	e5 57       	subi	r30, 0x75	; 117
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	88 23       	and	r24, r24
    1582:	f1 f4       	brne	.+60     	; 0x15c0 <DIO_Init+0x922>
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	c9 01       	movw	r24, r18
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	82 0f       	add	r24, r18
    1592:	93 1f       	adc	r25, r19
    1594:	fc 01       	movw	r30, r24
    1596:	e4 57       	subi	r30, 0x74	; 116
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	81 f4       	brne	.+32     	; 0x15c0 <DIO_Init+0x922>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRB_R,0);
    15a0:	a7 e3       	ldi	r26, 0x37	; 55
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e7 e3       	ldi	r30, 0x37	; 55
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8e 7f       	andi	r24, 0xFE	; 254
    15ac:	8c 93       	st	X, r24
					SET_BIT(PORTB_R,0);
    15ae:	a8 e3       	ldi	r26, 0x38	; 56
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e8 e3       	ldi	r30, 0x38	; 56
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	81 60       	ori	r24, 0x01	; 1
    15ba:	8c 93       	st	X, r24
    15bc:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	c9 01       	movw	r24, r18
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	82 0f       	add	r24, r18
    15ce:	93 1f       	adc	r25, r19
    15d0:	fc 01       	movw	r30, r24
    15d2:	e5 57       	subi	r30, 0x75	; 117
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	80 81       	ld	r24, Z
    15d8:	88 23       	and	r24, r24
    15da:	11 f0       	breq	.+4      	; 0x15e0 <DIO_Init+0x942>
    15dc:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	c9 01       	movw	r24, r18
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	82 0f       	add	r24, r18
    15ee:	93 1f       	adc	r25, r19
    15f0:	fc 01       	movw	r30, r24
    15f2:	e4 57       	subi	r30, 0x74	; 116
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	80 81       	ld	r24, Z
    15f8:	88 23       	and	r24, r24
    15fa:	11 f0       	breq	.+4      	; 0x1600 <DIO_Init+0x962>
    15fc:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRB_R,0);
    1600:	a7 e3       	ldi	r26, 0x37	; 55
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e7 e3       	ldi	r30, 0x37	; 55
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	8e 7f       	andi	r24, 0xFE	; 254
    160c:	8c 93       	st	X, r24
    160e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PB1:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	c9 01       	movw	r24, r18
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	82 0f       	add	r24, r18
    1620:	93 1f       	adc	r25, r19
    1622:	fc 01       	movw	r30, r24
    1624:	e5 57       	subi	r30, 0x75	; 117
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	80 81       	ld	r24, Z
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	49 f4       	brne	.+18     	; 0x1640 <DIO_Init+0x9a2>
				{
					SET_BIT(DDRB_R,1);
    162e:	a7 e3       	ldi	r26, 0x37	; 55
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e7 e3       	ldi	r30, 0x37	; 55
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	82 60       	ori	r24, 0x02	; 2
    163a:	8c 93       	st	X, r24
    163c:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	c9 01       	movw	r24, r18
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	82 0f       	add	r24, r18
    164e:	93 1f       	adc	r25, r19
    1650:	fc 01       	movw	r30, r24
    1652:	e5 57       	subi	r30, 0x75	; 117
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 81       	ld	r24, Z
    1658:	88 23       	and	r24, r24
    165a:	f1 f4       	brne	.+60     	; 0x1698 <DIO_Init+0x9fa>
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	c9 01       	movw	r24, r18
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	82 0f       	add	r24, r18
    166a:	93 1f       	adc	r25, r19
    166c:	fc 01       	movw	r30, r24
    166e:	e4 57       	subi	r30, 0x74	; 116
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	80 81       	ld	r24, Z
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	81 f4       	brne	.+32     	; 0x1698 <DIO_Init+0x9fa>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRB_R,1);
    1678:	a7 e3       	ldi	r26, 0x37	; 55
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e7 e3       	ldi	r30, 0x37	; 55
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8d 7f       	andi	r24, 0xFD	; 253
    1684:	8c 93       	st	X, r24
					SET_BIT(PORTB_R,1);
    1686:	a8 e3       	ldi	r26, 0x38	; 56
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e8 e3       	ldi	r30, 0x38	; 56
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	82 60       	ori	r24, 0x02	; 2
    1692:	8c 93       	st	X, r24
    1694:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	c9 01       	movw	r24, r18
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	82 0f       	add	r24, r18
    16a6:	93 1f       	adc	r25, r19
    16a8:	fc 01       	movw	r30, r24
    16aa:	e5 57       	subi	r30, 0x75	; 117
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	80 81       	ld	r24, Z
    16b0:	88 23       	and	r24, r24
    16b2:	11 f0       	breq	.+4      	; 0x16b8 <DIO_Init+0xa1a>
    16b4:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	c9 01       	movw	r24, r18
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	82 0f       	add	r24, r18
    16c6:	93 1f       	adc	r25, r19
    16c8:	fc 01       	movw	r30, r24
    16ca:	e4 57       	subi	r30, 0x74	; 116
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 81       	ld	r24, Z
    16d0:	88 23       	and	r24, r24
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <DIO_Init+0xa3a>
    16d4:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRB_R,1);
    16d8:	a7 e3       	ldi	r26, 0x37	; 55
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e7 e3       	ldi	r30, 0x37	; 55
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8d 7f       	andi	r24, 0xFD	; 253
    16e4:	8c 93       	st	X, r24
    16e6:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PB2:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	c9 01       	movw	r24, r18
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	82 0f       	add	r24, r18
    16f8:	93 1f       	adc	r25, r19
    16fa:	fc 01       	movw	r30, r24
    16fc:	e5 57       	subi	r30, 0x75	; 117
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	80 81       	ld	r24, Z
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	49 f4       	brne	.+18     	; 0x1718 <DIO_Init+0xa7a>
				{
					SET_BIT(DDRB_R,2);
    1706:	a7 e3       	ldi	r26, 0x37	; 55
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e7 e3       	ldi	r30, 0x37	; 55
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	84 60       	ori	r24, 0x04	; 4
    1712:	8c 93       	st	X, r24
    1714:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	c9 01       	movw	r24, r18
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	82 0f       	add	r24, r18
    1726:	93 1f       	adc	r25, r19
    1728:	fc 01       	movw	r30, r24
    172a:	e5 57       	subi	r30, 0x75	; 117
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	80 81       	ld	r24, Z
    1730:	88 23       	and	r24, r24
    1732:	f1 f4       	brne	.+60     	; 0x1770 <DIO_Init+0xad2>
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	c9 01       	movw	r24, r18
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	82 0f       	add	r24, r18
    1742:	93 1f       	adc	r25, r19
    1744:	fc 01       	movw	r30, r24
    1746:	e4 57       	subi	r30, 0x74	; 116
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	80 81       	ld	r24, Z
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	81 f4       	brne	.+32     	; 0x1770 <DIO_Init+0xad2>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRB_R,2);
    1750:	a7 e3       	ldi	r26, 0x37	; 55
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e7 e3       	ldi	r30, 0x37	; 55
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	8b 7f       	andi	r24, 0xFB	; 251
    175c:	8c 93       	st	X, r24
					SET_BIT(PORTB_R,2);
    175e:	a8 e3       	ldi	r26, 0x38	; 56
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e8 e3       	ldi	r30, 0x38	; 56
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	84 60       	ori	r24, 0x04	; 4
    176a:	8c 93       	st	X, r24
    176c:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	c9 01       	movw	r24, r18
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	82 0f       	add	r24, r18
    177e:	93 1f       	adc	r25, r19
    1780:	fc 01       	movw	r30, r24
    1782:	e5 57       	subi	r30, 0x75	; 117
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	88 23       	and	r24, r24
    178a:	11 f0       	breq	.+4      	; 0x1790 <DIO_Init+0xaf2>
    178c:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	c9 01       	movw	r24, r18
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	82 0f       	add	r24, r18
    179e:	93 1f       	adc	r25, r19
    17a0:	fc 01       	movw	r30, r24
    17a2:	e4 57       	subi	r30, 0x74	; 116
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	88 23       	and	r24, r24
    17aa:	11 f0       	breq	.+4      	; 0x17b0 <DIO_Init+0xb12>
    17ac:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRB_R,2);
    17b0:	a7 e3       	ldi	r26, 0x37	; 55
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e7 e3       	ldi	r30, 0x37	; 55
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8b 7f       	andi	r24, 0xFB	; 251
    17bc:	8c 93       	st	X, r24
    17be:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PB3:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	c9 01       	movw	r24, r18
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	82 0f       	add	r24, r18
    17d0:	93 1f       	adc	r25, r19
    17d2:	fc 01       	movw	r30, r24
    17d4:	e5 57       	subi	r30, 0x75	; 117
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 81       	ld	r24, Z
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	49 f4       	brne	.+18     	; 0x17f0 <DIO_Init+0xb52>
				{
					SET_BIT(DDRB_R,3);
    17de:	a7 e3       	ldi	r26, 0x37	; 55
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e7 e3       	ldi	r30, 0x37	; 55
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	88 60       	ori	r24, 0x08	; 8
    17ea:	8c 93       	st	X, r24
    17ec:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	c9 01       	movw	r24, r18
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	82 0f       	add	r24, r18
    17fe:	93 1f       	adc	r25, r19
    1800:	fc 01       	movw	r30, r24
    1802:	e5 57       	subi	r30, 0x75	; 117
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	88 23       	and	r24, r24
    180a:	f1 f4       	brne	.+60     	; 0x1848 <DIO_Init+0xbaa>
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	c9 01       	movw	r24, r18
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	82 0f       	add	r24, r18
    181a:	93 1f       	adc	r25, r19
    181c:	fc 01       	movw	r30, r24
    181e:	e4 57       	subi	r30, 0x74	; 116
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 81       	ld	r24, Z
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	81 f4       	brne	.+32     	; 0x1848 <DIO_Init+0xbaa>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRB_R,3);
    1828:	a7 e3       	ldi	r26, 0x37	; 55
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e7 e3       	ldi	r30, 0x37	; 55
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	87 7f       	andi	r24, 0xF7	; 247
    1834:	8c 93       	st	X, r24
					SET_BIT(PORTB_R,3);
    1836:	a8 e3       	ldi	r26, 0x38	; 56
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e8 e3       	ldi	r30, 0x38	; 56
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	88 60       	ori	r24, 0x08	; 8
    1842:	8c 93       	st	X, r24
    1844:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	c9 01       	movw	r24, r18
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	82 0f       	add	r24, r18
    1856:	93 1f       	adc	r25, r19
    1858:	fc 01       	movw	r30, r24
    185a:	e5 57       	subi	r30, 0x75	; 117
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	88 23       	and	r24, r24
    1862:	11 f0       	breq	.+4      	; 0x1868 <DIO_Init+0xbca>
    1864:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	c9 01       	movw	r24, r18
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	82 0f       	add	r24, r18
    1876:	93 1f       	adc	r25, r19
    1878:	fc 01       	movw	r30, r24
    187a:	e4 57       	subi	r30, 0x74	; 116
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	80 81       	ld	r24, Z
    1880:	88 23       	and	r24, r24
    1882:	11 f0       	breq	.+4      	; 0x1888 <DIO_Init+0xbea>
    1884:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRB_R,3);
    1888:	a7 e3       	ldi	r26, 0x37	; 55
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e7 e3       	ldi	r30, 0x37	; 55
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	87 7f       	andi	r24, 0xF7	; 247
    1894:	8c 93       	st	X, r24
    1896:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PB4:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	c9 01       	movw	r24, r18
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	82 0f       	add	r24, r18
    18a8:	93 1f       	adc	r25, r19
    18aa:	fc 01       	movw	r30, r24
    18ac:	e5 57       	subi	r30, 0x75	; 117
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	80 81       	ld	r24, Z
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	49 f4       	brne	.+18     	; 0x18c8 <DIO_Init+0xc2a>
				{
					SET_BIT(DDRB_R,4);
    18b6:	a7 e3       	ldi	r26, 0x37	; 55
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e7 e3       	ldi	r30, 0x37	; 55
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	80 61       	ori	r24, 0x10	; 16
    18c2:	8c 93       	st	X, r24
    18c4:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	c9 01       	movw	r24, r18
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	82 0f       	add	r24, r18
    18d6:	93 1f       	adc	r25, r19
    18d8:	fc 01       	movw	r30, r24
    18da:	e5 57       	subi	r30, 0x75	; 117
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 81       	ld	r24, Z
    18e0:	88 23       	and	r24, r24
    18e2:	f1 f4       	brne	.+60     	; 0x1920 <DIO_Init+0xc82>
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	c9 01       	movw	r24, r18
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	82 0f       	add	r24, r18
    18f2:	93 1f       	adc	r25, r19
    18f4:	fc 01       	movw	r30, r24
    18f6:	e4 57       	subi	r30, 0x74	; 116
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	81 f4       	brne	.+32     	; 0x1920 <DIO_Init+0xc82>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRB_R,4);
    1900:	a7 e3       	ldi	r26, 0x37	; 55
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e7 e3       	ldi	r30, 0x37	; 55
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	8f 7e       	andi	r24, 0xEF	; 239
    190c:	8c 93       	st	X, r24
					SET_BIT(PORTB_R,4);
    190e:	a8 e3       	ldi	r26, 0x38	; 56
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e8 e3       	ldi	r30, 0x38	; 56
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	80 61       	ori	r24, 0x10	; 16
    191a:	8c 93       	st	X, r24
    191c:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	c9 01       	movw	r24, r18
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	82 0f       	add	r24, r18
    192e:	93 1f       	adc	r25, r19
    1930:	fc 01       	movw	r30, r24
    1932:	e5 57       	subi	r30, 0x75	; 117
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	80 81       	ld	r24, Z
    1938:	88 23       	and	r24, r24
    193a:	09 f0       	breq	.+2      	; 0x193e <DIO_Init+0xca0>
    193c:	bd c7       	rjmp	.+3962   	; 0x28b8 <DIO_Init+0x1c1a>
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	c9 01       	movw	r24, r18
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	82 0f       	add	r24, r18
    194c:	93 1f       	adc	r25, r19
    194e:	fc 01       	movw	r30, r24
    1950:	e4 57       	subi	r30, 0x74	; 116
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	80 81       	ld	r24, Z
    1956:	88 23       	and	r24, r24
    1958:	09 f0       	breq	.+2      	; 0x195c <DIO_Init+0xcbe>
    195a:	ae c7       	rjmp	.+3932   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRB_R,4);
    195c:	a7 e3       	ldi	r26, 0x37	; 55
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e7 e3       	ldi	r30, 0x37	; 55
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8f 7e       	andi	r24, 0xEF	; 239
    1968:	8c 93       	st	X, r24
    196a:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PB5:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	c9 01       	movw	r24, r18
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	82 0f       	add	r24, r18
    197c:	93 1f       	adc	r25, r19
    197e:	fc 01       	movw	r30, r24
    1980:	e5 57       	subi	r30, 0x75	; 117
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 81       	ld	r24, Z
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	49 f4       	brne	.+18     	; 0x199c <DIO_Init+0xcfe>
				{
					SET_BIT(DDRB_R,5);
    198a:	a7 e3       	ldi	r26, 0x37	; 55
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e7 e3       	ldi	r30, 0x37	; 55
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	80 62       	ori	r24, 0x20	; 32
    1996:	8c 93       	st	X, r24
    1998:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	c9 01       	movw	r24, r18
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	82 0f       	add	r24, r18
    19aa:	93 1f       	adc	r25, r19
    19ac:	fc 01       	movw	r30, r24
    19ae:	e5 57       	subi	r30, 0x75	; 117
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	80 81       	ld	r24, Z
    19b4:	88 23       	and	r24, r24
    19b6:	f1 f4       	brne	.+60     	; 0x19f4 <DIO_Init+0xd56>
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	c9 01       	movw	r24, r18
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	82 0f       	add	r24, r18
    19c6:	93 1f       	adc	r25, r19
    19c8:	fc 01       	movw	r30, r24
    19ca:	e4 57       	subi	r30, 0x74	; 116
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	80 81       	ld	r24, Z
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	81 f4       	brne	.+32     	; 0x19f4 <DIO_Init+0xd56>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRB_R,5);
    19d4:	a7 e3       	ldi	r26, 0x37	; 55
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e7 e3       	ldi	r30, 0x37	; 55
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8f 7d       	andi	r24, 0xDF	; 223
    19e0:	8c 93       	st	X, r24
					SET_BIT(PORTB_R,5);
    19e2:	a8 e3       	ldi	r26, 0x38	; 56
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e8 e3       	ldi	r30, 0x38	; 56
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	80 62       	ori	r24, 0x20	; 32
    19ee:	8c 93       	st	X, r24
    19f0:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	c9 01       	movw	r24, r18
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	82 0f       	add	r24, r18
    1a02:	93 1f       	adc	r25, r19
    1a04:	fc 01       	movw	r30, r24
    1a06:	e5 57       	subi	r30, 0x75	; 117
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 81       	ld	r24, Z
    1a0c:	88 23       	and	r24, r24
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <DIO_Init+0xd74>
    1a10:	53 c7       	rjmp	.+3750   	; 0x28b8 <DIO_Init+0x1c1a>
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	c9 01       	movw	r24, r18
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	82 0f       	add	r24, r18
    1a20:	93 1f       	adc	r25, r19
    1a22:	fc 01       	movw	r30, r24
    1a24:	e4 57       	subi	r30, 0x74	; 116
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 81       	ld	r24, Z
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <DIO_Init+0xd92>
    1a2e:	44 c7       	rjmp	.+3720   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRB_R,5);
    1a30:	a7 e3       	ldi	r26, 0x37	; 55
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e7 e3       	ldi	r30, 0x37	; 55
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8f 7d       	andi	r24, 0xDF	; 223
    1a3c:	8c 93       	st	X, r24
    1a3e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PB6:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	c9 01       	movw	r24, r18
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	82 0f       	add	r24, r18
    1a50:	93 1f       	adc	r25, r19
    1a52:	fc 01       	movw	r30, r24
    1a54:	e5 57       	subi	r30, 0x75	; 117
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	80 81       	ld	r24, Z
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	41 f4       	brne	.+16     	; 0x1a6e <DIO_Init+0xdd0>
				{
					SET_BIT(DDRB_R,6);
    1a5e:	a7 e3       	ldi	r26, 0x37	; 55
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e7 e3       	ldi	r30, 0x37	; 55
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	80 64       	ori	r24, 0x40	; 64
    1a6a:	8c 93       	st	X, r24
    1a6c:	25 c7       	rjmp	.+3658   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	c9 01       	movw	r24, r18
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	82 0f       	add	r24, r18
    1a7c:	93 1f       	adc	r25, r19
    1a7e:	fc 01       	movw	r30, r24
    1a80:	e5 57       	subi	r30, 0x75	; 117
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	80 81       	ld	r24, Z
    1a86:	88 23       	and	r24, r24
    1a88:	e9 f4       	brne	.+58     	; 0x1ac4 <DIO_Init+0xe26>
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	c9 01       	movw	r24, r18
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	82 0f       	add	r24, r18
    1a98:	93 1f       	adc	r25, r19
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	e4 57       	subi	r30, 0x74	; 116
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 81       	ld	r24, Z
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	79 f4       	brne	.+30     	; 0x1ac4 <DIO_Init+0xe26>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRB_R,6);
    1aa6:	a7 e3       	ldi	r26, 0x37	; 55
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e7 e3       	ldi	r30, 0x37	; 55
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	8f 7b       	andi	r24, 0xBF	; 191
    1ab2:	8c 93       	st	X, r24
					SET_BIT(PORTB_R,6);
    1ab4:	a8 e3       	ldi	r26, 0x38	; 56
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e8 e3       	ldi	r30, 0x38	; 56
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	80 64       	ori	r24, 0x40	; 64
    1ac0:	8c 93       	st	X, r24
    1ac2:	fa c6       	rjmp	.+3572   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	c9 01       	movw	r24, r18
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	82 0f       	add	r24, r18
    1ad2:	93 1f       	adc	r25, r19
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	e5 57       	subi	r30, 0x75	; 117
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	88 23       	and	r24, r24
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <DIO_Init+0xe44>
    1ae0:	eb c6       	rjmp	.+3542   	; 0x28b8 <DIO_Init+0x1c1a>
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	c9 01       	movw	r24, r18
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	82 0f       	add	r24, r18
    1af0:	93 1f       	adc	r25, r19
    1af2:	fc 01       	movw	r30, r24
    1af4:	e4 57       	subi	r30, 0x74	; 116
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	88 23       	and	r24, r24
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <DIO_Init+0xe62>
    1afe:	dc c6       	rjmp	.+3512   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRB_R,6);
    1b00:	a7 e3       	ldi	r26, 0x37	; 55
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e7 e3       	ldi	r30, 0x37	; 55
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	8f 7b       	andi	r24, 0xBF	; 191
    1b0c:	8c 93       	st	X, r24
    1b0e:	d4 c6       	rjmp	.+3496   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PB7:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	c9 01       	movw	r24, r18
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	82 0f       	add	r24, r18
    1b1e:	93 1f       	adc	r25, r19
    1b20:	fc 01       	movw	r30, r24
    1b22:	e5 57       	subi	r30, 0x75	; 117
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 81       	ld	r24, Z
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	41 f4       	brne	.+16     	; 0x1b3c <DIO_Init+0xe9e>
				{
					SET_BIT(DDRB_R,7);
    1b2c:	a7 e3       	ldi	r26, 0x37	; 55
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e7 e3       	ldi	r30, 0x37	; 55
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	80 68       	ori	r24, 0x80	; 128
    1b38:	8c 93       	st	X, r24
    1b3a:	be c6       	rjmp	.+3452   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	c9 01       	movw	r24, r18
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	82 0f       	add	r24, r18
    1b4a:	93 1f       	adc	r25, r19
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	e5 57       	subi	r30, 0x75	; 117
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	80 81       	ld	r24, Z
    1b54:	88 23       	and	r24, r24
    1b56:	e9 f4       	brne	.+58     	; 0x1b92 <DIO_Init+0xef4>
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	c9 01       	movw	r24, r18
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	82 0f       	add	r24, r18
    1b66:	93 1f       	adc	r25, r19
    1b68:	fc 01       	movw	r30, r24
    1b6a:	e4 57       	subi	r30, 0x74	; 116
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	79 f4       	brne	.+30     	; 0x1b92 <DIO_Init+0xef4>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRB_R,7);
    1b74:	a7 e3       	ldi	r26, 0x37	; 55
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e7 e3       	ldi	r30, 0x37	; 55
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8f 77       	andi	r24, 0x7F	; 127
    1b80:	8c 93       	st	X, r24
					SET_BIT(PORTB_R,7);
    1b82:	a8 e3       	ldi	r26, 0x38	; 56
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e8 e3       	ldi	r30, 0x38	; 56
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	80 68       	ori	r24, 0x80	; 128
    1b8e:	8c 93       	st	X, r24
    1b90:	93 c6       	rjmp	.+3366   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	c9 01       	movw	r24, r18
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	82 0f       	add	r24, r18
    1ba0:	93 1f       	adc	r25, r19
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	e5 57       	subi	r30, 0x75	; 117
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 81       	ld	r24, Z
    1baa:	88 23       	and	r24, r24
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <DIO_Init+0xf12>
    1bae:	84 c6       	rjmp	.+3336   	; 0x28b8 <DIO_Init+0x1c1a>
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	c9 01       	movw	r24, r18
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	82 0f       	add	r24, r18
    1bbe:	93 1f       	adc	r25, r19
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	e4 57       	subi	r30, 0x74	; 116
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	80 81       	ld	r24, Z
    1bc8:	88 23       	and	r24, r24
    1bca:	09 f0       	breq	.+2      	; 0x1bce <DIO_Init+0xf30>
    1bcc:	75 c6       	rjmp	.+3306   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRB_R,7);
    1bce:	a7 e3       	ldi	r26, 0x37	; 55
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e7 e3       	ldi	r30, 0x37	; 55
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8f 77       	andi	r24, 0x7F	; 127
    1bda:	8c 93       	st	X, r24
    1bdc:	6d c6       	rjmp	.+3290   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PC0:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	c9 01       	movw	r24, r18
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	82 0f       	add	r24, r18
    1bec:	93 1f       	adc	r25, r19
    1bee:	fc 01       	movw	r30, r24
    1bf0:	e5 57       	subi	r30, 0x75	; 117
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	80 81       	ld	r24, Z
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	41 f4       	brne	.+16     	; 0x1c0a <DIO_Init+0xf6c>
				{
					SET_BIT(DDRC_R,0);
    1bfa:	a4 e3       	ldi	r26, 0x34	; 52
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e4 e3       	ldi	r30, 0x34	; 52
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	81 60       	ori	r24, 0x01	; 1
    1c06:	8c 93       	st	X, r24
    1c08:	57 c6       	rjmp	.+3246   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	c9 01       	movw	r24, r18
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	82 0f       	add	r24, r18
    1c18:	93 1f       	adc	r25, r19
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	e5 57       	subi	r30, 0x75	; 117
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	80 81       	ld	r24, Z
    1c22:	88 23       	and	r24, r24
    1c24:	e9 f4       	brne	.+58     	; 0x1c60 <DIO_Init+0xfc2>
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	c9 01       	movw	r24, r18
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	82 0f       	add	r24, r18
    1c34:	93 1f       	adc	r25, r19
    1c36:	fc 01       	movw	r30, r24
    1c38:	e4 57       	subi	r30, 0x74	; 116
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	80 81       	ld	r24, Z
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	79 f4       	brne	.+30     	; 0x1c60 <DIO_Init+0xfc2>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRC_R,0);
    1c42:	a4 e3       	ldi	r26, 0x34	; 52
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e4 e3       	ldi	r30, 0x34	; 52
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	8e 7f       	andi	r24, 0xFE	; 254
    1c4e:	8c 93       	st	X, r24
					SET_BIT(PORTC_R,0);
    1c50:	a5 e3       	ldi	r26, 0x35	; 53
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e5 e3       	ldi	r30, 0x35	; 53
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	81 60       	ori	r24, 0x01	; 1
    1c5c:	8c 93       	st	X, r24
    1c5e:	2c c6       	rjmp	.+3160   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	c9 01       	movw	r24, r18
    1c68:	88 0f       	add	r24, r24
    1c6a:	99 1f       	adc	r25, r25
    1c6c:	82 0f       	add	r24, r18
    1c6e:	93 1f       	adc	r25, r19
    1c70:	fc 01       	movw	r30, r24
    1c72:	e5 57       	subi	r30, 0x75	; 117
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	80 81       	ld	r24, Z
    1c78:	88 23       	and	r24, r24
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <DIO_Init+0xfe0>
    1c7c:	1d c6       	rjmp	.+3130   	; 0x28b8 <DIO_Init+0x1c1a>
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	c9 01       	movw	r24, r18
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	82 0f       	add	r24, r18
    1c8c:	93 1f       	adc	r25, r19
    1c8e:	fc 01       	movw	r30, r24
    1c90:	e4 57       	subi	r30, 0x74	; 116
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
    1c96:	88 23       	and	r24, r24
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <DIO_Init+0xffe>
    1c9a:	0e c6       	rjmp	.+3100   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRC_R,0);
    1c9c:	a4 e3       	ldi	r26, 0x34	; 52
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e4 e3       	ldi	r30, 0x34	; 52
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8e 7f       	andi	r24, 0xFE	; 254
    1ca8:	8c 93       	st	X, r24
    1caa:	06 c6       	rjmp	.+3084   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PC1:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	c9 01       	movw	r24, r18
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	e5 57       	subi	r30, 0x75	; 117
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	80 81       	ld	r24, Z
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	41 f4       	brne	.+16     	; 0x1cd8 <DIO_Init+0x103a>
				{
					SET_BIT(DDRC_R,1);
    1cc8:	a4 e3       	ldi	r26, 0x34	; 52
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e4 e3       	ldi	r30, 0x34	; 52
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	82 60       	ori	r24, 0x02	; 2
    1cd4:	8c 93       	st	X, r24
    1cd6:	f0 c5       	rjmp	.+3040   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	c9 01       	movw	r24, r18
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	82 0f       	add	r24, r18
    1ce6:	93 1f       	adc	r25, r19
    1ce8:	fc 01       	movw	r30, r24
    1cea:	e5 57       	subi	r30, 0x75	; 117
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	80 81       	ld	r24, Z
    1cf0:	88 23       	and	r24, r24
    1cf2:	e9 f4       	brne	.+58     	; 0x1d2e <DIO_Init+0x1090>
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	c9 01       	movw	r24, r18
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	82 0f       	add	r24, r18
    1d02:	93 1f       	adc	r25, r19
    1d04:	fc 01       	movw	r30, r24
    1d06:	e4 57       	subi	r30, 0x74	; 116
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	79 f4       	brne	.+30     	; 0x1d2e <DIO_Init+0x1090>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRC_R,1);
    1d10:	a4 e3       	ldi	r26, 0x34	; 52
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e4 e3       	ldi	r30, 0x34	; 52
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	8d 7f       	andi	r24, 0xFD	; 253
    1d1c:	8c 93       	st	X, r24
					SET_BIT(PORTC_R,1);
    1d1e:	a5 e3       	ldi	r26, 0x35	; 53
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e5 e3       	ldi	r30, 0x35	; 53
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	82 60       	ori	r24, 0x02	; 2
    1d2a:	8c 93       	st	X, r24
    1d2c:	c5 c5       	rjmp	.+2954   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	c9 01       	movw	r24, r18
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	82 0f       	add	r24, r18
    1d3c:	93 1f       	adc	r25, r19
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e5 57       	subi	r30, 0x75	; 117
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	80 81       	ld	r24, Z
    1d46:	88 23       	and	r24, r24
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <DIO_Init+0x10ae>
    1d4a:	b6 c5       	rjmp	.+2924   	; 0x28b8 <DIO_Init+0x1c1a>
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	c9 01       	movw	r24, r18
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	82 0f       	add	r24, r18
    1d5a:	93 1f       	adc	r25, r19
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	e4 57       	subi	r30, 0x74	; 116
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	80 81       	ld	r24, Z
    1d64:	88 23       	and	r24, r24
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <DIO_Init+0x10cc>
    1d68:	a7 c5       	rjmp	.+2894   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRC_R,1);
    1d6a:	a4 e3       	ldi	r26, 0x34	; 52
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e4 e3       	ldi	r30, 0x34	; 52
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	8d 7f       	andi	r24, 0xFD	; 253
    1d76:	8c 93       	st	X, r24
    1d78:	9f c5       	rjmp	.+2878   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PC2:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	c9 01       	movw	r24, r18
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	82 0f       	add	r24, r18
    1d88:	93 1f       	adc	r25, r19
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	e5 57       	subi	r30, 0x75	; 117
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	41 f4       	brne	.+16     	; 0x1da6 <DIO_Init+0x1108>
				{
					SET_BIT(DDRC_R,2);
    1d96:	a4 e3       	ldi	r26, 0x34	; 52
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e4 e3       	ldi	r30, 0x34	; 52
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	84 60       	ori	r24, 0x04	; 4
    1da2:	8c 93       	st	X, r24
    1da4:	89 c5       	rjmp	.+2834   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	c9 01       	movw	r24, r18
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	82 0f       	add	r24, r18
    1db4:	93 1f       	adc	r25, r19
    1db6:	fc 01       	movw	r30, r24
    1db8:	e5 57       	subi	r30, 0x75	; 117
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	88 23       	and	r24, r24
    1dc0:	e9 f4       	brne	.+58     	; 0x1dfc <DIO_Init+0x115e>
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	c9 01       	movw	r24, r18
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	82 0f       	add	r24, r18
    1dd0:	93 1f       	adc	r25, r19
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	e4 57       	subi	r30, 0x74	; 116
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 81       	ld	r24, Z
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	79 f4       	brne	.+30     	; 0x1dfc <DIO_Init+0x115e>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRC_R,2);
    1dde:	a4 e3       	ldi	r26, 0x34	; 52
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e4 e3       	ldi	r30, 0x34	; 52
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	8b 7f       	andi	r24, 0xFB	; 251
    1dea:	8c 93       	st	X, r24
					SET_BIT(PORTC_R,2);
    1dec:	a5 e3       	ldi	r26, 0x35	; 53
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e3       	ldi	r30, 0x35	; 53
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	84 60       	ori	r24, 0x04	; 4
    1df8:	8c 93       	st	X, r24
    1dfa:	5e c5       	rjmp	.+2748   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	c9 01       	movw	r24, r18
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	82 0f       	add	r24, r18
    1e0a:	93 1f       	adc	r25, r19
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e5 57       	subi	r30, 0x75	; 117
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	88 23       	and	r24, r24
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <DIO_Init+0x117c>
    1e18:	4f c5       	rjmp	.+2718   	; 0x28b8 <DIO_Init+0x1c1a>
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	c9 01       	movw	r24, r18
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	82 0f       	add	r24, r18
    1e28:	93 1f       	adc	r25, r19
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	e4 57       	subi	r30, 0x74	; 116
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	88 23       	and	r24, r24
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <DIO_Init+0x119a>
    1e36:	40 c5       	rjmp	.+2688   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRC_R,2);
    1e38:	a4 e3       	ldi	r26, 0x34	; 52
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e4 e3       	ldi	r30, 0x34	; 52
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8b 7f       	andi	r24, 0xFB	; 251
    1e44:	8c 93       	st	X, r24
    1e46:	38 c5       	rjmp	.+2672   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PC3:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	c9 01       	movw	r24, r18
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	82 0f       	add	r24, r18
    1e56:	93 1f       	adc	r25, r19
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e5 57       	subi	r30, 0x75	; 117
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 81       	ld	r24, Z
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	41 f4       	brne	.+16     	; 0x1e74 <DIO_Init+0x11d6>
				{
					SET_BIT(DDRC_R,3);
    1e64:	a4 e3       	ldi	r26, 0x34	; 52
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e4 e3       	ldi	r30, 0x34	; 52
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	88 60       	ori	r24, 0x08	; 8
    1e70:	8c 93       	st	X, r24
    1e72:	22 c5       	rjmp	.+2628   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	c9 01       	movw	r24, r18
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	82 0f       	add	r24, r18
    1e82:	93 1f       	adc	r25, r19
    1e84:	fc 01       	movw	r30, r24
    1e86:	e5 57       	subi	r30, 0x75	; 117
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	80 81       	ld	r24, Z
    1e8c:	88 23       	and	r24, r24
    1e8e:	e9 f4       	brne	.+58     	; 0x1eca <DIO_Init+0x122c>
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	c9 01       	movw	r24, r18
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	82 0f       	add	r24, r18
    1e9e:	93 1f       	adc	r25, r19
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	e4 57       	subi	r30, 0x74	; 116
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	79 f4       	brne	.+30     	; 0x1eca <DIO_Init+0x122c>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRC_R,3);
    1eac:	a4 e3       	ldi	r26, 0x34	; 52
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e4 e3       	ldi	r30, 0x34	; 52
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	87 7f       	andi	r24, 0xF7	; 247
    1eb8:	8c 93       	st	X, r24
					SET_BIT(PORTC_R,3);
    1eba:	a5 e3       	ldi	r26, 0x35	; 53
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e5 e3       	ldi	r30, 0x35	; 53
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	88 60       	ori	r24, 0x08	; 8
    1ec6:	8c 93       	st	X, r24
    1ec8:	f7 c4       	rjmp	.+2542   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	c9 01       	movw	r24, r18
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	82 0f       	add	r24, r18
    1ed8:	93 1f       	adc	r25, r19
    1eda:	fc 01       	movw	r30, r24
    1edc:	e5 57       	subi	r30, 0x75	; 117
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	88 23       	and	r24, r24
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <DIO_Init+0x124a>
    1ee6:	e8 c4       	rjmp	.+2512   	; 0x28b8 <DIO_Init+0x1c1a>
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	c9 01       	movw	r24, r18
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	82 0f       	add	r24, r18
    1ef6:	93 1f       	adc	r25, r19
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e4 57       	subi	r30, 0x74	; 116
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	88 23       	and	r24, r24
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <DIO_Init+0x1268>
    1f04:	d9 c4       	rjmp	.+2482   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRC_R,3);
    1f06:	a4 e3       	ldi	r26, 0x34	; 52
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e4 e3       	ldi	r30, 0x34	; 52
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	87 7f       	andi	r24, 0xF7	; 247
    1f12:	8c 93       	st	X, r24
    1f14:	d1 c4       	rjmp	.+2466   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PC4:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	c9 01       	movw	r24, r18
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	82 0f       	add	r24, r18
    1f24:	93 1f       	adc	r25, r19
    1f26:	fc 01       	movw	r30, r24
    1f28:	e5 57       	subi	r30, 0x75	; 117
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	41 f4       	brne	.+16     	; 0x1f42 <DIO_Init+0x12a4>
				{
					SET_BIT(DDRC_R,4);
    1f32:	a4 e3       	ldi	r26, 0x34	; 52
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e4 e3       	ldi	r30, 0x34	; 52
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	80 61       	ori	r24, 0x10	; 16
    1f3e:	8c 93       	st	X, r24
    1f40:	bb c4       	rjmp	.+2422   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	c9 01       	movw	r24, r18
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	82 0f       	add	r24, r18
    1f50:	93 1f       	adc	r25, r19
    1f52:	fc 01       	movw	r30, r24
    1f54:	e5 57       	subi	r30, 0x75	; 117
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	88 23       	and	r24, r24
    1f5c:	e9 f4       	brne	.+58     	; 0x1f98 <DIO_Init+0x12fa>
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	c9 01       	movw	r24, r18
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	82 0f       	add	r24, r18
    1f6c:	93 1f       	adc	r25, r19
    1f6e:	fc 01       	movw	r30, r24
    1f70:	e4 57       	subi	r30, 0x74	; 116
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 81       	ld	r24, Z
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	79 f4       	brne	.+30     	; 0x1f98 <DIO_Init+0x12fa>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRC_R,4);
    1f7a:	a4 e3       	ldi	r26, 0x34	; 52
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e4 e3       	ldi	r30, 0x34	; 52
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	8f 7e       	andi	r24, 0xEF	; 239
    1f86:	8c 93       	st	X, r24
					SET_BIT(PORTC_R,4);
    1f88:	a5 e3       	ldi	r26, 0x35	; 53
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e5 e3       	ldi	r30, 0x35	; 53
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	80 61       	ori	r24, 0x10	; 16
    1f94:	8c 93       	st	X, r24
    1f96:	90 c4       	rjmp	.+2336   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	c9 01       	movw	r24, r18
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	82 0f       	add	r24, r18
    1fa6:	93 1f       	adc	r25, r19
    1fa8:	fc 01       	movw	r30, r24
    1faa:	e5 57       	subi	r30, 0x75	; 117
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 81       	ld	r24, Z
    1fb0:	88 23       	and	r24, r24
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <DIO_Init+0x1318>
    1fb4:	81 c4       	rjmp	.+2306   	; 0x28b8 <DIO_Init+0x1c1a>
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	c9 01       	movw	r24, r18
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	82 0f       	add	r24, r18
    1fc4:	93 1f       	adc	r25, r19
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	e4 57       	subi	r30, 0x74	; 116
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	88 23       	and	r24, r24
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <DIO_Init+0x1336>
    1fd2:	72 c4       	rjmp	.+2276   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRC_R,4);
    1fd4:	a4 e3       	ldi	r26, 0x34	; 52
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e4 e3       	ldi	r30, 0x34	; 52
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	8f 7e       	andi	r24, 0xEF	; 239
    1fe0:	8c 93       	st	X, r24
    1fe2:	6a c4       	rjmp	.+2260   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PC5:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	c9 01       	movw	r24, r18
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	82 0f       	add	r24, r18
    1ff2:	93 1f       	adc	r25, r19
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	e5 57       	subi	r30, 0x75	; 117
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	81 30       	cpi	r24, 0x01	; 1
    1ffe:	41 f4       	brne	.+16     	; 0x2010 <DIO_Init+0x1372>
				{
					SET_BIT(DDRC_R,5);
    2000:	a4 e3       	ldi	r26, 0x34	; 52
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e4 e3       	ldi	r30, 0x34	; 52
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	80 62       	ori	r24, 0x20	; 32
    200c:	8c 93       	st	X, r24
    200e:	54 c4       	rjmp	.+2216   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	c9 01       	movw	r24, r18
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	82 0f       	add	r24, r18
    201e:	93 1f       	adc	r25, r19
    2020:	fc 01       	movw	r30, r24
    2022:	e5 57       	subi	r30, 0x75	; 117
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	88 23       	and	r24, r24
    202a:	e9 f4       	brne	.+58     	; 0x2066 <DIO_Init+0x13c8>
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	c9 01       	movw	r24, r18
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	82 0f       	add	r24, r18
    203a:	93 1f       	adc	r25, r19
    203c:	fc 01       	movw	r30, r24
    203e:	e4 57       	subi	r30, 0x74	; 116
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	79 f4       	brne	.+30     	; 0x2066 <DIO_Init+0x13c8>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRC_R,5);
    2048:	a4 e3       	ldi	r26, 0x34	; 52
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e4 e3       	ldi	r30, 0x34	; 52
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	8f 7d       	andi	r24, 0xDF	; 223
    2054:	8c 93       	st	X, r24
					SET_BIT(PORTC_R,5);
    2056:	a5 e3       	ldi	r26, 0x35	; 53
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e5 e3       	ldi	r30, 0x35	; 53
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	80 62       	ori	r24, 0x20	; 32
    2062:	8c 93       	st	X, r24
    2064:	29 c4       	rjmp	.+2130   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	c9 01       	movw	r24, r18
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	82 0f       	add	r24, r18
    2074:	93 1f       	adc	r25, r19
    2076:	fc 01       	movw	r30, r24
    2078:	e5 57       	subi	r30, 0x75	; 117
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	88 23       	and	r24, r24
    2080:	09 f0       	breq	.+2      	; 0x2084 <DIO_Init+0x13e6>
    2082:	1a c4       	rjmp	.+2100   	; 0x28b8 <DIO_Init+0x1c1a>
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	28 2f       	mov	r18, r24
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	c9 01       	movw	r24, r18
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	82 0f       	add	r24, r18
    2092:	93 1f       	adc	r25, r19
    2094:	fc 01       	movw	r30, r24
    2096:	e4 57       	subi	r30, 0x74	; 116
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 81       	ld	r24, Z
    209c:	88 23       	and	r24, r24
    209e:	09 f0       	breq	.+2      	; 0x20a2 <DIO_Init+0x1404>
    20a0:	0b c4       	rjmp	.+2070   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRC_R,5);
    20a2:	a4 e3       	ldi	r26, 0x34	; 52
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e4 e3       	ldi	r30, 0x34	; 52
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	8f 7d       	andi	r24, 0xDF	; 223
    20ae:	8c 93       	st	X, r24
    20b0:	03 c4       	rjmp	.+2054   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PC6:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	c9 01       	movw	r24, r18
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	82 0f       	add	r24, r18
    20c0:	93 1f       	adc	r25, r19
    20c2:	fc 01       	movw	r30, r24
    20c4:	e5 57       	subi	r30, 0x75	; 117
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
    20ca:	81 30       	cpi	r24, 0x01	; 1
    20cc:	41 f4       	brne	.+16     	; 0x20de <DIO_Init+0x1440>
				{
					SET_BIT(DDRC_R,6);
    20ce:	a4 e3       	ldi	r26, 0x34	; 52
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e4 e3       	ldi	r30, 0x34	; 52
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	80 64       	ori	r24, 0x40	; 64
    20da:	8c 93       	st	X, r24
    20dc:	ed c3       	rjmp	.+2010   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	c9 01       	movw	r24, r18
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	82 0f       	add	r24, r18
    20ec:	93 1f       	adc	r25, r19
    20ee:	fc 01       	movw	r30, r24
    20f0:	e5 57       	subi	r30, 0x75	; 117
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	88 23       	and	r24, r24
    20f8:	e9 f4       	brne	.+58     	; 0x2134 <DIO_Init+0x1496>
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	c9 01       	movw	r24, r18
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	82 0f       	add	r24, r18
    2108:	93 1f       	adc	r25, r19
    210a:	fc 01       	movw	r30, r24
    210c:	e4 57       	subi	r30, 0x74	; 116
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 81       	ld	r24, Z
    2112:	81 30       	cpi	r24, 0x01	; 1
    2114:	79 f4       	brne	.+30     	; 0x2134 <DIO_Init+0x1496>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRC_R,6);
    2116:	a4 e3       	ldi	r26, 0x34	; 52
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e4 e3       	ldi	r30, 0x34	; 52
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	8f 7b       	andi	r24, 0xBF	; 191
    2122:	8c 93       	st	X, r24
					SET_BIT(PORTC_R,6);
    2124:	a5 e3       	ldi	r26, 0x35	; 53
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e5 e3       	ldi	r30, 0x35	; 53
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	80 64       	ori	r24, 0x40	; 64
    2130:	8c 93       	st	X, r24
    2132:	c2 c3       	rjmp	.+1924   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	c9 01       	movw	r24, r18
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	82 0f       	add	r24, r18
    2142:	93 1f       	adc	r25, r19
    2144:	fc 01       	movw	r30, r24
    2146:	e5 57       	subi	r30, 0x75	; 117
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	88 23       	and	r24, r24
    214e:	09 f0       	breq	.+2      	; 0x2152 <DIO_Init+0x14b4>
    2150:	b3 c3       	rjmp	.+1894   	; 0x28b8 <DIO_Init+0x1c1a>
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	c9 01       	movw	r24, r18
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	82 0f       	add	r24, r18
    2160:	93 1f       	adc	r25, r19
    2162:	fc 01       	movw	r30, r24
    2164:	e4 57       	subi	r30, 0x74	; 116
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	88 23       	and	r24, r24
    216c:	09 f0       	breq	.+2      	; 0x2170 <DIO_Init+0x14d2>
    216e:	a4 c3       	rjmp	.+1864   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRC_R,6);
    2170:	a4 e3       	ldi	r26, 0x34	; 52
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e4 e3       	ldi	r30, 0x34	; 52
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8f 7b       	andi	r24, 0xBF	; 191
    217c:	8c 93       	st	X, r24
    217e:	9c c3       	rjmp	.+1848   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PC7:
			{
				if(astrDIOConfigParameters[i].enuPinDir==INPUT)
    2180:	89 81       	ldd	r24, Y+1	; 0x01
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	c9 01       	movw	r24, r18
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	82 0f       	add	r24, r18
    218e:	93 1f       	adc	r25, r19
    2190:	fc 01       	movw	r30, r24
    2192:	e5 57       	subi	r30, 0x75	; 117
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	88 23       	and	r24, r24
    219a:	41 f4       	brne	.+16     	; 0x21ac <DIO_Init+0x150e>
				{
					SET_BIT(DDRC_R,7);
    219c:	a4 e3       	ldi	r26, 0x34	; 52
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e4 e3       	ldi	r30, 0x34	; 52
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	80 68       	ori	r24, 0x80	; 128
    21a8:	8c 93       	st	X, r24
    21aa:	86 c3       	rjmp	.+1804   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	c9 01       	movw	r24, r18
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	82 0f       	add	r24, r18
    21ba:	93 1f       	adc	r25, r19
    21bc:	fc 01       	movw	r30, r24
    21be:	e5 57       	subi	r30, 0x75	; 117
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	88 23       	and	r24, r24
    21c6:	e9 f4       	brne	.+58     	; 0x2202 <DIO_Init+0x1564>
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	c9 01       	movw	r24, r18
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	82 0f       	add	r24, r18
    21d6:	93 1f       	adc	r25, r19
    21d8:	fc 01       	movw	r30, r24
    21da:	e4 57       	subi	r30, 0x74	; 116
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	81 30       	cpi	r24, 0x01	; 1
    21e2:	79 f4       	brne	.+30     	; 0x2202 <DIO_Init+0x1564>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRC_R,7);
    21e4:	a4 e3       	ldi	r26, 0x34	; 52
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e4 e3       	ldi	r30, 0x34	; 52
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	8f 77       	andi	r24, 0x7F	; 127
    21f0:	8c 93       	st	X, r24
					SET_BIT(PORTC_R,7);
    21f2:	a5 e3       	ldi	r26, 0x35	; 53
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e5 e3       	ldi	r30, 0x35	; 53
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	80 68       	ori	r24, 0x80	; 128
    21fe:	8c 93       	st	X, r24
    2200:	5b c3       	rjmp	.+1718   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	c9 01       	movw	r24, r18
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	82 0f       	add	r24, r18
    2210:	93 1f       	adc	r25, r19
    2212:	fc 01       	movw	r30, r24
    2214:	e5 57       	subi	r30, 0x75	; 117
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	80 81       	ld	r24, Z
    221a:	88 23       	and	r24, r24
    221c:	09 f0       	breq	.+2      	; 0x2220 <DIO_Init+0x1582>
    221e:	4c c3       	rjmp	.+1688   	; 0x28b8 <DIO_Init+0x1c1a>
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	c9 01       	movw	r24, r18
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	82 0f       	add	r24, r18
    222e:	93 1f       	adc	r25, r19
    2230:	fc 01       	movw	r30, r24
    2232:	e4 57       	subi	r30, 0x74	; 116
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	88 23       	and	r24, r24
    223a:	09 f0       	breq	.+2      	; 0x223e <DIO_Init+0x15a0>
    223c:	3d c3       	rjmp	.+1658   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRC_R,7);
    223e:	a4 e3       	ldi	r26, 0x34	; 52
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e4 e3       	ldi	r30, 0x34	; 52
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	8f 77       	andi	r24, 0x7F	; 127
    224a:	8c 93       	st	X, r24
    224c:	35 c3       	rjmp	.+1642   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PD0:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	c9 01       	movw	r24, r18
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	82 0f       	add	r24, r18
    225c:	93 1f       	adc	r25, r19
    225e:	fc 01       	movw	r30, r24
    2260:	e5 57       	subi	r30, 0x75	; 117
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	41 f4       	brne	.+16     	; 0x227a <DIO_Init+0x15dc>
				{
					SET_BIT(DDRD_R,0);
    226a:	a1 e3       	ldi	r26, 0x31	; 49
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e1 e3       	ldi	r30, 0x31	; 49
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	81 60       	ori	r24, 0x01	; 1
    2276:	8c 93       	st	X, r24
    2278:	1f c3       	rjmp	.+1598   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	c9 01       	movw	r24, r18
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	82 0f       	add	r24, r18
    2288:	93 1f       	adc	r25, r19
    228a:	fc 01       	movw	r30, r24
    228c:	e5 57       	subi	r30, 0x75	; 117
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 81       	ld	r24, Z
    2292:	88 23       	and	r24, r24
    2294:	e9 f4       	brne	.+58     	; 0x22d0 <DIO_Init+0x1632>
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	c9 01       	movw	r24, r18
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	82 0f       	add	r24, r18
    22a4:	93 1f       	adc	r25, r19
    22a6:	fc 01       	movw	r30, r24
    22a8:	e4 57       	subi	r30, 0x74	; 116
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	80 81       	ld	r24, Z
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	79 f4       	brne	.+30     	; 0x22d0 <DIO_Init+0x1632>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRD_R,0);
    22b2:	a1 e3       	ldi	r26, 0x31	; 49
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e1 e3       	ldi	r30, 0x31	; 49
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	8e 7f       	andi	r24, 0xFE	; 254
    22be:	8c 93       	st	X, r24
					SET_BIT(PORTD_R,0);
    22c0:	a2 e3       	ldi	r26, 0x32	; 50
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e2 e3       	ldi	r30, 0x32	; 50
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	81 60       	ori	r24, 0x01	; 1
    22cc:	8c 93       	st	X, r24
    22ce:	f4 c2       	rjmp	.+1512   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	c9 01       	movw	r24, r18
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	82 0f       	add	r24, r18
    22de:	93 1f       	adc	r25, r19
    22e0:	fc 01       	movw	r30, r24
    22e2:	e5 57       	subi	r30, 0x75	; 117
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	88 23       	and	r24, r24
    22ea:	09 f0       	breq	.+2      	; 0x22ee <DIO_Init+0x1650>
    22ec:	e5 c2       	rjmp	.+1482   	; 0x28b8 <DIO_Init+0x1c1a>
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	c9 01       	movw	r24, r18
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	82 0f       	add	r24, r18
    22fc:	93 1f       	adc	r25, r19
    22fe:	fc 01       	movw	r30, r24
    2300:	e4 57       	subi	r30, 0x74	; 116
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	80 81       	ld	r24, Z
    2306:	88 23       	and	r24, r24
    2308:	09 f0       	breq	.+2      	; 0x230c <DIO_Init+0x166e>
    230a:	d6 c2       	rjmp	.+1452   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRD_R,0);
    230c:	a1 e3       	ldi	r26, 0x31	; 49
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e1 e3       	ldi	r30, 0x31	; 49
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	8e 7f       	andi	r24, 0xFE	; 254
    2318:	8c 93       	st	X, r24
    231a:	ce c2       	rjmp	.+1436   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PD1:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	c9 01       	movw	r24, r18
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	82 0f       	add	r24, r18
    232a:	93 1f       	adc	r25, r19
    232c:	fc 01       	movw	r30, r24
    232e:	e5 57       	subi	r30, 0x75	; 117
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	80 81       	ld	r24, Z
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	41 f4       	brne	.+16     	; 0x2348 <DIO_Init+0x16aa>
				{
					SET_BIT(DDRD_R,1);
    2338:	a1 e3       	ldi	r26, 0x31	; 49
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e1 e3       	ldi	r30, 0x31	; 49
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	82 60       	ori	r24, 0x02	; 2
    2344:	8c 93       	st	X, r24
    2346:	b8 c2       	rjmp	.+1392   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	c9 01       	movw	r24, r18
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	82 0f       	add	r24, r18
    2356:	93 1f       	adc	r25, r19
    2358:	fc 01       	movw	r30, r24
    235a:	e5 57       	subi	r30, 0x75	; 117
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	80 81       	ld	r24, Z
    2360:	88 23       	and	r24, r24
    2362:	e9 f4       	brne	.+58     	; 0x239e <DIO_Init+0x1700>
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	c9 01       	movw	r24, r18
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	82 0f       	add	r24, r18
    2372:	93 1f       	adc	r25, r19
    2374:	fc 01       	movw	r30, r24
    2376:	e4 57       	subi	r30, 0x74	; 116
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 81       	ld	r24, Z
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	79 f4       	brne	.+30     	; 0x239e <DIO_Init+0x1700>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRD_R,1);
    2380:	a1 e3       	ldi	r26, 0x31	; 49
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e1 e3       	ldi	r30, 0x31	; 49
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8d 7f       	andi	r24, 0xFD	; 253
    238c:	8c 93       	st	X, r24
					SET_BIT(PORTD_R,1);
    238e:	a2 e3       	ldi	r26, 0x32	; 50
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e2 e3       	ldi	r30, 0x32	; 50
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	82 60       	ori	r24, 0x02	; 2
    239a:	8c 93       	st	X, r24
    239c:	8d c2       	rjmp	.+1306   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	c9 01       	movw	r24, r18
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	82 0f       	add	r24, r18
    23ac:	93 1f       	adc	r25, r19
    23ae:	fc 01       	movw	r30, r24
    23b0:	e5 57       	subi	r30, 0x75	; 117
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	88 23       	and	r24, r24
    23b8:	09 f0       	breq	.+2      	; 0x23bc <DIO_Init+0x171e>
    23ba:	7e c2       	rjmp	.+1276   	; 0x28b8 <DIO_Init+0x1c1a>
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	c9 01       	movw	r24, r18
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	82 0f       	add	r24, r18
    23ca:	93 1f       	adc	r25, r19
    23cc:	fc 01       	movw	r30, r24
    23ce:	e4 57       	subi	r30, 0x74	; 116
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 81       	ld	r24, Z
    23d4:	88 23       	and	r24, r24
    23d6:	09 f0       	breq	.+2      	; 0x23da <DIO_Init+0x173c>
    23d8:	6f c2       	rjmp	.+1246   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRD_R,1);
    23da:	a1 e3       	ldi	r26, 0x31	; 49
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e1 e3       	ldi	r30, 0x31	; 49
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	8d 7f       	andi	r24, 0xFD	; 253
    23e6:	8c 93       	st	X, r24
    23e8:	67 c2       	rjmp	.+1230   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PD2:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	28 2f       	mov	r18, r24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	c9 01       	movw	r24, r18
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	82 0f       	add	r24, r18
    23f8:	93 1f       	adc	r25, r19
    23fa:	fc 01       	movw	r30, r24
    23fc:	e5 57       	subi	r30, 0x75	; 117
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 81       	ld	r24, Z
    2402:	81 30       	cpi	r24, 0x01	; 1
    2404:	41 f4       	brne	.+16     	; 0x2416 <DIO_Init+0x1778>
				{
					SET_BIT(DDRD_R,2);
    2406:	a1 e3       	ldi	r26, 0x31	; 49
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e1 e3       	ldi	r30, 0x31	; 49
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	84 60       	ori	r24, 0x04	; 4
    2412:	8c 93       	st	X, r24
    2414:	51 c2       	rjmp	.+1186   	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	c9 01       	movw	r24, r18
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	82 0f       	add	r24, r18
    2424:	93 1f       	adc	r25, r19
    2426:	fc 01       	movw	r30, r24
    2428:	e5 57       	subi	r30, 0x75	; 117
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 81       	ld	r24, Z
    242e:	88 23       	and	r24, r24
    2430:	e9 f4       	brne	.+58     	; 0x246c <DIO_Init+0x17ce>
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	28 2f       	mov	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	c9 01       	movw	r24, r18
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	82 0f       	add	r24, r18
    2440:	93 1f       	adc	r25, r19
    2442:	fc 01       	movw	r30, r24
    2444:	e4 57       	subi	r30, 0x74	; 116
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	80 81       	ld	r24, Z
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	79 f4       	brne	.+30     	; 0x246c <DIO_Init+0x17ce>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRD_R,2);
    244e:	a1 e3       	ldi	r26, 0x31	; 49
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e1 e3       	ldi	r30, 0x31	; 49
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	8b 7f       	andi	r24, 0xFB	; 251
    245a:	8c 93       	st	X, r24
					SET_BIT(PORTD_R,2);
    245c:	a2 e3       	ldi	r26, 0x32	; 50
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e2 e3       	ldi	r30, 0x32	; 50
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	84 60       	ori	r24, 0x04	; 4
    2468:	8c 93       	st	X, r24
    246a:	26 c2       	rjmp	.+1100   	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	c9 01       	movw	r24, r18
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	82 0f       	add	r24, r18
    247a:	93 1f       	adc	r25, r19
    247c:	fc 01       	movw	r30, r24
    247e:	e5 57       	subi	r30, 0x75	; 117
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	88 23       	and	r24, r24
    2486:	09 f0       	breq	.+2      	; 0x248a <DIO_Init+0x17ec>
    2488:	17 c2       	rjmp	.+1070   	; 0x28b8 <DIO_Init+0x1c1a>
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	c9 01       	movw	r24, r18
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	82 0f       	add	r24, r18
    2498:	93 1f       	adc	r25, r19
    249a:	fc 01       	movw	r30, r24
    249c:	e4 57       	subi	r30, 0x74	; 116
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	88 23       	and	r24, r24
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <DIO_Init+0x180a>
    24a6:	08 c2       	rjmp	.+1040   	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRD_R,2);
    24a8:	a1 e3       	ldi	r26, 0x31	; 49
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e1 e3       	ldi	r30, 0x31	; 49
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	8b 7f       	andi	r24, 0xFB	; 251
    24b4:	8c 93       	st	X, r24
    24b6:	00 c2       	rjmp	.+1024   	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PD3:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	c9 01       	movw	r24, r18
    24c0:	88 0f       	add	r24, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	82 0f       	add	r24, r18
    24c6:	93 1f       	adc	r25, r19
    24c8:	fc 01       	movw	r30, r24
    24ca:	e5 57       	subi	r30, 0x75	; 117
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 81       	ld	r24, Z
    24d0:	81 30       	cpi	r24, 0x01	; 1
    24d2:	41 f4       	brne	.+16     	; 0x24e4 <DIO_Init+0x1846>
				{
					SET_BIT(DDRD_R,3);
    24d4:	a1 e3       	ldi	r26, 0x31	; 49
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e1 e3       	ldi	r30, 0x31	; 49
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	88 60       	ori	r24, 0x08	; 8
    24e0:	8c 93       	st	X, r24
    24e2:	ea c1       	rjmp	.+980    	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	c9 01       	movw	r24, r18
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	82 0f       	add	r24, r18
    24f2:	93 1f       	adc	r25, r19
    24f4:	fc 01       	movw	r30, r24
    24f6:	e5 57       	subi	r30, 0x75	; 117
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	88 23       	and	r24, r24
    24fe:	e9 f4       	brne	.+58     	; 0x253a <DIO_Init+0x189c>
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	c9 01       	movw	r24, r18
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	82 0f       	add	r24, r18
    250e:	93 1f       	adc	r25, r19
    2510:	fc 01       	movw	r30, r24
    2512:	e4 57       	subi	r30, 0x74	; 116
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 81       	ld	r24, Z
    2518:	81 30       	cpi	r24, 0x01	; 1
    251a:	79 f4       	brne	.+30     	; 0x253a <DIO_Init+0x189c>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRD_R,3);
    251c:	a1 e3       	ldi	r26, 0x31	; 49
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	e1 e3       	ldi	r30, 0x31	; 49
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	87 7f       	andi	r24, 0xF7	; 247
    2528:	8c 93       	st	X, r24
					SET_BIT(PORTD_R,3);
    252a:	a2 e3       	ldi	r26, 0x32	; 50
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	e2 e3       	ldi	r30, 0x32	; 50
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	88 60       	ori	r24, 0x08	; 8
    2536:	8c 93       	st	X, r24
    2538:	bf c1       	rjmp	.+894    	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	28 2f       	mov	r18, r24
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	c9 01       	movw	r24, r18
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	82 0f       	add	r24, r18
    2548:	93 1f       	adc	r25, r19
    254a:	fc 01       	movw	r30, r24
    254c:	e5 57       	subi	r30, 0x75	; 117
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 81       	ld	r24, Z
    2552:	88 23       	and	r24, r24
    2554:	09 f0       	breq	.+2      	; 0x2558 <DIO_Init+0x18ba>
    2556:	b0 c1       	rjmp	.+864    	; 0x28b8 <DIO_Init+0x1c1a>
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	c9 01       	movw	r24, r18
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	82 0f       	add	r24, r18
    2566:	93 1f       	adc	r25, r19
    2568:	fc 01       	movw	r30, r24
    256a:	e4 57       	subi	r30, 0x74	; 116
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	88 23       	and	r24, r24
    2572:	09 f0       	breq	.+2      	; 0x2576 <DIO_Init+0x18d8>
    2574:	a1 c1       	rjmp	.+834    	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRD_R,3);
    2576:	a1 e3       	ldi	r26, 0x31	; 49
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e1 e3       	ldi	r30, 0x31	; 49
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	87 7f       	andi	r24, 0xF7	; 247
    2582:	8c 93       	st	X, r24
    2584:	99 c1       	rjmp	.+818    	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PD4:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	c9 01       	movw	r24, r18
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	82 0f       	add	r24, r18
    2594:	93 1f       	adc	r25, r19
    2596:	fc 01       	movw	r30, r24
    2598:	e5 57       	subi	r30, 0x75	; 117
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	81 30       	cpi	r24, 0x01	; 1
    25a0:	41 f4       	brne	.+16     	; 0x25b2 <DIO_Init+0x1914>
				{
					SET_BIT(DDRD_R,4);
    25a2:	a1 e3       	ldi	r26, 0x31	; 49
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e1 e3       	ldi	r30, 0x31	; 49
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	80 61       	ori	r24, 0x10	; 16
    25ae:	8c 93       	st	X, r24
    25b0:	83 c1       	rjmp	.+774    	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	c9 01       	movw	r24, r18
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	82 0f       	add	r24, r18
    25c0:	93 1f       	adc	r25, r19
    25c2:	fc 01       	movw	r30, r24
    25c4:	e5 57       	subi	r30, 0x75	; 117
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	88 23       	and	r24, r24
    25cc:	e9 f4       	brne	.+58     	; 0x2608 <DIO_Init+0x196a>
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	c9 01       	movw	r24, r18
    25d6:	88 0f       	add	r24, r24
    25d8:	99 1f       	adc	r25, r25
    25da:	82 0f       	add	r24, r18
    25dc:	93 1f       	adc	r25, r19
    25de:	fc 01       	movw	r30, r24
    25e0:	e4 57       	subi	r30, 0x74	; 116
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	81 30       	cpi	r24, 0x01	; 1
    25e8:	79 f4       	brne	.+30     	; 0x2608 <DIO_Init+0x196a>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRD_R,4);
    25ea:	a1 e3       	ldi	r26, 0x31	; 49
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e1 e3       	ldi	r30, 0x31	; 49
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	8f 7e       	andi	r24, 0xEF	; 239
    25f6:	8c 93       	st	X, r24
					SET_BIT(PORTD_R,4);
    25f8:	a2 e3       	ldi	r26, 0x32	; 50
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e2 e3       	ldi	r30, 0x32	; 50
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	80 61       	ori	r24, 0x10	; 16
    2604:	8c 93       	st	X, r24
    2606:	58 c1       	rjmp	.+688    	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	c9 01       	movw	r24, r18
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	82 0f       	add	r24, r18
    2616:	93 1f       	adc	r25, r19
    2618:	fc 01       	movw	r30, r24
    261a:	e5 57       	subi	r30, 0x75	; 117
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	80 81       	ld	r24, Z
    2620:	88 23       	and	r24, r24
    2622:	09 f0       	breq	.+2      	; 0x2626 <DIO_Init+0x1988>
    2624:	49 c1       	rjmp	.+658    	; 0x28b8 <DIO_Init+0x1c1a>
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	c9 01       	movw	r24, r18
    262e:	88 0f       	add	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	82 0f       	add	r24, r18
    2634:	93 1f       	adc	r25, r19
    2636:	fc 01       	movw	r30, r24
    2638:	e4 57       	subi	r30, 0x74	; 116
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 81       	ld	r24, Z
    263e:	88 23       	and	r24, r24
    2640:	09 f0       	breq	.+2      	; 0x2644 <DIO_Init+0x19a6>
    2642:	3a c1       	rjmp	.+628    	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRD_R,4);
    2644:	a1 e3       	ldi	r26, 0x31	; 49
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	e1 e3       	ldi	r30, 0x31	; 49
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	8f 7e       	andi	r24, 0xEF	; 239
    2650:	8c 93       	st	X, r24
    2652:	32 c1       	rjmp	.+612    	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PD5:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	c9 01       	movw	r24, r18
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	82 0f       	add	r24, r18
    2662:	93 1f       	adc	r25, r19
    2664:	fc 01       	movw	r30, r24
    2666:	e5 57       	subi	r30, 0x75	; 117
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	81 30       	cpi	r24, 0x01	; 1
    266e:	41 f4       	brne	.+16     	; 0x2680 <DIO_Init+0x19e2>
				{
					SET_BIT(DDRD_R,5);
    2670:	a1 e3       	ldi	r26, 0x31	; 49
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e1 e3       	ldi	r30, 0x31	; 49
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	80 62       	ori	r24, 0x20	; 32
    267c:	8c 93       	st	X, r24
    267e:	1c c1       	rjmp	.+568    	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	c9 01       	movw	r24, r18
    2688:	88 0f       	add	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	82 0f       	add	r24, r18
    268e:	93 1f       	adc	r25, r19
    2690:	fc 01       	movw	r30, r24
    2692:	e5 57       	subi	r30, 0x75	; 117
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 81       	ld	r24, Z
    2698:	88 23       	and	r24, r24
    269a:	e9 f4       	brne	.+58     	; 0x26d6 <DIO_Init+0x1a38>
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	c9 01       	movw	r24, r18
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	82 0f       	add	r24, r18
    26aa:	93 1f       	adc	r25, r19
    26ac:	fc 01       	movw	r30, r24
    26ae:	e4 57       	subi	r30, 0x74	; 116
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	81 30       	cpi	r24, 0x01	; 1
    26b6:	79 f4       	brne	.+30     	; 0x26d6 <DIO_Init+0x1a38>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRD_R,5);
    26b8:	a1 e3       	ldi	r26, 0x31	; 49
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e1 e3       	ldi	r30, 0x31	; 49
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	8f 7d       	andi	r24, 0xDF	; 223
    26c4:	8c 93       	st	X, r24
					SET_BIT(PORTD_R,5);
    26c6:	a2 e3       	ldi	r26, 0x32	; 50
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e2 e3       	ldi	r30, 0x32	; 50
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	80 62       	ori	r24, 0x20	; 32
    26d2:	8c 93       	st	X, r24
    26d4:	f1 c0       	rjmp	.+482    	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	c9 01       	movw	r24, r18
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	82 0f       	add	r24, r18
    26e4:	93 1f       	adc	r25, r19
    26e6:	fc 01       	movw	r30, r24
    26e8:	e5 57       	subi	r30, 0x75	; 117
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	88 23       	and	r24, r24
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <DIO_Init+0x1a56>
    26f2:	e2 c0       	rjmp	.+452    	; 0x28b8 <DIO_Init+0x1c1a>
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	c9 01       	movw	r24, r18
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	82 0f       	add	r24, r18
    2702:	93 1f       	adc	r25, r19
    2704:	fc 01       	movw	r30, r24
    2706:	e4 57       	subi	r30, 0x74	; 116
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 81       	ld	r24, Z
    270c:	88 23       	and	r24, r24
    270e:	09 f0       	breq	.+2      	; 0x2712 <DIO_Init+0x1a74>
    2710:	d3 c0       	rjmp	.+422    	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRD_R,5);
    2712:	a1 e3       	ldi	r26, 0x31	; 49
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e1 e3       	ldi	r30, 0x31	; 49
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	8f 7d       	andi	r24, 0xDF	; 223
    271e:	8c 93       	st	X, r24
    2720:	cb c0       	rjmp	.+406    	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PD6:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	c9 01       	movw	r24, r18
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	82 0f       	add	r24, r18
    2730:	93 1f       	adc	r25, r19
    2732:	fc 01       	movw	r30, r24
    2734:	e5 57       	subi	r30, 0x75	; 117
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	81 30       	cpi	r24, 0x01	; 1
    273c:	41 f4       	brne	.+16     	; 0x274e <DIO_Init+0x1ab0>
				{
					SET_BIT(DDRD_R,6);
    273e:	a1 e3       	ldi	r26, 0x31	; 49
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e1 e3       	ldi	r30, 0x31	; 49
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	80 64       	ori	r24, 0x40	; 64
    274a:	8c 93       	st	X, r24
    274c:	b5 c0       	rjmp	.+362    	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	c9 01       	movw	r24, r18
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	82 0f       	add	r24, r18
    275c:	93 1f       	adc	r25, r19
    275e:	fc 01       	movw	r30, r24
    2760:	e5 57       	subi	r30, 0x75	; 117
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 81       	ld	r24, Z
    2766:	88 23       	and	r24, r24
    2768:	e9 f4       	brne	.+58     	; 0x27a4 <DIO_Init+0x1b06>
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	c9 01       	movw	r24, r18
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	82 0f       	add	r24, r18
    2778:	93 1f       	adc	r25, r19
    277a:	fc 01       	movw	r30, r24
    277c:	e4 57       	subi	r30, 0x74	; 116
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 81       	ld	r24, Z
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	79 f4       	brne	.+30     	; 0x27a4 <DIO_Init+0x1b06>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRD_R,6);
    2786:	a1 e3       	ldi	r26, 0x31	; 49
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e1 e3       	ldi	r30, 0x31	; 49
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	8f 7b       	andi	r24, 0xBF	; 191
    2792:	8c 93       	st	X, r24
					SET_BIT(PORTD_R,6);
    2794:	a2 e3       	ldi	r26, 0x32	; 50
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e2 e3       	ldi	r30, 0x32	; 50
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	80 64       	ori	r24, 0x40	; 64
    27a0:	8c 93       	st	X, r24
    27a2:	8a c0       	rjmp	.+276    	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	c9 01       	movw	r24, r18
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	82 0f       	add	r24, r18
    27b2:	93 1f       	adc	r25, r19
    27b4:	fc 01       	movw	r30, r24
    27b6:	e5 57       	subi	r30, 0x75	; 117
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 81       	ld	r24, Z
    27bc:	88 23       	and	r24, r24
    27be:	09 f0       	breq	.+2      	; 0x27c2 <DIO_Init+0x1b24>
    27c0:	7b c0       	rjmp	.+246    	; 0x28b8 <DIO_Init+0x1c1a>
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	c9 01       	movw	r24, r18
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	82 0f       	add	r24, r18
    27d0:	93 1f       	adc	r25, r19
    27d2:	fc 01       	movw	r30, r24
    27d4:	e4 57       	subi	r30, 0x74	; 116
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	88 23       	and	r24, r24
    27dc:	09 f0       	breq	.+2      	; 0x27e0 <DIO_Init+0x1b42>
    27de:	6c c0       	rjmp	.+216    	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRD_R,6);
    27e0:	a1 e3       	ldi	r26, 0x31	; 49
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e1 e3       	ldi	r30, 0x31	; 49
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	8f 7b       	andi	r24, 0xBF	; 191
    27ec:	8c 93       	st	X, r24
    27ee:	64 c0       	rjmp	.+200    	; 0x28b8 <DIO_Init+0x1c1a>
			}
				break;
			}
			case PD7:
			{
				if(astrDIOConfigParameters[i].enuPinDir==OUTPUT)
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	28 2f       	mov	r18, r24
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	c9 01       	movw	r24, r18
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	82 0f       	add	r24, r18
    27fe:	93 1f       	adc	r25, r19
    2800:	fc 01       	movw	r30, r24
    2802:	e5 57       	subi	r30, 0x75	; 117
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	80 81       	ld	r24, Z
    2808:	81 30       	cpi	r24, 0x01	; 1
    280a:	41 f4       	brne	.+16     	; 0x281c <DIO_Init+0x1b7e>
				{
					SET_BIT(DDRD_R,7);
    280c:	a1 e3       	ldi	r26, 0x31	; 49
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	e1 e3       	ldi	r30, 0x31	; 49
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	80 68       	ori	r24, 0x80	; 128
    2818:	8c 93       	st	X, r24
    281a:	4e c0       	rjmp	.+156    	; 0x28b8 <DIO_Init+0x1c1a>
				}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	c9 01       	movw	r24, r18
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	82 0f       	add	r24, r18
    282a:	93 1f       	adc	r25, r19
    282c:	fc 01       	movw	r30, r24
    282e:	e5 57       	subi	r30, 0x75	; 117
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 81       	ld	r24, Z
    2834:	88 23       	and	r24, r24
    2836:	e9 f4       	brne	.+58     	; 0x2872 <DIO_Init+0x1bd4>
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	28 2f       	mov	r18, r24
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	c9 01       	movw	r24, r18
    2840:	88 0f       	add	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	82 0f       	add	r24, r18
    2846:	93 1f       	adc	r25, r19
    2848:	fc 01       	movw	r30, r24
    284a:	e4 57       	subi	r30, 0x74	; 116
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	81 30       	cpi	r24, 0x01	; 1
    2852:	79 f4       	brne	.+30     	; 0x2872 <DIO_Init+0x1bd4>
				(astrDIOConfigParameters[i].enuPullupResEn==PULL_UP_ENABLE))
				{
					CLR_BIT(DDRD_R,7);
    2854:	a1 e3       	ldi	r26, 0x31	; 49
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e1 e3       	ldi	r30, 0x31	; 49
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	8f 77       	andi	r24, 0x7F	; 127
    2860:	8c 93       	st	X, r24
					SET_BIT(PORTD_R,7);
    2862:	a2 e3       	ldi	r26, 0x32	; 50
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e2 e3       	ldi	r30, 0x32	; 50
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	80 68       	ori	r24, 0x80	; 128
    286e:	8c 93       	st	X, r24
    2870:	23 c0       	rjmp	.+70     	; 0x28b8 <DIO_Init+0x1c1a>
			}else if((astrDIOConfigParameters[i].enuPinDir==INPUT)&&
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	28 2f       	mov	r18, r24
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	c9 01       	movw	r24, r18
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	82 0f       	add	r24, r18
    2880:	93 1f       	adc	r25, r19
    2882:	fc 01       	movw	r30, r24
    2884:	e5 57       	subi	r30, 0x75	; 117
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	88 23       	and	r24, r24
    288c:	a9 f4       	brne	.+42     	; 0x28b8 <DIO_Init+0x1c1a>
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	28 2f       	mov	r18, r24
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	c9 01       	movw	r24, r18
    2896:	88 0f       	add	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	82 0f       	add	r24, r18
    289c:	93 1f       	adc	r25, r19
    289e:	fc 01       	movw	r30, r24
    28a0:	e4 57       	subi	r30, 0x74	; 116
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	88 23       	and	r24, r24
    28a8:	39 f4       	brne	.+14     	; 0x28b8 <DIO_Init+0x1c1a>
			(astrDIOConfigParameters[i].enuPullupResEn==NO_CONNECTION))
			{
				CLR_BIT(DDRD_R,7);
    28aa:	a1 e3       	ldi	r26, 0x31	; 49
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e1 e3       	ldi	r30, 0x31	; 49
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	8f 77       	andi	r24, 0x7F	; 127
    28b6:	8c 93       	st	X, r24


enuErrorStatus_t DIO_Init(void)
{
	uint8_t i;
	for(i=0;i<DIO_GROUPS_NO;i++)
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	8f 5f       	subi	r24, 0xFF	; 255
    28bc:	89 83       	std	Y+1, r24	; 0x01
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	87 30       	cpi	r24, 0x07	; 7
    28c2:	10 f4       	brcc	.+4      	; 0x28c8 <DIO_Init+0x1c2a>
    28c4:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <DIO_Init+0x12>
			}
				break;
			}
		}
	}
	return E_OK;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <DIO_Write>:

enuErrorStatus_t DIO_Write(uint8_t u8GroupId, uint8_t u8Data)
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	00 d0       	rcall	.+0      	; 0x28dc <DIO_Write+0x6>
    28dc:	00 d0       	rcall	.+0      	; 0x28de <DIO_Write+0x8>
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	6a 83       	std	Y+2, r22	; 0x02
		switch(astrDIOConfigParameters[u8GroupId].enuPinNo)
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	c9 01       	movw	r24, r18
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	82 0f       	add	r24, r18
    28f4:	93 1f       	adc	r25, r19
    28f6:	fc 01       	movw	r30, r24
    28f8:	e6 57       	subi	r30, 0x76	; 118
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 81       	ld	r24, Z
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	3c 83       	std	Y+4, r19	; 0x04
    2904:	2b 83       	std	Y+3, r18	; 0x03
    2906:	8b 81       	ldd	r24, Y+3	; 0x03
    2908:	9c 81       	ldd	r25, Y+4	; 0x04
    290a:	8f 30       	cpi	r24, 0x0F	; 15
    290c:	91 05       	cpc	r25, r1
    290e:	09 f4       	brne	.+2      	; 0x2912 <DIO_Write+0x3c>
    2910:	de c1       	rjmp	.+956    	; 0x2cce <DIO_Write+0x3f8>
    2912:	2b 81       	ldd	r18, Y+3	; 0x03
    2914:	3c 81       	ldd	r19, Y+4	; 0x04
    2916:	20 31       	cpi	r18, 0x10	; 16
    2918:	31 05       	cpc	r19, r1
    291a:	0c f0       	brlt	.+2      	; 0x291e <DIO_Write+0x48>
    291c:	5a c0       	rjmp	.+180    	; 0x29d2 <DIO_Write+0xfc>
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	9c 81       	ldd	r25, Y+4	; 0x04
    2922:	87 30       	cpi	r24, 0x07	; 7
    2924:	91 05       	cpc	r25, r1
    2926:	09 f4       	brne	.+2      	; 0x292a <DIO_Write+0x54>
    2928:	3a c1       	rjmp	.+628    	; 0x2b9e <DIO_Write+0x2c8>
    292a:	2b 81       	ldd	r18, Y+3	; 0x03
    292c:	3c 81       	ldd	r19, Y+4	; 0x04
    292e:	28 30       	cpi	r18, 0x08	; 8
    2930:	31 05       	cpc	r19, r1
    2932:	54 f5       	brge	.+84     	; 0x2988 <DIO_Write+0xb2>
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	9c 81       	ldd	r25, Y+4	; 0x04
    2938:	83 30       	cpi	r24, 0x03	; 3
    293a:	91 05       	cpc	r25, r1
    293c:	09 f4       	brne	.+2      	; 0x2940 <DIO_Write+0x6a>
    293e:	e3 c0       	rjmp	.+454    	; 0x2b06 <DIO_Write+0x230>
    2940:	2b 81       	ldd	r18, Y+3	; 0x03
    2942:	3c 81       	ldd	r19, Y+4	; 0x04
    2944:	24 30       	cpi	r18, 0x04	; 4
    2946:	31 05       	cpc	r19, r1
    2948:	94 f4       	brge	.+36     	; 0x296e <DIO_Write+0x98>
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	9c 81       	ldd	r25, Y+4	; 0x04
    294e:	81 30       	cpi	r24, 0x01	; 1
    2950:	91 05       	cpc	r25, r1
    2952:	09 f4       	brne	.+2      	; 0x2956 <DIO_Write+0x80>
    2954:	b2 c0       	rjmp	.+356    	; 0x2aba <DIO_Write+0x1e4>
    2956:	2b 81       	ldd	r18, Y+3	; 0x03
    2958:	3c 81       	ldd	r19, Y+4	; 0x04
    295a:	22 30       	cpi	r18, 0x02	; 2
    295c:	31 05       	cpc	r19, r1
    295e:	0c f0       	brlt	.+2      	; 0x2962 <DIO_Write+0x8c>
    2960:	bf c0       	rjmp	.+382    	; 0x2ae0 <DIO_Write+0x20a>
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	9c 81       	ldd	r25, Y+4	; 0x04
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	09 f4       	brne	.+2      	; 0x296c <DIO_Write+0x96>
    296a:	94 c0       	rjmp	.+296    	; 0x2a94 <DIO_Write+0x1be>
    296c:	f2 c2       	rjmp	.+1508   	; 0x2f52 <DIO_Write+0x67c>
    296e:	2b 81       	ldd	r18, Y+3	; 0x03
    2970:	3c 81       	ldd	r19, Y+4	; 0x04
    2972:	25 30       	cpi	r18, 0x05	; 5
    2974:	31 05       	cpc	r19, r1
    2976:	09 f4       	brne	.+2      	; 0x297a <DIO_Write+0xa4>
    2978:	ec c0       	rjmp	.+472    	; 0x2b52 <DIO_Write+0x27c>
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	9c 81       	ldd	r25, Y+4	; 0x04
    297e:	86 30       	cpi	r24, 0x06	; 6
    2980:	91 05       	cpc	r25, r1
    2982:	0c f0       	brlt	.+2      	; 0x2986 <DIO_Write+0xb0>
    2984:	f9 c0       	rjmp	.+498    	; 0x2b78 <DIO_Write+0x2a2>
    2986:	d2 c0       	rjmp	.+420    	; 0x2b2c <DIO_Write+0x256>
    2988:	2b 81       	ldd	r18, Y+3	; 0x03
    298a:	3c 81       	ldd	r19, Y+4	; 0x04
    298c:	2b 30       	cpi	r18, 0x0B	; 11
    298e:	31 05       	cpc	r19, r1
    2990:	09 f4       	brne	.+2      	; 0x2994 <DIO_Write+0xbe>
    2992:	51 c1       	rjmp	.+674    	; 0x2c36 <DIO_Write+0x360>
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	9c 81       	ldd	r25, Y+4	; 0x04
    2998:	8c 30       	cpi	r24, 0x0C	; 12
    299a:	91 05       	cpc	r25, r1
    299c:	6c f4       	brge	.+26     	; 0x29b8 <DIO_Write+0xe2>
    299e:	2b 81       	ldd	r18, Y+3	; 0x03
    29a0:	3c 81       	ldd	r19, Y+4	; 0x04
    29a2:	29 30       	cpi	r18, 0x09	; 9
    29a4:	31 05       	cpc	r19, r1
    29a6:	09 f4       	brne	.+2      	; 0x29aa <DIO_Write+0xd4>
    29a8:	20 c1       	rjmp	.+576    	; 0x2bea <DIO_Write+0x314>
    29aa:	8b 81       	ldd	r24, Y+3	; 0x03
    29ac:	9c 81       	ldd	r25, Y+4	; 0x04
    29ae:	8a 30       	cpi	r24, 0x0A	; 10
    29b0:	91 05       	cpc	r25, r1
    29b2:	0c f0       	brlt	.+2      	; 0x29b6 <DIO_Write+0xe0>
    29b4:	2d c1       	rjmp	.+602    	; 0x2c10 <DIO_Write+0x33a>
    29b6:	06 c1       	rjmp	.+524    	; 0x2bc4 <DIO_Write+0x2ee>
    29b8:	2b 81       	ldd	r18, Y+3	; 0x03
    29ba:	3c 81       	ldd	r19, Y+4	; 0x04
    29bc:	2d 30       	cpi	r18, 0x0D	; 13
    29be:	31 05       	cpc	r19, r1
    29c0:	09 f4       	brne	.+2      	; 0x29c4 <DIO_Write+0xee>
    29c2:	5f c1       	rjmp	.+702    	; 0x2c82 <DIO_Write+0x3ac>
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	9c 81       	ldd	r25, Y+4	; 0x04
    29c8:	8e 30       	cpi	r24, 0x0E	; 14
    29ca:	91 05       	cpc	r25, r1
    29cc:	0c f0       	brlt	.+2      	; 0x29d0 <DIO_Write+0xfa>
    29ce:	6c c1       	rjmp	.+728    	; 0x2ca8 <DIO_Write+0x3d2>
    29d0:	45 c1       	rjmp	.+650    	; 0x2c5c <DIO_Write+0x386>
    29d2:	2b 81       	ldd	r18, Y+3	; 0x03
    29d4:	3c 81       	ldd	r19, Y+4	; 0x04
    29d6:	27 31       	cpi	r18, 0x17	; 23
    29d8:	31 05       	cpc	r19, r1
    29da:	09 f4       	brne	.+2      	; 0x29de <DIO_Write+0x108>
    29dc:	10 c2       	rjmp	.+1056   	; 0x2dfe <DIO_Write+0x528>
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	9c 81       	ldd	r25, Y+4	; 0x04
    29e2:	88 31       	cpi	r24, 0x18	; 24
    29e4:	91 05       	cpc	r25, r1
    29e6:	2c f5       	brge	.+74     	; 0x2a32 <DIO_Write+0x15c>
    29e8:	2b 81       	ldd	r18, Y+3	; 0x03
    29ea:	3c 81       	ldd	r19, Y+4	; 0x04
    29ec:	23 31       	cpi	r18, 0x13	; 19
    29ee:	31 05       	cpc	r19, r1
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <DIO_Write+0x11e>
    29f2:	b9 c1       	rjmp	.+882    	; 0x2d66 <DIO_Write+0x490>
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	9c 81       	ldd	r25, Y+4	; 0x04
    29f8:	84 31       	cpi	r24, 0x14	; 20
    29fa:	91 05       	cpc	r25, r1
    29fc:	6c f4       	brge	.+26     	; 0x2a18 <DIO_Write+0x142>
    29fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2a00:	3c 81       	ldd	r19, Y+4	; 0x04
    2a02:	21 31       	cpi	r18, 0x11	; 17
    2a04:	31 05       	cpc	r19, r1
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <DIO_Write+0x134>
    2a08:	88 c1       	rjmp	.+784    	; 0x2d1a <DIO_Write+0x444>
    2a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0e:	82 31       	cpi	r24, 0x12	; 18
    2a10:	91 05       	cpc	r25, r1
    2a12:	0c f0       	brlt	.+2      	; 0x2a16 <DIO_Write+0x140>
    2a14:	95 c1       	rjmp	.+810    	; 0x2d40 <DIO_Write+0x46a>
    2a16:	6e c1       	rjmp	.+732    	; 0x2cf4 <DIO_Write+0x41e>
    2a18:	2b 81       	ldd	r18, Y+3	; 0x03
    2a1a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a1c:	25 31       	cpi	r18, 0x15	; 21
    2a1e:	31 05       	cpc	r19, r1
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <DIO_Write+0x14e>
    2a22:	c7 c1       	rjmp	.+910    	; 0x2db2 <DIO_Write+0x4dc>
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	9c 81       	ldd	r25, Y+4	; 0x04
    2a28:	86 31       	cpi	r24, 0x16	; 22
    2a2a:	91 05       	cpc	r25, r1
    2a2c:	0c f0       	brlt	.+2      	; 0x2a30 <DIO_Write+0x15a>
    2a2e:	d4 c1       	rjmp	.+936    	; 0x2dd8 <DIO_Write+0x502>
    2a30:	ad c1       	rjmp	.+858    	; 0x2d8c <DIO_Write+0x4b6>
    2a32:	2b 81       	ldd	r18, Y+3	; 0x03
    2a34:	3c 81       	ldd	r19, Y+4	; 0x04
    2a36:	2b 31       	cpi	r18, 0x1B	; 27
    2a38:	31 05       	cpc	r19, r1
    2a3a:	09 f4       	brne	.+2      	; 0x2a3e <DIO_Write+0x168>
    2a3c:	2c c2       	rjmp	.+1112   	; 0x2e96 <DIO_Write+0x5c0>
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	9c 81       	ldd	r25, Y+4	; 0x04
    2a42:	8c 31       	cpi	r24, 0x1C	; 28
    2a44:	91 05       	cpc	r25, r1
    2a46:	6c f4       	brge	.+26     	; 0x2a62 <DIO_Write+0x18c>
    2a48:	2b 81       	ldd	r18, Y+3	; 0x03
    2a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a4c:	29 31       	cpi	r18, 0x19	; 25
    2a4e:	31 05       	cpc	r19, r1
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <DIO_Write+0x17e>
    2a52:	fb c1       	rjmp	.+1014   	; 0x2e4a <DIO_Write+0x574>
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	9c 81       	ldd	r25, Y+4	; 0x04
    2a58:	8a 31       	cpi	r24, 0x1A	; 26
    2a5a:	91 05       	cpc	r25, r1
    2a5c:	0c f0       	brlt	.+2      	; 0x2a60 <DIO_Write+0x18a>
    2a5e:	08 c2       	rjmp	.+1040   	; 0x2e70 <DIO_Write+0x59a>
    2a60:	e1 c1       	rjmp	.+962    	; 0x2e24 <DIO_Write+0x54e>
    2a62:	2b 81       	ldd	r18, Y+3	; 0x03
    2a64:	3c 81       	ldd	r19, Y+4	; 0x04
    2a66:	2d 31       	cpi	r18, 0x1D	; 29
    2a68:	31 05       	cpc	r19, r1
    2a6a:	09 f4       	brne	.+2      	; 0x2a6e <DIO_Write+0x198>
    2a6c:	3a c2       	rjmp	.+1140   	; 0x2ee2 <DIO_Write+0x60c>
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	9c 81       	ldd	r25, Y+4	; 0x04
    2a72:	8d 31       	cpi	r24, 0x1D	; 29
    2a74:	91 05       	cpc	r25, r1
    2a76:	0c f4       	brge	.+2      	; 0x2a7a <DIO_Write+0x1a4>
    2a78:	21 c2       	rjmp	.+1090   	; 0x2ebc <DIO_Write+0x5e6>
    2a7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a7e:	2e 31       	cpi	r18, 0x1E	; 30
    2a80:	31 05       	cpc	r19, r1
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <DIO_Write+0x1b0>
    2a84:	41 c2       	rjmp	.+1154   	; 0x2f08 <DIO_Write+0x632>
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8a:	8f 31       	cpi	r24, 0x1F	; 31
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	09 f4       	brne	.+2      	; 0x2a92 <DIO_Write+0x1bc>
    2a90:	4e c2       	rjmp	.+1180   	; 0x2f2e <DIO_Write+0x658>
    2a92:	5f c2       	rjmp	.+1214   	; 0x2f52 <DIO_Write+0x67c>
		{
			case PA0:
			{
				if(u8Data==HIGH)
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	81 30       	cpi	r24, 0x01	; 1
    2a98:	41 f4       	brne	.+16     	; 0x2aaa <DIO_Write+0x1d4>
				{
					SET_BIT(PORTA_R,PA0);
    2a9a:	ab e3       	ldi	r26, 0x3B	; 59
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	eb e3       	ldi	r30, 0x3B	; 59
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	81 60       	ori	r24, 0x01	; 1
    2aa6:	8c 93       	st	X, r24
    2aa8:	54 c2       	rjmp	.+1192   	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTA_R,PA0);
    2aaa:	ab e3       	ldi	r26, 0x3B	; 59
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	eb e3       	ldi	r30, 0x3B	; 59
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	8e 7f       	andi	r24, 0xFE	; 254
    2ab6:	8c 93       	st	X, r24
    2ab8:	4c c2       	rjmp	.+1176   	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PA1:
			{
				if(u8Data==HIGH)
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	81 30       	cpi	r24, 0x01	; 1
    2abe:	41 f4       	brne	.+16     	; 0x2ad0 <DIO_Write+0x1fa>
				{
					SET_BIT(PORTA_R,PA1);
    2ac0:	ab e3       	ldi	r26, 0x3B	; 59
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	eb e3       	ldi	r30, 0x3B	; 59
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	82 60       	ori	r24, 0x02	; 2
    2acc:	8c 93       	st	X, r24
    2ace:	41 c2       	rjmp	.+1154   	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTA_R,PA1);
    2ad0:	ab e3       	ldi	r26, 0x3B	; 59
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	eb e3       	ldi	r30, 0x3B	; 59
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	8d 7f       	andi	r24, 0xFD	; 253
    2adc:	8c 93       	st	X, r24
    2ade:	39 c2       	rjmp	.+1138   	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PA2:
			{
				if(u8Data==HIGH)
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	81 30       	cpi	r24, 0x01	; 1
    2ae4:	41 f4       	brne	.+16     	; 0x2af6 <DIO_Write+0x220>
				{
					SET_BIT(PORTA_R,PA2);
    2ae6:	ab e3       	ldi	r26, 0x3B	; 59
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	eb e3       	ldi	r30, 0x3B	; 59
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	84 60       	ori	r24, 0x04	; 4
    2af2:	8c 93       	st	X, r24
    2af4:	2e c2       	rjmp	.+1116   	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTA_R,PA2);
    2af6:	ab e3       	ldi	r26, 0x3B	; 59
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	eb e3       	ldi	r30, 0x3B	; 59
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	8b 7f       	andi	r24, 0xFB	; 251
    2b02:	8c 93       	st	X, r24
    2b04:	26 c2       	rjmp	.+1100   	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PA3:
			{
				if(u8Data==HIGH)
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	81 30       	cpi	r24, 0x01	; 1
    2b0a:	41 f4       	brne	.+16     	; 0x2b1c <DIO_Write+0x246>
				{
					SET_BIT(PORTA_R,PA3);
    2b0c:	ab e3       	ldi	r26, 0x3B	; 59
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	eb e3       	ldi	r30, 0x3B	; 59
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	88 60       	ori	r24, 0x08	; 8
    2b18:	8c 93       	st	X, r24
    2b1a:	1b c2       	rjmp	.+1078   	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTA_R,PA3);
    2b1c:	ab e3       	ldi	r26, 0x3B	; 59
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	eb e3       	ldi	r30, 0x3B	; 59
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	87 7f       	andi	r24, 0xF7	; 247
    2b28:	8c 93       	st	X, r24
    2b2a:	13 c2       	rjmp	.+1062   	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PA4:
			{
				if(u8Data==HIGH)
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	81 30       	cpi	r24, 0x01	; 1
    2b30:	41 f4       	brne	.+16     	; 0x2b42 <DIO_Write+0x26c>
				{
					SET_BIT(PORTA_R,PA4);
    2b32:	ab e3       	ldi	r26, 0x3B	; 59
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	eb e3       	ldi	r30, 0x3B	; 59
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	80 61       	ori	r24, 0x10	; 16
    2b3e:	8c 93       	st	X, r24
    2b40:	08 c2       	rjmp	.+1040   	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTA_R,PA4);
    2b42:	ab e3       	ldi	r26, 0x3B	; 59
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	eb e3       	ldi	r30, 0x3B	; 59
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	8f 7e       	andi	r24, 0xEF	; 239
    2b4e:	8c 93       	st	X, r24
    2b50:	00 c2       	rjmp	.+1024   	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PA5:
			{
				if(u8Data==HIGH)
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
    2b54:	81 30       	cpi	r24, 0x01	; 1
    2b56:	41 f4       	brne	.+16     	; 0x2b68 <DIO_Write+0x292>
				{
					SET_BIT(PORTA_R,PA5);
    2b58:	ab e3       	ldi	r26, 0x3B	; 59
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	eb e3       	ldi	r30, 0x3B	; 59
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	80 62       	ori	r24, 0x20	; 32
    2b64:	8c 93       	st	X, r24
    2b66:	f5 c1       	rjmp	.+1002   	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTA_R,PA5);
    2b68:	ab e3       	ldi	r26, 0x3B	; 59
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	eb e3       	ldi	r30, 0x3B	; 59
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	8f 7d       	andi	r24, 0xDF	; 223
    2b74:	8c 93       	st	X, r24
    2b76:	ed c1       	rjmp	.+986    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PA6:
			{
				if(u8Data==HIGH)
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	81 30       	cpi	r24, 0x01	; 1
    2b7c:	41 f4       	brne	.+16     	; 0x2b8e <DIO_Write+0x2b8>
				{
					SET_BIT(PORTA_R,PA6);
    2b7e:	ab e3       	ldi	r26, 0x3B	; 59
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	eb e3       	ldi	r30, 0x3B	; 59
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	80 64       	ori	r24, 0x40	; 64
    2b8a:	8c 93       	st	X, r24
    2b8c:	e2 c1       	rjmp	.+964    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTA_R,PA6);
    2b8e:	ab e3       	ldi	r26, 0x3B	; 59
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	eb e3       	ldi	r30, 0x3B	; 59
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	8f 7b       	andi	r24, 0xBF	; 191
    2b9a:	8c 93       	st	X, r24
    2b9c:	da c1       	rjmp	.+948    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PA7:
			{
				if(u8Data==HIGH)
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	81 30       	cpi	r24, 0x01	; 1
    2ba2:	41 f4       	brne	.+16     	; 0x2bb4 <DIO_Write+0x2de>
				{
					SET_BIT(PORTA_R,PA7);
    2ba4:	ab e3       	ldi	r26, 0x3B	; 59
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	eb e3       	ldi	r30, 0x3B	; 59
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	80 68       	ori	r24, 0x80	; 128
    2bb0:	8c 93       	st	X, r24
    2bb2:	cf c1       	rjmp	.+926    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTA_R,PA7);
    2bb4:	ab e3       	ldi	r26, 0x3B	; 59
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	eb e3       	ldi	r30, 0x3B	; 59
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	8f 77       	andi	r24, 0x7F	; 127
    2bc0:	8c 93       	st	X, r24
    2bc2:	c7 c1       	rjmp	.+910    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PB0:
			{
				if(u8Data==HIGH)
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	81 30       	cpi	r24, 0x01	; 1
    2bc8:	41 f4       	brne	.+16     	; 0x2bda <DIO_Write+0x304>
				{
					SET_BIT(PORTB_R,0);
    2bca:	a8 e3       	ldi	r26, 0x38	; 56
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	e8 e3       	ldi	r30, 0x38	; 56
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	81 60       	ori	r24, 0x01	; 1
    2bd6:	8c 93       	st	X, r24
    2bd8:	bc c1       	rjmp	.+888    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTB_R,0);
    2bda:	a8 e3       	ldi	r26, 0x38	; 56
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e8 e3       	ldi	r30, 0x38	; 56
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	8e 7f       	andi	r24, 0xFE	; 254
    2be6:	8c 93       	st	X, r24
    2be8:	b4 c1       	rjmp	.+872    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PB1:
			{
				if(u8Data==HIGH)
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	41 f4       	brne	.+16     	; 0x2c00 <DIO_Write+0x32a>
				{
					SET_BIT(PORTB_R,1);
    2bf0:	a8 e3       	ldi	r26, 0x38	; 56
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e8 e3       	ldi	r30, 0x38	; 56
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	82 60       	ori	r24, 0x02	; 2
    2bfc:	8c 93       	st	X, r24
    2bfe:	a9 c1       	rjmp	.+850    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTB_R,1);
    2c00:	a8 e3       	ldi	r26, 0x38	; 56
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	e8 e3       	ldi	r30, 0x38	; 56
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	8d 7f       	andi	r24, 0xFD	; 253
    2c0c:	8c 93       	st	X, r24
    2c0e:	a1 c1       	rjmp	.+834    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PB2:
			{
				if(u8Data==HIGH)
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	81 30       	cpi	r24, 0x01	; 1
    2c14:	41 f4       	brne	.+16     	; 0x2c26 <DIO_Write+0x350>
				{
					SET_BIT(PORTB_R,2);
    2c16:	a8 e3       	ldi	r26, 0x38	; 56
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e8 e3       	ldi	r30, 0x38	; 56
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	84 60       	ori	r24, 0x04	; 4
    2c22:	8c 93       	st	X, r24
    2c24:	96 c1       	rjmp	.+812    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTB_R,2);
    2c26:	a8 e3       	ldi	r26, 0x38	; 56
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	e8 e3       	ldi	r30, 0x38	; 56
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	8b 7f       	andi	r24, 0xFB	; 251
    2c32:	8c 93       	st	X, r24
    2c34:	8e c1       	rjmp	.+796    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PB3:
			{
				if(u8Data==HIGH)
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	81 30       	cpi	r24, 0x01	; 1
    2c3a:	41 f4       	brne	.+16     	; 0x2c4c <DIO_Write+0x376>
				{
					SET_BIT(PORTB_R,3);
    2c3c:	a8 e3       	ldi	r26, 0x38	; 56
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e8 e3       	ldi	r30, 0x38	; 56
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	88 60       	ori	r24, 0x08	; 8
    2c48:	8c 93       	st	X, r24
    2c4a:	83 c1       	rjmp	.+774    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTB_R,3);
    2c4c:	a8 e3       	ldi	r26, 0x38	; 56
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e8 e3       	ldi	r30, 0x38	; 56
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	87 7f       	andi	r24, 0xF7	; 247
    2c58:	8c 93       	st	X, r24
    2c5a:	7b c1       	rjmp	.+758    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PB4:
			{
				if(u8Data==HIGH)
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	81 30       	cpi	r24, 0x01	; 1
    2c60:	41 f4       	brne	.+16     	; 0x2c72 <DIO_Write+0x39c>
				{
					SET_BIT(PORTB_R,4);
    2c62:	a8 e3       	ldi	r26, 0x38	; 56
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e8 e3       	ldi	r30, 0x38	; 56
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	80 61       	ori	r24, 0x10	; 16
    2c6e:	8c 93       	st	X, r24
    2c70:	70 c1       	rjmp	.+736    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTB_R,4);
    2c72:	a8 e3       	ldi	r26, 0x38	; 56
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e8 e3       	ldi	r30, 0x38	; 56
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8f 7e       	andi	r24, 0xEF	; 239
    2c7e:	8c 93       	st	X, r24
    2c80:	68 c1       	rjmp	.+720    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PB5:
			{
				if(u8Data==HIGH)
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	81 30       	cpi	r24, 0x01	; 1
    2c86:	41 f4       	brne	.+16     	; 0x2c98 <DIO_Write+0x3c2>
				{
					SET_BIT(PORTB_R,5);
    2c88:	a8 e3       	ldi	r26, 0x38	; 56
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e8 e3       	ldi	r30, 0x38	; 56
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	80 62       	ori	r24, 0x20	; 32
    2c94:	8c 93       	st	X, r24
    2c96:	5d c1       	rjmp	.+698    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTB_R,5);
    2c98:	a8 e3       	ldi	r26, 0x38	; 56
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e8 e3       	ldi	r30, 0x38	; 56
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8f 7d       	andi	r24, 0xDF	; 223
    2ca4:	8c 93       	st	X, r24
    2ca6:	55 c1       	rjmp	.+682    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PB6:
			{
				if(u8Data==HIGH)
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	81 30       	cpi	r24, 0x01	; 1
    2cac:	41 f4       	brne	.+16     	; 0x2cbe <DIO_Write+0x3e8>
				{
					SET_BIT(PORTB_R,6);
    2cae:	a8 e3       	ldi	r26, 0x38	; 56
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	e8 e3       	ldi	r30, 0x38	; 56
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	80 64       	ori	r24, 0x40	; 64
    2cba:	8c 93       	st	X, r24
    2cbc:	4a c1       	rjmp	.+660    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTB_R,6);
    2cbe:	a8 e3       	ldi	r26, 0x38	; 56
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	e8 e3       	ldi	r30, 0x38	; 56
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	8f 7b       	andi	r24, 0xBF	; 191
    2cca:	8c 93       	st	X, r24
    2ccc:	42 c1       	rjmp	.+644    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PB7:
			{
				if(u8Data==HIGH)
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	81 30       	cpi	r24, 0x01	; 1
    2cd2:	41 f4       	brne	.+16     	; 0x2ce4 <DIO_Write+0x40e>
				{
					SET_BIT(PORTB_R,7);
    2cd4:	a8 e3       	ldi	r26, 0x38	; 56
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e8 e3       	ldi	r30, 0x38	; 56
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	80 68       	ori	r24, 0x80	; 128
    2ce0:	8c 93       	st	X, r24
    2ce2:	37 c1       	rjmp	.+622    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTB_R,7);
    2ce4:	a8 e3       	ldi	r26, 0x38	; 56
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	e8 e3       	ldi	r30, 0x38	; 56
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	8f 77       	andi	r24, 0x7F	; 127
    2cf0:	8c 93       	st	X, r24
    2cf2:	2f c1       	rjmp	.+606    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PC0:
			{
				if(u8Data==HIGH)
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	81 30       	cpi	r24, 0x01	; 1
    2cf8:	41 f4       	brne	.+16     	; 0x2d0a <DIO_Write+0x434>
				{
					SET_BIT(PORTC_R,0);
    2cfa:	a5 e3       	ldi	r26, 0x35	; 53
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e5 e3       	ldi	r30, 0x35	; 53
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	81 60       	ori	r24, 0x01	; 1
    2d06:	8c 93       	st	X, r24
    2d08:	24 c1       	rjmp	.+584    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTC_R,0);
    2d0a:	a5 e3       	ldi	r26, 0x35	; 53
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	e5 e3       	ldi	r30, 0x35	; 53
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	8e 7f       	andi	r24, 0xFE	; 254
    2d16:	8c 93       	st	X, r24
    2d18:	1c c1       	rjmp	.+568    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PC1:
			{
				if(u8Data==HIGH)
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	41 f4       	brne	.+16     	; 0x2d30 <DIO_Write+0x45a>
				{
					SET_BIT(PORTC_R,1);
    2d20:	a5 e3       	ldi	r26, 0x35	; 53
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	e5 e3       	ldi	r30, 0x35	; 53
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	82 60       	ori	r24, 0x02	; 2
    2d2c:	8c 93       	st	X, r24
    2d2e:	11 c1       	rjmp	.+546    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTC_R,1);
    2d30:	a5 e3       	ldi	r26, 0x35	; 53
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	e5 e3       	ldi	r30, 0x35	; 53
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	8d 7f       	andi	r24, 0xFD	; 253
    2d3c:	8c 93       	st	X, r24
    2d3e:	09 c1       	rjmp	.+530    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PC2:
			{
				if(u8Data==HIGH)
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	81 30       	cpi	r24, 0x01	; 1
    2d44:	41 f4       	brne	.+16     	; 0x2d56 <DIO_Write+0x480>
				{
					SET_BIT(PORTC_R,2);
    2d46:	a5 e3       	ldi	r26, 0x35	; 53
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e5 e3       	ldi	r30, 0x35	; 53
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	84 60       	ori	r24, 0x04	; 4
    2d52:	8c 93       	st	X, r24
    2d54:	fe c0       	rjmp	.+508    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTC_R,2);
    2d56:	a5 e3       	ldi	r26, 0x35	; 53
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	e5 e3       	ldi	r30, 0x35	; 53
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	8b 7f       	andi	r24, 0xFB	; 251
    2d62:	8c 93       	st	X, r24
    2d64:	f6 c0       	rjmp	.+492    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PC3:
			{
				if(u8Data==HIGH)
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	41 f4       	brne	.+16     	; 0x2d7c <DIO_Write+0x4a6>
				{
					SET_BIT(PORTC_R,3);
    2d6c:	a5 e3       	ldi	r26, 0x35	; 53
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	e5 e3       	ldi	r30, 0x35	; 53
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	88 60       	ori	r24, 0x08	; 8
    2d78:	8c 93       	st	X, r24
    2d7a:	eb c0       	rjmp	.+470    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTC_R,3);
    2d7c:	a5 e3       	ldi	r26, 0x35	; 53
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	e5 e3       	ldi	r30, 0x35	; 53
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	87 7f       	andi	r24, 0xF7	; 247
    2d88:	8c 93       	st	X, r24
    2d8a:	e3 c0       	rjmp	.+454    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PC4:
			{
				if(u8Data==HIGH)
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	81 30       	cpi	r24, 0x01	; 1
    2d90:	41 f4       	brne	.+16     	; 0x2da2 <DIO_Write+0x4cc>
				{
					SET_BIT(PORTC_R,4);
    2d92:	a5 e3       	ldi	r26, 0x35	; 53
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e5 e3       	ldi	r30, 0x35	; 53
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	80 61       	ori	r24, 0x10	; 16
    2d9e:	8c 93       	st	X, r24
    2da0:	d8 c0       	rjmp	.+432    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTC_R,4);
    2da2:	a5 e3       	ldi	r26, 0x35	; 53
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	e5 e3       	ldi	r30, 0x35	; 53
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	8f 7e       	andi	r24, 0xEF	; 239
    2dae:	8c 93       	st	X, r24
    2db0:	d0 c0       	rjmp	.+416    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PC5:
			{
				if(u8Data==HIGH)
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	81 30       	cpi	r24, 0x01	; 1
    2db6:	41 f4       	brne	.+16     	; 0x2dc8 <DIO_Write+0x4f2>
				{
					SET_BIT(PORTC_R,5);
    2db8:	a5 e3       	ldi	r26, 0x35	; 53
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	e5 e3       	ldi	r30, 0x35	; 53
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	80 62       	ori	r24, 0x20	; 32
    2dc4:	8c 93       	st	X, r24
    2dc6:	c5 c0       	rjmp	.+394    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTC_R,5);
    2dc8:	a5 e3       	ldi	r26, 0x35	; 53
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e5 e3       	ldi	r30, 0x35	; 53
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	8f 7d       	andi	r24, 0xDF	; 223
    2dd4:	8c 93       	st	X, r24
    2dd6:	bd c0       	rjmp	.+378    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PC6:
			{
				if(u8Data==HIGH)
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	81 30       	cpi	r24, 0x01	; 1
    2ddc:	41 f4       	brne	.+16     	; 0x2dee <DIO_Write+0x518>
				{
					SET_BIT(PORTC_R,6);
    2dde:	a5 e3       	ldi	r26, 0x35	; 53
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	e5 e3       	ldi	r30, 0x35	; 53
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	80 64       	ori	r24, 0x40	; 64
    2dea:	8c 93       	st	X, r24
    2dec:	b2 c0       	rjmp	.+356    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTC_R,6);
    2dee:	a5 e3       	ldi	r26, 0x35	; 53
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	e5 e3       	ldi	r30, 0x35	; 53
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	8f 7b       	andi	r24, 0xBF	; 191
    2dfa:	8c 93       	st	X, r24
    2dfc:	aa c0       	rjmp	.+340    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PC7:
			{
				if(u8Data==HIGH)
    2dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	41 f4       	brne	.+16     	; 0x2e14 <DIO_Write+0x53e>
				{
					SET_BIT(PORTC_R,7);
    2e04:	a5 e3       	ldi	r26, 0x35	; 53
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	e5 e3       	ldi	r30, 0x35	; 53
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	80 68       	ori	r24, 0x80	; 128
    2e10:	8c 93       	st	X, r24
    2e12:	9f c0       	rjmp	.+318    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTC_R,7);
    2e14:	a5 e3       	ldi	r26, 0x35	; 53
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	e5 e3       	ldi	r30, 0x35	; 53
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	8f 77       	andi	r24, 0x7F	; 127
    2e20:	8c 93       	st	X, r24
    2e22:	97 c0       	rjmp	.+302    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PD0:
			{
				if(u8Data==HIGH)
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	81 30       	cpi	r24, 0x01	; 1
    2e28:	41 f4       	brne	.+16     	; 0x2e3a <DIO_Write+0x564>
				{
					SET_BIT(PORTD_R,0);
    2e2a:	a2 e3       	ldi	r26, 0x32	; 50
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e2 e3       	ldi	r30, 0x32	; 50
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	81 60       	ori	r24, 0x01	; 1
    2e36:	8c 93       	st	X, r24
    2e38:	8c c0       	rjmp	.+280    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTD_R,0);
    2e3a:	a2 e3       	ldi	r26, 0x32	; 50
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e2 e3       	ldi	r30, 0x32	; 50
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	8e 7f       	andi	r24, 0xFE	; 254
    2e46:	8c 93       	st	X, r24
    2e48:	84 c0       	rjmp	.+264    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PD1:
			{
				if(u8Data==HIGH)
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	81 30       	cpi	r24, 0x01	; 1
    2e4e:	41 f4       	brne	.+16     	; 0x2e60 <DIO_Write+0x58a>
				{
					SET_BIT(PORTD_R,1);
    2e50:	a2 e3       	ldi	r26, 0x32	; 50
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	e2 e3       	ldi	r30, 0x32	; 50
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	82 60       	ori	r24, 0x02	; 2
    2e5c:	8c 93       	st	X, r24
    2e5e:	79 c0       	rjmp	.+242    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTD_R,1);
    2e60:	a2 e3       	ldi	r26, 0x32	; 50
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	e2 e3       	ldi	r30, 0x32	; 50
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	8d 7f       	andi	r24, 0xFD	; 253
    2e6c:	8c 93       	st	X, r24
    2e6e:	71 c0       	rjmp	.+226    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PD2:
			{
				if(u8Data==HIGH)
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	81 30       	cpi	r24, 0x01	; 1
    2e74:	41 f4       	brne	.+16     	; 0x2e86 <DIO_Write+0x5b0>
				{
					SET_BIT(PORTD_R,2);
    2e76:	a2 e3       	ldi	r26, 0x32	; 50
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e2 e3       	ldi	r30, 0x32	; 50
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	84 60       	ori	r24, 0x04	; 4
    2e82:	8c 93       	st	X, r24
    2e84:	66 c0       	rjmp	.+204    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTD_R,2);
    2e86:	a2 e3       	ldi	r26, 0x32	; 50
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e2 e3       	ldi	r30, 0x32	; 50
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	8b 7f       	andi	r24, 0xFB	; 251
    2e92:	8c 93       	st	X, r24
    2e94:	5e c0       	rjmp	.+188    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PD3:
			{
				if(u8Data==HIGH)
    2e96:	8a 81       	ldd	r24, Y+2	; 0x02
    2e98:	81 30       	cpi	r24, 0x01	; 1
    2e9a:	41 f4       	brne	.+16     	; 0x2eac <DIO_Write+0x5d6>
				{
					SET_BIT(PORTD_R,3);
    2e9c:	a2 e3       	ldi	r26, 0x32	; 50
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	e2 e3       	ldi	r30, 0x32	; 50
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	88 60       	ori	r24, 0x08	; 8
    2ea8:	8c 93       	st	X, r24
    2eaa:	53 c0       	rjmp	.+166    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTD_R,3);
    2eac:	a2 e3       	ldi	r26, 0x32	; 50
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	e2 e3       	ldi	r30, 0x32	; 50
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	87 7f       	andi	r24, 0xF7	; 247
    2eb8:	8c 93       	st	X, r24
    2eba:	4b c0       	rjmp	.+150    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PD4:
			{
				if(u8Data==HIGH)
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	81 30       	cpi	r24, 0x01	; 1
    2ec0:	41 f4       	brne	.+16     	; 0x2ed2 <DIO_Write+0x5fc>
				{
					SET_BIT(PORTD_R,4);
    2ec2:	a2 e3       	ldi	r26, 0x32	; 50
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e2 e3       	ldi	r30, 0x32	; 50
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	80 61       	ori	r24, 0x10	; 16
    2ece:	8c 93       	st	X, r24
    2ed0:	40 c0       	rjmp	.+128    	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTD_R,4);
    2ed2:	a2 e3       	ldi	r26, 0x32	; 50
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e2 e3       	ldi	r30, 0x32	; 50
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	8f 7e       	andi	r24, 0xEF	; 239
    2ede:	8c 93       	st	X, r24
    2ee0:	38 c0       	rjmp	.+112    	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PD5:
			{
				if(u8Data==HIGH)
    2ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee4:	81 30       	cpi	r24, 0x01	; 1
    2ee6:	41 f4       	brne	.+16     	; 0x2ef8 <DIO_Write+0x622>
				{
					SET_BIT(PORTD_R,5);
    2ee8:	a2 e3       	ldi	r26, 0x32	; 50
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	e2 e3       	ldi	r30, 0x32	; 50
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	80 62       	ori	r24, 0x20	; 32
    2ef4:	8c 93       	st	X, r24
    2ef6:	2d c0       	rjmp	.+90     	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTD_R,5);
    2ef8:	a2 e3       	ldi	r26, 0x32	; 50
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	e2 e3       	ldi	r30, 0x32	; 50
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	8f 7d       	andi	r24, 0xDF	; 223
    2f04:	8c 93       	st	X, r24
    2f06:	25 c0       	rjmp	.+74     	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PD6:
			{
				if(u8Data==HIGH)
    2f08:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0a:	81 30       	cpi	r24, 0x01	; 1
    2f0c:	41 f4       	brne	.+16     	; 0x2f1e <DIO_Write+0x648>
				{
					SET_BIT(PORTD_R,6);
    2f0e:	a2 e3       	ldi	r26, 0x32	; 50
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e2 e3       	ldi	r30, 0x32	; 50
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	80 64       	ori	r24, 0x40	; 64
    2f1a:	8c 93       	st	X, r24
    2f1c:	1a c0       	rjmp	.+52     	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTD_R,6);
    2f1e:	a2 e3       	ldi	r26, 0x32	; 50
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e2 e3       	ldi	r30, 0x32	; 50
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	8f 7b       	andi	r24, 0xBF	; 191
    2f2a:	8c 93       	st	X, r24
    2f2c:	12 c0       	rjmp	.+36     	; 0x2f52 <DIO_Write+0x67c>
				}
				break;
			}
			case PD7:
			{
				if(u8Data==HIGH)
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	41 f4       	brne	.+16     	; 0x2f44 <DIO_Write+0x66e>
				{
					SET_BIT(PORTD_R,7);
    2f34:	a2 e3       	ldi	r26, 0x32	; 50
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e2 e3       	ldi	r30, 0x32	; 50
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 68       	ori	r24, 0x80	; 128
    2f40:	8c 93       	st	X, r24
    2f42:	07 c0       	rjmp	.+14     	; 0x2f52 <DIO_Write+0x67c>
				}else
				{
					CLR_BIT(PORTD_R,7);
    2f44:	a2 e3       	ldi	r26, 0x32	; 50
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e2 e3       	ldi	r30, 0x32	; 50
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	8f 77       	andi	r24, 0x7F	; 127
    2f50:	8c 93       	st	X, r24
				}
				break;
			}
		}
	return E_OK;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
}
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <DIO_Read>:

enuErrorStatus_t DIO_Read(uint8_t u8GroupId, uint8_t* pu8Data)
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <DIO_Read+0x6>
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <DIO_Read+0x8>
    2f6a:	0f 92       	push	r0
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	89 83       	std	Y+1, r24	; 0x01
    2f72:	7b 83       	std	Y+3, r23	; 0x03
    2f74:	6a 83       	std	Y+2, r22	; 0x02
		switch(astrDIOConfigParameters[u8GroupId].enuPinNo)
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	c9 01       	movw	r24, r18
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	82 0f       	add	r24, r18
    2f84:	93 1f       	adc	r25, r19
    2f86:	fc 01       	movw	r30, r24
    2f88:	e6 57       	subi	r30, 0x76	; 118
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	80 81       	ld	r24, Z
    2f8e:	28 2f       	mov	r18, r24
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	3d 83       	std	Y+5, r19	; 0x05
    2f94:	2c 83       	std	Y+4, r18	; 0x04
    2f96:	8c 81       	ldd	r24, Y+4	; 0x04
    2f98:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9a:	8f 30       	cpi	r24, 0x0F	; 15
    2f9c:	91 05       	cpc	r25, r1
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <DIO_Read+0x40>
    2fa0:	59 c1       	rjmp	.+690    	; 0x3254 <DIO_Read+0x2f2>
    2fa2:	2c 81       	ldd	r18, Y+4	; 0x04
    2fa4:	3d 81       	ldd	r19, Y+5	; 0x05
    2fa6:	20 31       	cpi	r18, 0x10	; 16
    2fa8:	31 05       	cpc	r19, r1
    2faa:	0c f0       	brlt	.+2      	; 0x2fae <DIO_Read+0x4c>
    2fac:	5a c0       	rjmp	.+180    	; 0x3062 <DIO_Read+0x100>
    2fae:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb2:	87 30       	cpi	r24, 0x07	; 7
    2fb4:	91 05       	cpc	r25, r1
    2fb6:	09 f4       	brne	.+2      	; 0x2fba <DIO_Read+0x58>
    2fb8:	fc c0       	rjmp	.+504    	; 0x31b2 <DIO_Read+0x250>
    2fba:	2c 81       	ldd	r18, Y+4	; 0x04
    2fbc:	3d 81       	ldd	r19, Y+5	; 0x05
    2fbe:	28 30       	cpi	r18, 0x08	; 8
    2fc0:	31 05       	cpc	r19, r1
    2fc2:	54 f5       	brge	.+84     	; 0x3018 <DIO_Read+0xb6>
    2fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fc8:	83 30       	cpi	r24, 0x03	; 3
    2fca:	91 05       	cpc	r25, r1
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <DIO_Read+0x6e>
    2fce:	c5 c0       	rjmp	.+394    	; 0x315a <DIO_Read+0x1f8>
    2fd0:	2c 81       	ldd	r18, Y+4	; 0x04
    2fd2:	3d 81       	ldd	r19, Y+5	; 0x05
    2fd4:	24 30       	cpi	r18, 0x04	; 4
    2fd6:	31 05       	cpc	r19, r1
    2fd8:	94 f4       	brge	.+36     	; 0x2ffe <DIO_Read+0x9c>
    2fda:	8c 81       	ldd	r24, Y+4	; 0x04
    2fdc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fde:	81 30       	cpi	r24, 0x01	; 1
    2fe0:	91 05       	cpc	r25, r1
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <DIO_Read+0x84>
    2fe4:	a7 c0       	rjmp	.+334    	; 0x3134 <DIO_Read+0x1d2>
    2fe6:	2c 81       	ldd	r18, Y+4	; 0x04
    2fe8:	3d 81       	ldd	r19, Y+5	; 0x05
    2fea:	22 30       	cpi	r18, 0x02	; 2
    2fec:	31 05       	cpc	r19, r1
    2fee:	0c f0       	brlt	.+2      	; 0x2ff2 <DIO_Read+0x90>
    2ff0:	aa c0       	rjmp	.+340    	; 0x3146 <DIO_Read+0x1e4>
    2ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <DIO_Read+0x9a>
    2ffa:	94 c0       	rjmp	.+296    	; 0x3124 <DIO_Read+0x1c2>
    2ffc:	d6 c1       	rjmp	.+940    	; 0x33aa <DIO_Read+0x448>
    2ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    3000:	3d 81       	ldd	r19, Y+5	; 0x05
    3002:	25 30       	cpi	r18, 0x05	; 5
    3004:	31 05       	cpc	r19, r1
    3006:	09 f4       	brne	.+2      	; 0x300a <DIO_Read+0xa8>
    3008:	bd c0       	rjmp	.+378    	; 0x3184 <DIO_Read+0x222>
    300a:	8c 81       	ldd	r24, Y+4	; 0x04
    300c:	9d 81       	ldd	r25, Y+5	; 0x05
    300e:	86 30       	cpi	r24, 0x06	; 6
    3010:	91 05       	cpc	r25, r1
    3012:	0c f0       	brlt	.+2      	; 0x3016 <DIO_Read+0xb4>
    3014:	c2 c0       	rjmp	.+388    	; 0x319a <DIO_Read+0x238>
    3016:	ac c0       	rjmp	.+344    	; 0x3170 <DIO_Read+0x20e>
    3018:	2c 81       	ldd	r18, Y+4	; 0x04
    301a:	3d 81       	ldd	r19, Y+5	; 0x05
    301c:	2b 30       	cpi	r18, 0x0B	; 11
    301e:	31 05       	cpc	r19, r1
    3020:	09 f4       	brne	.+2      	; 0x3024 <DIO_Read+0xc2>
    3022:	ec c0       	rjmp	.+472    	; 0x31fc <DIO_Read+0x29a>
    3024:	8c 81       	ldd	r24, Y+4	; 0x04
    3026:	9d 81       	ldd	r25, Y+5	; 0x05
    3028:	8c 30       	cpi	r24, 0x0C	; 12
    302a:	91 05       	cpc	r25, r1
    302c:	6c f4       	brge	.+26     	; 0x3048 <DIO_Read+0xe6>
    302e:	2c 81       	ldd	r18, Y+4	; 0x04
    3030:	3d 81       	ldd	r19, Y+5	; 0x05
    3032:	29 30       	cpi	r18, 0x09	; 9
    3034:	31 05       	cpc	r19, r1
    3036:	09 f4       	brne	.+2      	; 0x303a <DIO_Read+0xd8>
    3038:	ce c0       	rjmp	.+412    	; 0x31d6 <DIO_Read+0x274>
    303a:	8c 81       	ldd	r24, Y+4	; 0x04
    303c:	9d 81       	ldd	r25, Y+5	; 0x05
    303e:	8a 30       	cpi	r24, 0x0A	; 10
    3040:	91 05       	cpc	r25, r1
    3042:	0c f0       	brlt	.+2      	; 0x3046 <DIO_Read+0xe4>
    3044:	d1 c0       	rjmp	.+418    	; 0x31e8 <DIO_Read+0x286>
    3046:	bf c0       	rjmp	.+382    	; 0x31c6 <DIO_Read+0x264>
    3048:	2c 81       	ldd	r18, Y+4	; 0x04
    304a:	3d 81       	ldd	r19, Y+5	; 0x05
    304c:	2d 30       	cpi	r18, 0x0D	; 13
    304e:	31 05       	cpc	r19, r1
    3050:	09 f4       	brne	.+2      	; 0x3054 <DIO_Read+0xf2>
    3052:	e9 c0       	rjmp	.+466    	; 0x3226 <DIO_Read+0x2c4>
    3054:	8c 81       	ldd	r24, Y+4	; 0x04
    3056:	9d 81       	ldd	r25, Y+5	; 0x05
    3058:	8e 30       	cpi	r24, 0x0E	; 14
    305a:	91 05       	cpc	r25, r1
    305c:	0c f0       	brlt	.+2      	; 0x3060 <DIO_Read+0xfe>
    305e:	ee c0       	rjmp	.+476    	; 0x323c <DIO_Read+0x2da>
    3060:	d8 c0       	rjmp	.+432    	; 0x3212 <DIO_Read+0x2b0>
    3062:	2c 81       	ldd	r18, Y+4	; 0x04
    3064:	3d 81       	ldd	r19, Y+5	; 0x05
    3066:	27 31       	cpi	r18, 0x17	; 23
    3068:	31 05       	cpc	r19, r1
    306a:	09 f4       	brne	.+2      	; 0x306e <DIO_Read+0x10c>
    306c:	44 c1       	rjmp	.+648    	; 0x32f6 <DIO_Read+0x394>
    306e:	8c 81       	ldd	r24, Y+4	; 0x04
    3070:	9d 81       	ldd	r25, Y+5	; 0x05
    3072:	88 31       	cpi	r24, 0x18	; 24
    3074:	91 05       	cpc	r25, r1
    3076:	2c f5       	brge	.+74     	; 0x30c2 <DIO_Read+0x160>
    3078:	2c 81       	ldd	r18, Y+4	; 0x04
    307a:	3d 81       	ldd	r19, Y+5	; 0x05
    307c:	23 31       	cpi	r18, 0x13	; 19
    307e:	31 05       	cpc	r19, r1
    3080:	09 f4       	brne	.+2      	; 0x3084 <DIO_Read+0x122>
    3082:	0d c1       	rjmp	.+538    	; 0x329e <DIO_Read+0x33c>
    3084:	8c 81       	ldd	r24, Y+4	; 0x04
    3086:	9d 81       	ldd	r25, Y+5	; 0x05
    3088:	84 31       	cpi	r24, 0x14	; 20
    308a:	91 05       	cpc	r25, r1
    308c:	6c f4       	brge	.+26     	; 0x30a8 <DIO_Read+0x146>
    308e:	2c 81       	ldd	r18, Y+4	; 0x04
    3090:	3d 81       	ldd	r19, Y+5	; 0x05
    3092:	21 31       	cpi	r18, 0x11	; 17
    3094:	31 05       	cpc	r19, r1
    3096:	09 f4       	brne	.+2      	; 0x309a <DIO_Read+0x138>
    3098:	ef c0       	rjmp	.+478    	; 0x3278 <DIO_Read+0x316>
    309a:	8c 81       	ldd	r24, Y+4	; 0x04
    309c:	9d 81       	ldd	r25, Y+5	; 0x05
    309e:	82 31       	cpi	r24, 0x12	; 18
    30a0:	91 05       	cpc	r25, r1
    30a2:	0c f0       	brlt	.+2      	; 0x30a6 <DIO_Read+0x144>
    30a4:	f2 c0       	rjmp	.+484    	; 0x328a <DIO_Read+0x328>
    30a6:	e0 c0       	rjmp	.+448    	; 0x3268 <DIO_Read+0x306>
    30a8:	2c 81       	ldd	r18, Y+4	; 0x04
    30aa:	3d 81       	ldd	r19, Y+5	; 0x05
    30ac:	25 31       	cpi	r18, 0x15	; 21
    30ae:	31 05       	cpc	r19, r1
    30b0:	09 f4       	brne	.+2      	; 0x30b4 <DIO_Read+0x152>
    30b2:	0a c1       	rjmp	.+532    	; 0x32c8 <DIO_Read+0x366>
    30b4:	8c 81       	ldd	r24, Y+4	; 0x04
    30b6:	9d 81       	ldd	r25, Y+5	; 0x05
    30b8:	86 31       	cpi	r24, 0x16	; 22
    30ba:	91 05       	cpc	r25, r1
    30bc:	0c f0       	brlt	.+2      	; 0x30c0 <DIO_Read+0x15e>
    30be:	0f c1       	rjmp	.+542    	; 0x32de <DIO_Read+0x37c>
    30c0:	f9 c0       	rjmp	.+498    	; 0x32b4 <DIO_Read+0x352>
    30c2:	2c 81       	ldd	r18, Y+4	; 0x04
    30c4:	3d 81       	ldd	r19, Y+5	; 0x05
    30c6:	2b 31       	cpi	r18, 0x1B	; 27
    30c8:	31 05       	cpc	r19, r1
    30ca:	09 f4       	brne	.+2      	; 0x30ce <DIO_Read+0x16c>
    30cc:	39 c1       	rjmp	.+626    	; 0x3340 <DIO_Read+0x3de>
    30ce:	8c 81       	ldd	r24, Y+4	; 0x04
    30d0:	9d 81       	ldd	r25, Y+5	; 0x05
    30d2:	8c 31       	cpi	r24, 0x1C	; 28
    30d4:	91 05       	cpc	r25, r1
    30d6:	6c f4       	brge	.+26     	; 0x30f2 <DIO_Read+0x190>
    30d8:	2c 81       	ldd	r18, Y+4	; 0x04
    30da:	3d 81       	ldd	r19, Y+5	; 0x05
    30dc:	29 31       	cpi	r18, 0x19	; 25
    30de:	31 05       	cpc	r19, r1
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <DIO_Read+0x182>
    30e2:	1b c1       	rjmp	.+566    	; 0x331a <DIO_Read+0x3b8>
    30e4:	8c 81       	ldd	r24, Y+4	; 0x04
    30e6:	9d 81       	ldd	r25, Y+5	; 0x05
    30e8:	8a 31       	cpi	r24, 0x1A	; 26
    30ea:	91 05       	cpc	r25, r1
    30ec:	0c f0       	brlt	.+2      	; 0x30f0 <DIO_Read+0x18e>
    30ee:	1e c1       	rjmp	.+572    	; 0x332c <DIO_Read+0x3ca>
    30f0:	0c c1       	rjmp	.+536    	; 0x330a <DIO_Read+0x3a8>
    30f2:	2c 81       	ldd	r18, Y+4	; 0x04
    30f4:	3d 81       	ldd	r19, Y+5	; 0x05
    30f6:	2d 31       	cpi	r18, 0x1D	; 29
    30f8:	31 05       	cpc	r19, r1
    30fa:	09 f4       	brne	.+2      	; 0x30fe <DIO_Read+0x19c>
    30fc:	36 c1       	rjmp	.+620    	; 0x336a <DIO_Read+0x408>
    30fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3100:	9d 81       	ldd	r25, Y+5	; 0x05
    3102:	8d 31       	cpi	r24, 0x1D	; 29
    3104:	91 05       	cpc	r25, r1
    3106:	0c f4       	brge	.+2      	; 0x310a <DIO_Read+0x1a8>
    3108:	26 c1       	rjmp	.+588    	; 0x3356 <DIO_Read+0x3f4>
    310a:	2c 81       	ldd	r18, Y+4	; 0x04
    310c:	3d 81       	ldd	r19, Y+5	; 0x05
    310e:	2e 31       	cpi	r18, 0x1E	; 30
    3110:	31 05       	cpc	r19, r1
    3112:	09 f4       	brne	.+2      	; 0x3116 <DIO_Read+0x1b4>
    3114:	35 c1       	rjmp	.+618    	; 0x3380 <DIO_Read+0x41e>
    3116:	8c 81       	ldd	r24, Y+4	; 0x04
    3118:	9d 81       	ldd	r25, Y+5	; 0x05
    311a:	8f 31       	cpi	r24, 0x1F	; 31
    311c:	91 05       	cpc	r25, r1
    311e:	09 f4       	brne	.+2      	; 0x3122 <DIO_Read+0x1c0>
    3120:	3b c1       	rjmp	.+630    	; 0x3398 <DIO_Read+0x436>
    3122:	43 c1       	rjmp	.+646    	; 0x33aa <DIO_Read+0x448>
		{
			case PA0:
			{
				*pu8Data=GET_BIT(PINA_R,PA0);
    3124:	e9 e3       	ldi	r30, 0x39	; 57
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	81 70       	andi	r24, 0x01	; 1
    312c:	ea 81       	ldd	r30, Y+2	; 0x02
    312e:	fb 81       	ldd	r31, Y+3	; 0x03
    3130:	80 83       	st	Z, r24
    3132:	3b c1       	rjmp	.+630    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PA1:
			{
				*pu8Data=GET_BIT(PINA_R,PA1);
    3134:	e9 e3       	ldi	r30, 0x39	; 57
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	86 95       	lsr	r24
    313c:	81 70       	andi	r24, 0x01	; 1
    313e:	ea 81       	ldd	r30, Y+2	; 0x02
    3140:	fb 81       	ldd	r31, Y+3	; 0x03
    3142:	80 83       	st	Z, r24
    3144:	32 c1       	rjmp	.+612    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PA2:
			{
				*pu8Data=GET_BIT(PINA_R,PA2);
    3146:	e9 e3       	ldi	r30, 0x39	; 57
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	86 95       	lsr	r24
    314e:	86 95       	lsr	r24
    3150:	81 70       	andi	r24, 0x01	; 1
    3152:	ea 81       	ldd	r30, Y+2	; 0x02
    3154:	fb 81       	ldd	r31, Y+3	; 0x03
    3156:	80 83       	st	Z, r24
    3158:	28 c1       	rjmp	.+592    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PA3:
			{
				*pu8Data=GET_BIT(PINA_R,PA3);
    315a:	e9 e3       	ldi	r30, 0x39	; 57
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	86 95       	lsr	r24
    3162:	86 95       	lsr	r24
    3164:	86 95       	lsr	r24
    3166:	81 70       	andi	r24, 0x01	; 1
    3168:	ea 81       	ldd	r30, Y+2	; 0x02
    316a:	fb 81       	ldd	r31, Y+3	; 0x03
    316c:	80 83       	st	Z, r24
    316e:	1d c1       	rjmp	.+570    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PA4:
			{
				*pu8Data=GET_BIT(PINA_R,PA4);
    3170:	e9 e3       	ldi	r30, 0x39	; 57
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	82 95       	swap	r24
    3178:	8f 70       	andi	r24, 0x0F	; 15
    317a:	81 70       	andi	r24, 0x01	; 1
    317c:	ea 81       	ldd	r30, Y+2	; 0x02
    317e:	fb 81       	ldd	r31, Y+3	; 0x03
    3180:	80 83       	st	Z, r24
    3182:	13 c1       	rjmp	.+550    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PA5:
			{
				*pu8Data=GET_BIT(PINA_R,PA5);
    3184:	e9 e3       	ldi	r30, 0x39	; 57
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	82 95       	swap	r24
    318c:	86 95       	lsr	r24
    318e:	87 70       	andi	r24, 0x07	; 7
    3190:	81 70       	andi	r24, 0x01	; 1
    3192:	ea 81       	ldd	r30, Y+2	; 0x02
    3194:	fb 81       	ldd	r31, Y+3	; 0x03
    3196:	80 83       	st	Z, r24
    3198:	08 c1       	rjmp	.+528    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PA6:
			{
				*pu8Data=GET_BIT(PINA_R,PA6);
    319a:	e9 e3       	ldi	r30, 0x39	; 57
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	82 95       	swap	r24
    31a2:	86 95       	lsr	r24
    31a4:	86 95       	lsr	r24
    31a6:	83 70       	andi	r24, 0x03	; 3
    31a8:	81 70       	andi	r24, 0x01	; 1
    31aa:	ea 81       	ldd	r30, Y+2	; 0x02
    31ac:	fb 81       	ldd	r31, Y+3	; 0x03
    31ae:	80 83       	st	Z, r24
    31b0:	fc c0       	rjmp	.+504    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PA7:
			{
				*pu8Data=GET_BIT(PINA_R,PA7);
    31b2:	e9 e3       	ldi	r30, 0x39	; 57
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	88 1f       	adc	r24, r24
    31ba:	88 27       	eor	r24, r24
    31bc:	88 1f       	adc	r24, r24
    31be:	ea 81       	ldd	r30, Y+2	; 0x02
    31c0:	fb 81       	ldd	r31, Y+3	; 0x03
    31c2:	80 83       	st	Z, r24
    31c4:	f2 c0       	rjmp	.+484    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PB0:
			{
				*pu8Data=GET_BIT(PINB_R,0);
    31c6:	e6 e3       	ldi	r30, 0x36	; 54
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	81 70       	andi	r24, 0x01	; 1
    31ce:	ea 81       	ldd	r30, Y+2	; 0x02
    31d0:	fb 81       	ldd	r31, Y+3	; 0x03
    31d2:	80 83       	st	Z, r24
    31d4:	ea c0       	rjmp	.+468    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PB1:
			{
				*pu8Data=GET_BIT(PINB_R,1);
    31d6:	e6 e3       	ldi	r30, 0x36	; 54
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	86 95       	lsr	r24
    31de:	81 70       	andi	r24, 0x01	; 1
    31e0:	ea 81       	ldd	r30, Y+2	; 0x02
    31e2:	fb 81       	ldd	r31, Y+3	; 0x03
    31e4:	80 83       	st	Z, r24
    31e6:	e1 c0       	rjmp	.+450    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PB2:
			{
				*pu8Data=GET_BIT(PINB_R,2);
    31e8:	e6 e3       	ldi	r30, 0x36	; 54
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	86 95       	lsr	r24
    31f0:	86 95       	lsr	r24
    31f2:	81 70       	andi	r24, 0x01	; 1
    31f4:	ea 81       	ldd	r30, Y+2	; 0x02
    31f6:	fb 81       	ldd	r31, Y+3	; 0x03
    31f8:	80 83       	st	Z, r24
    31fa:	d7 c0       	rjmp	.+430    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PB3:
			{
				*pu8Data=GET_BIT(PINB_R,3);
    31fc:	e6 e3       	ldi	r30, 0x36	; 54
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	86 95       	lsr	r24
    3204:	86 95       	lsr	r24
    3206:	86 95       	lsr	r24
    3208:	81 70       	andi	r24, 0x01	; 1
    320a:	ea 81       	ldd	r30, Y+2	; 0x02
    320c:	fb 81       	ldd	r31, Y+3	; 0x03
    320e:	80 83       	st	Z, r24
    3210:	cc c0       	rjmp	.+408    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PB4:
			{
				*pu8Data=GET_BIT(PINB_R,4);
    3212:	e6 e3       	ldi	r30, 0x36	; 54
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	82 95       	swap	r24
    321a:	8f 70       	andi	r24, 0x0F	; 15
    321c:	81 70       	andi	r24, 0x01	; 1
    321e:	ea 81       	ldd	r30, Y+2	; 0x02
    3220:	fb 81       	ldd	r31, Y+3	; 0x03
    3222:	80 83       	st	Z, r24
    3224:	c2 c0       	rjmp	.+388    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PB5:
			{
				*pu8Data=GET_BIT(PINB_R,5);
    3226:	e6 e3       	ldi	r30, 0x36	; 54
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	80 81       	ld	r24, Z
    322c:	82 95       	swap	r24
    322e:	86 95       	lsr	r24
    3230:	87 70       	andi	r24, 0x07	; 7
    3232:	81 70       	andi	r24, 0x01	; 1
    3234:	ea 81       	ldd	r30, Y+2	; 0x02
    3236:	fb 81       	ldd	r31, Y+3	; 0x03
    3238:	80 83       	st	Z, r24
    323a:	b7 c0       	rjmp	.+366    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PB6:
			{
				*pu8Data=GET_BIT(PINB_R,6);
    323c:	e6 e3       	ldi	r30, 0x36	; 54
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	82 95       	swap	r24
    3244:	86 95       	lsr	r24
    3246:	86 95       	lsr	r24
    3248:	83 70       	andi	r24, 0x03	; 3
    324a:	81 70       	andi	r24, 0x01	; 1
    324c:	ea 81       	ldd	r30, Y+2	; 0x02
    324e:	fb 81       	ldd	r31, Y+3	; 0x03
    3250:	80 83       	st	Z, r24
    3252:	ab c0       	rjmp	.+342    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PB7:
			{
				*pu8Data=GET_BIT(PINB_R,7);
    3254:	e6 e3       	ldi	r30, 0x36	; 54
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	88 1f       	adc	r24, r24
    325c:	88 27       	eor	r24, r24
    325e:	88 1f       	adc	r24, r24
    3260:	ea 81       	ldd	r30, Y+2	; 0x02
    3262:	fb 81       	ldd	r31, Y+3	; 0x03
    3264:	80 83       	st	Z, r24
    3266:	a1 c0       	rjmp	.+322    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PC0:
			{
				*pu8Data=GET_BIT(PINC_R,0);
    3268:	e3 e3       	ldi	r30, 0x33	; 51
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	81 70       	andi	r24, 0x01	; 1
    3270:	ea 81       	ldd	r30, Y+2	; 0x02
    3272:	fb 81       	ldd	r31, Y+3	; 0x03
    3274:	80 83       	st	Z, r24
    3276:	99 c0       	rjmp	.+306    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PC1:
			{
				*pu8Data=GET_BIT(PINC_R,1);
    3278:	e3 e3       	ldi	r30, 0x33	; 51
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	86 95       	lsr	r24
    3280:	81 70       	andi	r24, 0x01	; 1
    3282:	ea 81       	ldd	r30, Y+2	; 0x02
    3284:	fb 81       	ldd	r31, Y+3	; 0x03
    3286:	80 83       	st	Z, r24
    3288:	90 c0       	rjmp	.+288    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PC2:
			{
				*pu8Data=GET_BIT(PINC_R,2);
    328a:	e3 e3       	ldi	r30, 0x33	; 51
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	86 95       	lsr	r24
    3292:	86 95       	lsr	r24
    3294:	81 70       	andi	r24, 0x01	; 1
    3296:	ea 81       	ldd	r30, Y+2	; 0x02
    3298:	fb 81       	ldd	r31, Y+3	; 0x03
    329a:	80 83       	st	Z, r24
    329c:	86 c0       	rjmp	.+268    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PC3:
			{
				*pu8Data=GET_BIT(PINC_R,3);
    329e:	e3 e3       	ldi	r30, 0x33	; 51
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	80 81       	ld	r24, Z
    32a4:	86 95       	lsr	r24
    32a6:	86 95       	lsr	r24
    32a8:	86 95       	lsr	r24
    32aa:	81 70       	andi	r24, 0x01	; 1
    32ac:	ea 81       	ldd	r30, Y+2	; 0x02
    32ae:	fb 81       	ldd	r31, Y+3	; 0x03
    32b0:	80 83       	st	Z, r24
    32b2:	7b c0       	rjmp	.+246    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PC4:
			{
				*pu8Data=GET_BIT(PINC_R,4);
    32b4:	e3 e3       	ldi	r30, 0x33	; 51
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
    32ba:	82 95       	swap	r24
    32bc:	8f 70       	andi	r24, 0x0F	; 15
    32be:	81 70       	andi	r24, 0x01	; 1
    32c0:	ea 81       	ldd	r30, Y+2	; 0x02
    32c2:	fb 81       	ldd	r31, Y+3	; 0x03
    32c4:	80 83       	st	Z, r24
    32c6:	71 c0       	rjmp	.+226    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PC5:
			{
				*pu8Data=GET_BIT(PINC_R,5);
    32c8:	e3 e3       	ldi	r30, 0x33	; 51
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	80 81       	ld	r24, Z
    32ce:	82 95       	swap	r24
    32d0:	86 95       	lsr	r24
    32d2:	87 70       	andi	r24, 0x07	; 7
    32d4:	81 70       	andi	r24, 0x01	; 1
    32d6:	ea 81       	ldd	r30, Y+2	; 0x02
    32d8:	fb 81       	ldd	r31, Y+3	; 0x03
    32da:	80 83       	st	Z, r24
    32dc:	66 c0       	rjmp	.+204    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PC6:
			{
				*pu8Data=GET_BIT(PINC_R,6);
    32de:	e3 e3       	ldi	r30, 0x33	; 51
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	82 95       	swap	r24
    32e6:	86 95       	lsr	r24
    32e8:	86 95       	lsr	r24
    32ea:	83 70       	andi	r24, 0x03	; 3
    32ec:	81 70       	andi	r24, 0x01	; 1
    32ee:	ea 81       	ldd	r30, Y+2	; 0x02
    32f0:	fb 81       	ldd	r31, Y+3	; 0x03
    32f2:	80 83       	st	Z, r24
    32f4:	5a c0       	rjmp	.+180    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PC7:
			{
				*pu8Data=GET_BIT(PINC_R,7);
    32f6:	e3 e3       	ldi	r30, 0x33	; 51
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	88 1f       	adc	r24, r24
    32fe:	88 27       	eor	r24, r24
    3300:	88 1f       	adc	r24, r24
    3302:	ea 81       	ldd	r30, Y+2	; 0x02
    3304:	fb 81       	ldd	r31, Y+3	; 0x03
    3306:	80 83       	st	Z, r24
    3308:	50 c0       	rjmp	.+160    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PD0:
			{
				*pu8Data=GET_BIT(PIND_R,0);
    330a:	e0 e3       	ldi	r30, 0x30	; 48
    330c:	f0 e0       	ldi	r31, 0x00	; 0
    330e:	80 81       	ld	r24, Z
    3310:	81 70       	andi	r24, 0x01	; 1
    3312:	ea 81       	ldd	r30, Y+2	; 0x02
    3314:	fb 81       	ldd	r31, Y+3	; 0x03
    3316:	80 83       	st	Z, r24
    3318:	48 c0       	rjmp	.+144    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PD1:
			{
				*pu8Data=GET_BIT(PIND_R,1);
    331a:	e0 e3       	ldi	r30, 0x30	; 48
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	86 95       	lsr	r24
    3322:	81 70       	andi	r24, 0x01	; 1
    3324:	ea 81       	ldd	r30, Y+2	; 0x02
    3326:	fb 81       	ldd	r31, Y+3	; 0x03
    3328:	80 83       	st	Z, r24
    332a:	3f c0       	rjmp	.+126    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PD2:
			{
				*pu8Data=GET_BIT(PIND_R,2);
    332c:	e0 e3       	ldi	r30, 0x30	; 48
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	86 95       	lsr	r24
    3334:	86 95       	lsr	r24
    3336:	81 70       	andi	r24, 0x01	; 1
    3338:	ea 81       	ldd	r30, Y+2	; 0x02
    333a:	fb 81       	ldd	r31, Y+3	; 0x03
    333c:	80 83       	st	Z, r24
    333e:	35 c0       	rjmp	.+106    	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PD3:
			{
				*pu8Data=GET_BIT(PIND_R,3);
    3340:	e0 e3       	ldi	r30, 0x30	; 48
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	86 95       	lsr	r24
    3348:	86 95       	lsr	r24
    334a:	86 95       	lsr	r24
    334c:	81 70       	andi	r24, 0x01	; 1
    334e:	ea 81       	ldd	r30, Y+2	; 0x02
    3350:	fb 81       	ldd	r31, Y+3	; 0x03
    3352:	80 83       	st	Z, r24
    3354:	2a c0       	rjmp	.+84     	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PD4:
			{
				*pu8Data=GET_BIT(PIND_R,4);
    3356:	e0 e3       	ldi	r30, 0x30	; 48
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	82 95       	swap	r24
    335e:	8f 70       	andi	r24, 0x0F	; 15
    3360:	81 70       	andi	r24, 0x01	; 1
    3362:	ea 81       	ldd	r30, Y+2	; 0x02
    3364:	fb 81       	ldd	r31, Y+3	; 0x03
    3366:	80 83       	st	Z, r24
    3368:	20 c0       	rjmp	.+64     	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PD5:
			{
				*pu8Data=GET_BIT(PIND_R,5);
    336a:	e0 e3       	ldi	r30, 0x30	; 48
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	80 81       	ld	r24, Z
    3370:	82 95       	swap	r24
    3372:	86 95       	lsr	r24
    3374:	87 70       	andi	r24, 0x07	; 7
    3376:	81 70       	andi	r24, 0x01	; 1
    3378:	ea 81       	ldd	r30, Y+2	; 0x02
    337a:	fb 81       	ldd	r31, Y+3	; 0x03
    337c:	80 83       	st	Z, r24
    337e:	15 c0       	rjmp	.+42     	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PD6:
			{
				*pu8Data=GET_BIT(PIND_R,6);
    3380:	e0 e3       	ldi	r30, 0x30	; 48
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	82 95       	swap	r24
    3388:	86 95       	lsr	r24
    338a:	86 95       	lsr	r24
    338c:	83 70       	andi	r24, 0x03	; 3
    338e:	81 70       	andi	r24, 0x01	; 1
    3390:	ea 81       	ldd	r30, Y+2	; 0x02
    3392:	fb 81       	ldd	r31, Y+3	; 0x03
    3394:	80 83       	st	Z, r24
    3396:	09 c0       	rjmp	.+18     	; 0x33aa <DIO_Read+0x448>
				break;
			}
			case PD7:
			{
				*pu8Data=GET_BIT(PIND_R,7);
    3398:	e0 e3       	ldi	r30, 0x30	; 48
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	88 1f       	adc	r24, r24
    33a0:	88 27       	eor	r24, r24
    33a2:	88 1f       	adc	r24, r24
    33a4:	ea 81       	ldd	r30, Y+2	; 0x02
    33a6:	fb 81       	ldd	r31, Y+3	; 0x03
    33a8:	80 83       	st	Z, r24
				break;
			}
		}
	return E_OK;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
}
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <DIO_Toogle>:

enuErrorStatus_t DIO_Toogle(uint8_t u8GroupId)
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	00 d0       	rcall	.+0      	; 0x33c2 <DIO_Toogle+0x6>
    33c2:	0f 92       	push	r0
    33c4:	cd b7       	in	r28, 0x3d	; 61
    33c6:	de b7       	in	r29, 0x3e	; 62
    33c8:	89 83       	std	Y+1, r24	; 0x01
		switch(astrDIOConfigParameters[u8GroupId].enuPinNo)
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	28 2f       	mov	r18, r24
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	c9 01       	movw	r24, r18
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	82 0f       	add	r24, r18
    33d8:	93 1f       	adc	r25, r19
    33da:	fc 01       	movw	r30, r24
    33dc:	e6 57       	subi	r30, 0x76	; 118
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	80 81       	ld	r24, Z
    33e2:	28 2f       	mov	r18, r24
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	3b 83       	std	Y+3, r19	; 0x03
    33e8:	2a 83       	std	Y+2, r18	; 0x02
    33ea:	8a 81       	ldd	r24, Y+2	; 0x02
    33ec:	9b 81       	ldd	r25, Y+3	; 0x03
    33ee:	8f 30       	cpi	r24, 0x0F	; 15
    33f0:	91 05       	cpc	r25, r1
    33f2:	09 f4       	brne	.+2      	; 0x33f6 <DIO_Toogle+0x3a>
    33f4:	48 c1       	rjmp	.+656    	; 0x3686 <DIO_Toogle+0x2ca>
    33f6:	2a 81       	ldd	r18, Y+2	; 0x02
    33f8:	3b 81       	ldd	r19, Y+3	; 0x03
    33fa:	20 31       	cpi	r18, 0x10	; 16
    33fc:	31 05       	cpc	r19, r1
    33fe:	0c f0       	brlt	.+2      	; 0x3402 <DIO_Toogle+0x46>
    3400:	5a c0       	rjmp	.+180    	; 0x34b6 <DIO_Toogle+0xfa>
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	9b 81       	ldd	r25, Y+3	; 0x03
    3406:	87 30       	cpi	r24, 0x07	; 7
    3408:	91 05       	cpc	r25, r1
    340a:	09 f4       	brne	.+2      	; 0x340e <DIO_Toogle+0x52>
    340c:	f4 c0       	rjmp	.+488    	; 0x35f6 <DIO_Toogle+0x23a>
    340e:	2a 81       	ldd	r18, Y+2	; 0x02
    3410:	3b 81       	ldd	r19, Y+3	; 0x03
    3412:	28 30       	cpi	r18, 0x08	; 8
    3414:	31 05       	cpc	r19, r1
    3416:	54 f5       	brge	.+84     	; 0x346c <DIO_Toogle+0xb0>
    3418:	8a 81       	ldd	r24, Y+2	; 0x02
    341a:	9b 81       	ldd	r25, Y+3	; 0x03
    341c:	83 30       	cpi	r24, 0x03	; 3
    341e:	91 05       	cpc	r25, r1
    3420:	09 f4       	brne	.+2      	; 0x3424 <DIO_Toogle+0x68>
    3422:	c5 c0       	rjmp	.+394    	; 0x35ae <DIO_Toogle+0x1f2>
    3424:	2a 81       	ldd	r18, Y+2	; 0x02
    3426:	3b 81       	ldd	r19, Y+3	; 0x03
    3428:	24 30       	cpi	r18, 0x04	; 4
    342a:	31 05       	cpc	r19, r1
    342c:	94 f4       	brge	.+36     	; 0x3452 <DIO_Toogle+0x96>
    342e:	8a 81       	ldd	r24, Y+2	; 0x02
    3430:	9b 81       	ldd	r25, Y+3	; 0x03
    3432:	81 30       	cpi	r24, 0x01	; 1
    3434:	91 05       	cpc	r25, r1
    3436:	09 f4       	brne	.+2      	; 0x343a <DIO_Toogle+0x7e>
    3438:	a8 c0       	rjmp	.+336    	; 0x358a <DIO_Toogle+0x1ce>
    343a:	2a 81       	ldd	r18, Y+2	; 0x02
    343c:	3b 81       	ldd	r19, Y+3	; 0x03
    343e:	22 30       	cpi	r18, 0x02	; 2
    3440:	31 05       	cpc	r19, r1
    3442:	0c f0       	brlt	.+2      	; 0x3446 <DIO_Toogle+0x8a>
    3444:	ab c0       	rjmp	.+342    	; 0x359c <DIO_Toogle+0x1e0>
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	9b 81       	ldd	r25, Y+3	; 0x03
    344a:	00 97       	sbiw	r24, 0x00	; 0
    344c:	09 f4       	brne	.+2      	; 0x3450 <DIO_Toogle+0x94>
    344e:	94 c0       	rjmp	.+296    	; 0x3578 <DIO_Toogle+0x1bc>
    3450:	b2 c1       	rjmp	.+868    	; 0x37b6 <DIO_Toogle+0x3fa>
    3452:	2a 81       	ldd	r18, Y+2	; 0x02
    3454:	3b 81       	ldd	r19, Y+3	; 0x03
    3456:	25 30       	cpi	r18, 0x05	; 5
    3458:	31 05       	cpc	r19, r1
    345a:	09 f4       	brne	.+2      	; 0x345e <DIO_Toogle+0xa2>
    345c:	ba c0       	rjmp	.+372    	; 0x35d2 <DIO_Toogle+0x216>
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	9b 81       	ldd	r25, Y+3	; 0x03
    3462:	86 30       	cpi	r24, 0x06	; 6
    3464:	91 05       	cpc	r25, r1
    3466:	0c f0       	brlt	.+2      	; 0x346a <DIO_Toogle+0xae>
    3468:	bd c0       	rjmp	.+378    	; 0x35e4 <DIO_Toogle+0x228>
    346a:	aa c0       	rjmp	.+340    	; 0x35c0 <DIO_Toogle+0x204>
    346c:	2a 81       	ldd	r18, Y+2	; 0x02
    346e:	3b 81       	ldd	r19, Y+3	; 0x03
    3470:	2b 30       	cpi	r18, 0x0B	; 11
    3472:	31 05       	cpc	r19, r1
    3474:	09 f4       	brne	.+2      	; 0x3478 <DIO_Toogle+0xbc>
    3476:	e3 c0       	rjmp	.+454    	; 0x363e <DIO_Toogle+0x282>
    3478:	8a 81       	ldd	r24, Y+2	; 0x02
    347a:	9b 81       	ldd	r25, Y+3	; 0x03
    347c:	8c 30       	cpi	r24, 0x0C	; 12
    347e:	91 05       	cpc	r25, r1
    3480:	6c f4       	brge	.+26     	; 0x349c <DIO_Toogle+0xe0>
    3482:	2a 81       	ldd	r18, Y+2	; 0x02
    3484:	3b 81       	ldd	r19, Y+3	; 0x03
    3486:	29 30       	cpi	r18, 0x09	; 9
    3488:	31 05       	cpc	r19, r1
    348a:	09 f4       	brne	.+2      	; 0x348e <DIO_Toogle+0xd2>
    348c:	c6 c0       	rjmp	.+396    	; 0x361a <DIO_Toogle+0x25e>
    348e:	8a 81       	ldd	r24, Y+2	; 0x02
    3490:	9b 81       	ldd	r25, Y+3	; 0x03
    3492:	8a 30       	cpi	r24, 0x0A	; 10
    3494:	91 05       	cpc	r25, r1
    3496:	0c f0       	brlt	.+2      	; 0x349a <DIO_Toogle+0xde>
    3498:	c9 c0       	rjmp	.+402    	; 0x362c <DIO_Toogle+0x270>
    349a:	b6 c0       	rjmp	.+364    	; 0x3608 <DIO_Toogle+0x24c>
    349c:	2a 81       	ldd	r18, Y+2	; 0x02
    349e:	3b 81       	ldd	r19, Y+3	; 0x03
    34a0:	2d 30       	cpi	r18, 0x0D	; 13
    34a2:	31 05       	cpc	r19, r1
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <DIO_Toogle+0xec>
    34a6:	dd c0       	rjmp	.+442    	; 0x3662 <DIO_Toogle+0x2a6>
    34a8:	8a 81       	ldd	r24, Y+2	; 0x02
    34aa:	9b 81       	ldd	r25, Y+3	; 0x03
    34ac:	8e 30       	cpi	r24, 0x0E	; 14
    34ae:	91 05       	cpc	r25, r1
    34b0:	0c f0       	brlt	.+2      	; 0x34b4 <DIO_Toogle+0xf8>
    34b2:	e0 c0       	rjmp	.+448    	; 0x3674 <DIO_Toogle+0x2b8>
    34b4:	cd c0       	rjmp	.+410    	; 0x3650 <DIO_Toogle+0x294>
    34b6:	2a 81       	ldd	r18, Y+2	; 0x02
    34b8:	3b 81       	ldd	r19, Y+3	; 0x03
    34ba:	27 31       	cpi	r18, 0x17	; 23
    34bc:	31 05       	cpc	r19, r1
    34be:	09 f4       	brne	.+2      	; 0x34c2 <DIO_Toogle+0x106>
    34c0:	2a c1       	rjmp	.+596    	; 0x3716 <DIO_Toogle+0x35a>
    34c2:	8a 81       	ldd	r24, Y+2	; 0x02
    34c4:	9b 81       	ldd	r25, Y+3	; 0x03
    34c6:	88 31       	cpi	r24, 0x18	; 24
    34c8:	91 05       	cpc	r25, r1
    34ca:	2c f5       	brge	.+74     	; 0x3516 <DIO_Toogle+0x15a>
    34cc:	2a 81       	ldd	r18, Y+2	; 0x02
    34ce:	3b 81       	ldd	r19, Y+3	; 0x03
    34d0:	23 31       	cpi	r18, 0x13	; 19
    34d2:	31 05       	cpc	r19, r1
    34d4:	09 f4       	brne	.+2      	; 0x34d8 <DIO_Toogle+0x11c>
    34d6:	fb c0       	rjmp	.+502    	; 0x36ce <DIO_Toogle+0x312>
    34d8:	8a 81       	ldd	r24, Y+2	; 0x02
    34da:	9b 81       	ldd	r25, Y+3	; 0x03
    34dc:	84 31       	cpi	r24, 0x14	; 20
    34de:	91 05       	cpc	r25, r1
    34e0:	6c f4       	brge	.+26     	; 0x34fc <DIO_Toogle+0x140>
    34e2:	2a 81       	ldd	r18, Y+2	; 0x02
    34e4:	3b 81       	ldd	r19, Y+3	; 0x03
    34e6:	21 31       	cpi	r18, 0x11	; 17
    34e8:	31 05       	cpc	r19, r1
    34ea:	09 f4       	brne	.+2      	; 0x34ee <DIO_Toogle+0x132>
    34ec:	de c0       	rjmp	.+444    	; 0x36aa <DIO_Toogle+0x2ee>
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	82 31       	cpi	r24, 0x12	; 18
    34f4:	91 05       	cpc	r25, r1
    34f6:	0c f0       	brlt	.+2      	; 0x34fa <DIO_Toogle+0x13e>
    34f8:	e1 c0       	rjmp	.+450    	; 0x36bc <DIO_Toogle+0x300>
    34fa:	ce c0       	rjmp	.+412    	; 0x3698 <DIO_Toogle+0x2dc>
    34fc:	2a 81       	ldd	r18, Y+2	; 0x02
    34fe:	3b 81       	ldd	r19, Y+3	; 0x03
    3500:	25 31       	cpi	r18, 0x15	; 21
    3502:	31 05       	cpc	r19, r1
    3504:	09 f4       	brne	.+2      	; 0x3508 <DIO_Toogle+0x14c>
    3506:	f5 c0       	rjmp	.+490    	; 0x36f2 <DIO_Toogle+0x336>
    3508:	8a 81       	ldd	r24, Y+2	; 0x02
    350a:	9b 81       	ldd	r25, Y+3	; 0x03
    350c:	86 31       	cpi	r24, 0x16	; 22
    350e:	91 05       	cpc	r25, r1
    3510:	0c f0       	brlt	.+2      	; 0x3514 <DIO_Toogle+0x158>
    3512:	f8 c0       	rjmp	.+496    	; 0x3704 <DIO_Toogle+0x348>
    3514:	e5 c0       	rjmp	.+458    	; 0x36e0 <DIO_Toogle+0x324>
    3516:	2a 81       	ldd	r18, Y+2	; 0x02
    3518:	3b 81       	ldd	r19, Y+3	; 0x03
    351a:	2b 31       	cpi	r18, 0x1B	; 27
    351c:	31 05       	cpc	r19, r1
    351e:	09 f4       	brne	.+2      	; 0x3522 <DIO_Toogle+0x166>
    3520:	1e c1       	rjmp	.+572    	; 0x375e <DIO_Toogle+0x3a2>
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	9b 81       	ldd	r25, Y+3	; 0x03
    3526:	8c 31       	cpi	r24, 0x1C	; 28
    3528:	91 05       	cpc	r25, r1
    352a:	6c f4       	brge	.+26     	; 0x3546 <DIO_Toogle+0x18a>
    352c:	2a 81       	ldd	r18, Y+2	; 0x02
    352e:	3b 81       	ldd	r19, Y+3	; 0x03
    3530:	29 31       	cpi	r18, 0x19	; 25
    3532:	31 05       	cpc	r19, r1
    3534:	09 f4       	brne	.+2      	; 0x3538 <DIO_Toogle+0x17c>
    3536:	01 c1       	rjmp	.+514    	; 0x373a <DIO_Toogle+0x37e>
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	9b 81       	ldd	r25, Y+3	; 0x03
    353c:	8a 31       	cpi	r24, 0x1A	; 26
    353e:	91 05       	cpc	r25, r1
    3540:	0c f0       	brlt	.+2      	; 0x3544 <DIO_Toogle+0x188>
    3542:	04 c1       	rjmp	.+520    	; 0x374c <DIO_Toogle+0x390>
    3544:	f1 c0       	rjmp	.+482    	; 0x3728 <DIO_Toogle+0x36c>
    3546:	2a 81       	ldd	r18, Y+2	; 0x02
    3548:	3b 81       	ldd	r19, Y+3	; 0x03
    354a:	2d 31       	cpi	r18, 0x1D	; 29
    354c:	31 05       	cpc	r19, r1
    354e:	09 f4       	brne	.+2      	; 0x3552 <DIO_Toogle+0x196>
    3550:	18 c1       	rjmp	.+560    	; 0x3782 <DIO_Toogle+0x3c6>
    3552:	8a 81       	ldd	r24, Y+2	; 0x02
    3554:	9b 81       	ldd	r25, Y+3	; 0x03
    3556:	8d 31       	cpi	r24, 0x1D	; 29
    3558:	91 05       	cpc	r25, r1
    355a:	0c f4       	brge	.+2      	; 0x355e <DIO_Toogle+0x1a2>
    355c:	09 c1       	rjmp	.+530    	; 0x3770 <DIO_Toogle+0x3b4>
    355e:	2a 81       	ldd	r18, Y+2	; 0x02
    3560:	3b 81       	ldd	r19, Y+3	; 0x03
    3562:	2e 31       	cpi	r18, 0x1E	; 30
    3564:	31 05       	cpc	r19, r1
    3566:	09 f4       	brne	.+2      	; 0x356a <DIO_Toogle+0x1ae>
    3568:	15 c1       	rjmp	.+554    	; 0x3794 <DIO_Toogle+0x3d8>
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	9b 81       	ldd	r25, Y+3	; 0x03
    356e:	8f 31       	cpi	r24, 0x1F	; 31
    3570:	91 05       	cpc	r25, r1
    3572:	09 f4       	brne	.+2      	; 0x3576 <DIO_Toogle+0x1ba>
    3574:	18 c1       	rjmp	.+560    	; 0x37a6 <DIO_Toogle+0x3ea>
    3576:	1f c1       	rjmp	.+574    	; 0x37b6 <DIO_Toogle+0x3fa>
		{
			case PA0:
			{
				TOG_BIT(PORTA_R,PA0);
    3578:	ab e3       	ldi	r26, 0x3B	; 59
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	eb e3       	ldi	r30, 0x3B	; 59
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	90 81       	ld	r25, Z
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	89 27       	eor	r24, r25
    3586:	8c 93       	st	X, r24
    3588:	16 c1       	rjmp	.+556    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PA1:
			{
				TOG_BIT(PORTA_R,PA1);
    358a:	ab e3       	ldi	r26, 0x3B	; 59
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	eb e3       	ldi	r30, 0x3B	; 59
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	90 81       	ld	r25, Z
    3594:	82 e0       	ldi	r24, 0x02	; 2
    3596:	89 27       	eor	r24, r25
    3598:	8c 93       	st	X, r24
    359a:	0d c1       	rjmp	.+538    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PA2:
			{
				TOG_BIT(PORTA_R,PA2);
    359c:	ab e3       	ldi	r26, 0x3B	; 59
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	eb e3       	ldi	r30, 0x3B	; 59
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	90 81       	ld	r25, Z
    35a6:	84 e0       	ldi	r24, 0x04	; 4
    35a8:	89 27       	eor	r24, r25
    35aa:	8c 93       	st	X, r24
    35ac:	04 c1       	rjmp	.+520    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PA3:
			{
				TOG_BIT(PORTA_R,PA3);
    35ae:	ab e3       	ldi	r26, 0x3B	; 59
    35b0:	b0 e0       	ldi	r27, 0x00	; 0
    35b2:	eb e3       	ldi	r30, 0x3B	; 59
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	90 81       	ld	r25, Z
    35b8:	88 e0       	ldi	r24, 0x08	; 8
    35ba:	89 27       	eor	r24, r25
    35bc:	8c 93       	st	X, r24
    35be:	fb c0       	rjmp	.+502    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PA4:
			{
				TOG_BIT(PORTA_R,PA4);
    35c0:	ab e3       	ldi	r26, 0x3B	; 59
    35c2:	b0 e0       	ldi	r27, 0x00	; 0
    35c4:	eb e3       	ldi	r30, 0x3B	; 59
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	90 81       	ld	r25, Z
    35ca:	80 e1       	ldi	r24, 0x10	; 16
    35cc:	89 27       	eor	r24, r25
    35ce:	8c 93       	st	X, r24
    35d0:	f2 c0       	rjmp	.+484    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PA5:
			{
				TOG_BIT(PORTA_R,PA5);
    35d2:	ab e3       	ldi	r26, 0x3B	; 59
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	eb e3       	ldi	r30, 0x3B	; 59
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	90 81       	ld	r25, Z
    35dc:	80 e2       	ldi	r24, 0x20	; 32
    35de:	89 27       	eor	r24, r25
    35e0:	8c 93       	st	X, r24
    35e2:	e9 c0       	rjmp	.+466    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PA6:
			{
				TOG_BIT(PORTA_R,PA2);
    35e4:	ab e3       	ldi	r26, 0x3B	; 59
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	eb e3       	ldi	r30, 0x3B	; 59
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	90 81       	ld	r25, Z
    35ee:	84 e0       	ldi	r24, 0x04	; 4
    35f0:	89 27       	eor	r24, r25
    35f2:	8c 93       	st	X, r24
    35f4:	e0 c0       	rjmp	.+448    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PA7:
			{
				TOG_BIT(PORTA_R,PA7);
    35f6:	ab e3       	ldi	r26, 0x3B	; 59
    35f8:	b0 e0       	ldi	r27, 0x00	; 0
    35fa:	eb e3       	ldi	r30, 0x3B	; 59
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	90 81       	ld	r25, Z
    3600:	80 e8       	ldi	r24, 0x80	; 128
    3602:	89 27       	eor	r24, r25
    3604:	8c 93       	st	X, r24
    3606:	d7 c0       	rjmp	.+430    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PB0:
			{
				TOG_BIT(PORTB_R,0);
    3608:	a8 e3       	ldi	r26, 0x38	; 56
    360a:	b0 e0       	ldi	r27, 0x00	; 0
    360c:	e8 e3       	ldi	r30, 0x38	; 56
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	90 81       	ld	r25, Z
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	89 27       	eor	r24, r25
    3616:	8c 93       	st	X, r24
    3618:	ce c0       	rjmp	.+412    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PB1:
			{
				TOG_BIT(PORTB_R,1);
    361a:	a8 e3       	ldi	r26, 0x38	; 56
    361c:	b0 e0       	ldi	r27, 0x00	; 0
    361e:	e8 e3       	ldi	r30, 0x38	; 56
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	90 81       	ld	r25, Z
    3624:	82 e0       	ldi	r24, 0x02	; 2
    3626:	89 27       	eor	r24, r25
    3628:	8c 93       	st	X, r24
    362a:	c5 c0       	rjmp	.+394    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PB2:
			{
				TOG_BIT(PORTB_R,2);
    362c:	a8 e3       	ldi	r26, 0x38	; 56
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	e8 e3       	ldi	r30, 0x38	; 56
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	90 81       	ld	r25, Z
    3636:	84 e0       	ldi	r24, 0x04	; 4
    3638:	89 27       	eor	r24, r25
    363a:	8c 93       	st	X, r24
    363c:	bc c0       	rjmp	.+376    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PB3:
			{
				TOG_BIT(PORTB_R,3);
    363e:	a8 e3       	ldi	r26, 0x38	; 56
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	e8 e3       	ldi	r30, 0x38	; 56
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	90 81       	ld	r25, Z
    3648:	88 e0       	ldi	r24, 0x08	; 8
    364a:	89 27       	eor	r24, r25
    364c:	8c 93       	st	X, r24
    364e:	b3 c0       	rjmp	.+358    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PB4:
			{
				TOG_BIT(PORTB_R,4);
    3650:	a8 e3       	ldi	r26, 0x38	; 56
    3652:	b0 e0       	ldi	r27, 0x00	; 0
    3654:	e8 e3       	ldi	r30, 0x38	; 56
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	90 81       	ld	r25, Z
    365a:	80 e1       	ldi	r24, 0x10	; 16
    365c:	89 27       	eor	r24, r25
    365e:	8c 93       	st	X, r24
    3660:	aa c0       	rjmp	.+340    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PB5:
			{
				TOG_BIT(PORTB_R,5);
    3662:	a8 e3       	ldi	r26, 0x38	; 56
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	e8 e3       	ldi	r30, 0x38	; 56
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	90 81       	ld	r25, Z
    366c:	80 e2       	ldi	r24, 0x20	; 32
    366e:	89 27       	eor	r24, r25
    3670:	8c 93       	st	X, r24
    3672:	a1 c0       	rjmp	.+322    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PB6:
			{
				TOG_BIT(PORTB_R,6);
    3674:	a8 e3       	ldi	r26, 0x38	; 56
    3676:	b0 e0       	ldi	r27, 0x00	; 0
    3678:	e8 e3       	ldi	r30, 0x38	; 56
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	90 81       	ld	r25, Z
    367e:	80 e4       	ldi	r24, 0x40	; 64
    3680:	89 27       	eor	r24, r25
    3682:	8c 93       	st	X, r24
    3684:	98 c0       	rjmp	.+304    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PB7:
			{
				TOG_BIT(PORTB_R,7);
    3686:	a8 e3       	ldi	r26, 0x38	; 56
    3688:	b0 e0       	ldi	r27, 0x00	; 0
    368a:	e8 e3       	ldi	r30, 0x38	; 56
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	90 81       	ld	r25, Z
    3690:	80 e8       	ldi	r24, 0x80	; 128
    3692:	89 27       	eor	r24, r25
    3694:	8c 93       	st	X, r24
    3696:	8f c0       	rjmp	.+286    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PC0:
			{
				TOG_BIT(PORTC_R,0);
    3698:	a5 e3       	ldi	r26, 0x35	; 53
    369a:	b0 e0       	ldi	r27, 0x00	; 0
    369c:	e5 e3       	ldi	r30, 0x35	; 53
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	90 81       	ld	r25, Z
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	89 27       	eor	r24, r25
    36a6:	8c 93       	st	X, r24
    36a8:	86 c0       	rjmp	.+268    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PC1:
			{
				TOG_BIT(PORTC_R,1);
    36aa:	a5 e3       	ldi	r26, 0x35	; 53
    36ac:	b0 e0       	ldi	r27, 0x00	; 0
    36ae:	e5 e3       	ldi	r30, 0x35	; 53
    36b0:	f0 e0       	ldi	r31, 0x00	; 0
    36b2:	90 81       	ld	r25, Z
    36b4:	82 e0       	ldi	r24, 0x02	; 2
    36b6:	89 27       	eor	r24, r25
    36b8:	8c 93       	st	X, r24
    36ba:	7d c0       	rjmp	.+250    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PC2:
			{
				TOG_BIT(PORTC_R,2);
    36bc:	a5 e3       	ldi	r26, 0x35	; 53
    36be:	b0 e0       	ldi	r27, 0x00	; 0
    36c0:	e5 e3       	ldi	r30, 0x35	; 53
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	90 81       	ld	r25, Z
    36c6:	84 e0       	ldi	r24, 0x04	; 4
    36c8:	89 27       	eor	r24, r25
    36ca:	8c 93       	st	X, r24
    36cc:	74 c0       	rjmp	.+232    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PC3:
			{
				TOG_BIT(PORTC_R,3);
    36ce:	a5 e3       	ldi	r26, 0x35	; 53
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	e5 e3       	ldi	r30, 0x35	; 53
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	90 81       	ld	r25, Z
    36d8:	88 e0       	ldi	r24, 0x08	; 8
    36da:	89 27       	eor	r24, r25
    36dc:	8c 93       	st	X, r24
    36de:	6b c0       	rjmp	.+214    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PC4:
			{
				TOG_BIT(PORTC_R,4);
    36e0:	a5 e3       	ldi	r26, 0x35	; 53
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	e5 e3       	ldi	r30, 0x35	; 53
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	90 81       	ld	r25, Z
    36ea:	80 e1       	ldi	r24, 0x10	; 16
    36ec:	89 27       	eor	r24, r25
    36ee:	8c 93       	st	X, r24
    36f0:	62 c0       	rjmp	.+196    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PC5:
			{
				TOG_BIT(PORTC_R,5);
    36f2:	a5 e3       	ldi	r26, 0x35	; 53
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	e5 e3       	ldi	r30, 0x35	; 53
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	90 81       	ld	r25, Z
    36fc:	80 e2       	ldi	r24, 0x20	; 32
    36fe:	89 27       	eor	r24, r25
    3700:	8c 93       	st	X, r24
    3702:	59 c0       	rjmp	.+178    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PC6:
			{
				TOG_BIT(PORTC_R,6);
    3704:	a5 e3       	ldi	r26, 0x35	; 53
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	e5 e3       	ldi	r30, 0x35	; 53
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	90 81       	ld	r25, Z
    370e:	80 e4       	ldi	r24, 0x40	; 64
    3710:	89 27       	eor	r24, r25
    3712:	8c 93       	st	X, r24
    3714:	50 c0       	rjmp	.+160    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PC7:
			{
				TOG_BIT(PORTC_R,7);
    3716:	a5 e3       	ldi	r26, 0x35	; 53
    3718:	b0 e0       	ldi	r27, 0x00	; 0
    371a:	e5 e3       	ldi	r30, 0x35	; 53
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	90 81       	ld	r25, Z
    3720:	80 e8       	ldi	r24, 0x80	; 128
    3722:	89 27       	eor	r24, r25
    3724:	8c 93       	st	X, r24
    3726:	47 c0       	rjmp	.+142    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PD0:
			{
				TOG_BIT(PORTD_R,0);
    3728:	a2 e3       	ldi	r26, 0x32	; 50
    372a:	b0 e0       	ldi	r27, 0x00	; 0
    372c:	e2 e3       	ldi	r30, 0x32	; 50
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	90 81       	ld	r25, Z
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	89 27       	eor	r24, r25
    3736:	8c 93       	st	X, r24
    3738:	3e c0       	rjmp	.+124    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PD1:
			{
				TOG_BIT(PORTD_R,1);
    373a:	a2 e3       	ldi	r26, 0x32	; 50
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e2 e3       	ldi	r30, 0x32	; 50
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	90 81       	ld	r25, Z
    3744:	82 e0       	ldi	r24, 0x02	; 2
    3746:	89 27       	eor	r24, r25
    3748:	8c 93       	st	X, r24
    374a:	35 c0       	rjmp	.+106    	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PD2:
			{
				TOG_BIT(PORTD_R,2);
    374c:	a2 e3       	ldi	r26, 0x32	; 50
    374e:	b0 e0       	ldi	r27, 0x00	; 0
    3750:	e2 e3       	ldi	r30, 0x32	; 50
    3752:	f0 e0       	ldi	r31, 0x00	; 0
    3754:	90 81       	ld	r25, Z
    3756:	84 e0       	ldi	r24, 0x04	; 4
    3758:	89 27       	eor	r24, r25
    375a:	8c 93       	st	X, r24
    375c:	2c c0       	rjmp	.+88     	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PD3:
			{
				TOG_BIT(PORTD_R,3);
    375e:	a2 e3       	ldi	r26, 0x32	; 50
    3760:	b0 e0       	ldi	r27, 0x00	; 0
    3762:	e2 e3       	ldi	r30, 0x32	; 50
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	90 81       	ld	r25, Z
    3768:	88 e0       	ldi	r24, 0x08	; 8
    376a:	89 27       	eor	r24, r25
    376c:	8c 93       	st	X, r24
    376e:	23 c0       	rjmp	.+70     	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PD4:
			{
				TOG_BIT(PORTD_R,4);
    3770:	a2 e3       	ldi	r26, 0x32	; 50
    3772:	b0 e0       	ldi	r27, 0x00	; 0
    3774:	e2 e3       	ldi	r30, 0x32	; 50
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	90 81       	ld	r25, Z
    377a:	80 e1       	ldi	r24, 0x10	; 16
    377c:	89 27       	eor	r24, r25
    377e:	8c 93       	st	X, r24
    3780:	1a c0       	rjmp	.+52     	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PD5:
			{
				TOG_BIT(PORTD_R,5);
    3782:	a2 e3       	ldi	r26, 0x32	; 50
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	e2 e3       	ldi	r30, 0x32	; 50
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	90 81       	ld	r25, Z
    378c:	80 e2       	ldi	r24, 0x20	; 32
    378e:	89 27       	eor	r24, r25
    3790:	8c 93       	st	X, r24
    3792:	11 c0       	rjmp	.+34     	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PD6:
			{
				TOG_BIT(PORTD_R,6);
    3794:	a2 e3       	ldi	r26, 0x32	; 50
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	e2 e3       	ldi	r30, 0x32	; 50
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	90 81       	ld	r25, Z
    379e:	80 e4       	ldi	r24, 0x40	; 64
    37a0:	89 27       	eor	r24, r25
    37a2:	8c 93       	st	X, r24
    37a4:	08 c0       	rjmp	.+16     	; 0x37b6 <DIO_Toogle+0x3fa>
				break;
			}
			case PD7:
			{
				TOG_BIT(PORTD_R,7);
    37a6:	a2 e3       	ldi	r26, 0x32	; 50
    37a8:	b0 e0       	ldi	r27, 0x00	; 0
    37aa:	e2 e3       	ldi	r30, 0x32	; 50
    37ac:	f0 e0       	ldi	r31, 0x00	; 0
    37ae:	90 81       	ld	r25, Z
    37b0:	80 e8       	ldi	r24, 0x80	; 128
    37b2:	89 27       	eor	r24, r25
    37b4:	8c 93       	st	X, r24
				break;
			}
		}
		return 0;	
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	0f 90       	pop	r0
    37ba:	0f 90       	pop	r0
    37bc:	0f 90       	pop	r0
    37be:	cf 91       	pop	r28
    37c0:	df 91       	pop	r29
    37c2:	08 95       	ret

000037c4 <ADC_Init1>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : ADC initialization part 1
*************************************************************/
enuErrorStatus_t ADC_Init1(uint8_t u8VrefCpy,uint8_t u8L_R_Adjustcpy,uint8_t u8AutoTriggercpy,uint8_t u8InterruptCpy)
{
    37c4:	df 93       	push	r29
    37c6:	cf 93       	push	r28
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <ADC_Init1+0x6>
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <ADC_Init1+0x8>
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	89 83       	std	Y+1, r24	; 0x01
    37d2:	6a 83       	std	Y+2, r22	; 0x02
    37d4:	4b 83       	std	Y+3, r20	; 0x03
    37d6:	2c 83       	std	Y+4, r18	; 0x04

	SET_BIT(ADCSRA_R,ADEN_B); //enable ADC
    37d8:	a6 e2       	ldi	r26, 0x26	; 38
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	e6 e2       	ldi	r30, 0x26	; 38
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	80 81       	ld	r24, Z
    37e2:	80 68       	ori	r24, 0x80	; 128
    37e4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_R,ADIF_B); //clear the flag
    37e6:	a6 e2       	ldi	r26, 0x26	; 38
    37e8:	b0 e0       	ldi	r27, 0x00	; 0
    37ea:	e6 e2       	ldi	r30, 0x26	; 38
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	80 61       	ori	r24, 0x10	; 16
    37f2:	8c 93       	st	X, r24

	/* Select Vref*/
	if(u8VrefCpy == Vref_external)
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	82 30       	cpi	r24, 0x02	; 2
    37f8:	79 f4       	brne	.+30     	; 0x3818 <ADC_Init1+0x54>
	{
		CLR_BIT(ADMUX_R,REFS1_B);
    37fa:	a7 e2       	ldi	r26, 0x27	; 39
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	e7 e2       	ldi	r30, 0x27	; 39
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	8f 77       	andi	r24, 0x7F	; 127
    3806:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,REFS0_B);
    3808:	a7 e2       	ldi	r26, 0x27	; 39
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	e7 e2       	ldi	r30, 0x27	; 39
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	80 81       	ld	r24, Z
    3812:	8f 7b       	andi	r24, 0xBF	; 191
    3814:	8c 93       	st	X, r24
    3816:	23 c0       	rjmp	.+70     	; 0x385e <ADC_Init1+0x9a>
	}else if(u8VrefCpy == Vref_vcc)
    3818:	89 81       	ldd	r24, Y+1	; 0x01
    381a:	88 23       	and	r24, r24
    381c:	79 f4       	brne	.+30     	; 0x383c <ADC_Init1+0x78>
	{
		CLR_BIT(ADMUX_R,REFS1_B);
    381e:	a7 e2       	ldi	r26, 0x27	; 39
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	e7 e2       	ldi	r30, 0x27	; 39
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	80 81       	ld	r24, Z
    3828:	8f 77       	andi	r24, 0x7F	; 127
    382a:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,REFS0_B);
    382c:	a7 e2       	ldi	r26, 0x27	; 39
    382e:	b0 e0       	ldi	r27, 0x00	; 0
    3830:	e7 e2       	ldi	r30, 0x27	; 39
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	80 81       	ld	r24, Z
    3836:	80 64       	ori	r24, 0x40	; 64
    3838:	8c 93       	st	X, r24
    383a:	11 c0       	rjmp	.+34     	; 0x385e <ADC_Init1+0x9a>
//		ADMUX_R |= (1<<REFS0_B);
	}else if(u8VrefCpy == Vref_internal)
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	81 30       	cpi	r24, 0x01	; 1
    3840:	71 f4       	brne	.+28     	; 0x385e <ADC_Init1+0x9a>
	{
		SET_BIT(ADMUX_R,REFS1_B);
    3842:	a7 e2       	ldi	r26, 0x27	; 39
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	e7 e2       	ldi	r30, 0x27	; 39
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	80 81       	ld	r24, Z
    384c:	80 68       	ori	r24, 0x80	; 128
    384e:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,REFS0_B);
    3850:	a7 e2       	ldi	r26, 0x27	; 39
    3852:	b0 e0       	ldi	r27, 0x00	; 0
    3854:	e7 e2       	ldi	r30, 0x27	; 39
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	80 81       	ld	r24, Z
    385a:	80 64       	ori	r24, 0x40	; 64
    385c:	8c 93       	st	X, r24
//		ADMUX_R |= (1<<REFS1_B);
//		ADMUX_R |= (1<<REFS0_B);
	}

	/* Right or left adjusted digital value */
	if(u8L_R_Adjustcpy == Left_Adjusted)
    385e:	8a 81       	ldd	r24, Y+2	; 0x02
    3860:	88 23       	and	r24, r24
    3862:	51 f4       	brne	.+20     	; 0x3878 <ADC_Init1+0xb4>
	{
		SET_BIT(ADMUX_R,ADLAR_B);
    3864:	a7 e2       	ldi	r26, 0x27	; 39
    3866:	b0 e0       	ldi	r27, 0x00	; 0
    3868:	e7 e2       	ldi	r30, 0x27	; 39
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	80 81       	ld	r24, Z
    386e:	80 62       	ori	r24, 0x20	; 32
    3870:	8c 93       	st	X, r24
		gAdjust = Left_Adjusted;
    3872:	10 92 a0 00 	sts	0x00A0, r1
    3876:	0d c0       	rjmp	.+26     	; 0x3892 <ADC_Init1+0xce>
	}else if(u8L_R_Adjustcpy == Right_Adjusted)
    3878:	8a 81       	ldd	r24, Y+2	; 0x02
    387a:	81 30       	cpi	r24, 0x01	; 1
    387c:	51 f4       	brne	.+20     	; 0x3892 <ADC_Init1+0xce>
	{
		CLR_BIT(ADMUX_R,ADLAR_B);
    387e:	a7 e2       	ldi	r26, 0x27	; 39
    3880:	b0 e0       	ldi	r27, 0x00	; 0
    3882:	e7 e2       	ldi	r30, 0x27	; 39
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	80 81       	ld	r24, Z
    3888:	8f 7d       	andi	r24, 0xDF	; 223
    388a:	8c 93       	st	X, r24
		gAdjust = Right_Adjusted;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	80 93 a0 00 	sts	0x00A0, r24
	}

	/* Enable or disable autotrigger */
	if(u8AutoTriggercpy == Disable_AutoTrigger)
    3892:	8b 81       	ldd	r24, Y+3	; 0x03
    3894:	88 23       	and	r24, r24
    3896:	41 f4       	brne	.+16     	; 0x38a8 <ADC_Init1+0xe4>
	{
		CLR_BIT(ADCSRA_R,ADATE_B);
    3898:	a6 e2       	ldi	r26, 0x26	; 38
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	e6 e2       	ldi	r30, 0x26	; 38
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	80 81       	ld	r24, Z
    38a2:	8f 7d       	andi	r24, 0xDF	; 223
    38a4:	8c 93       	st	X, r24
    38a6:	0a c0       	rjmp	.+20     	; 0x38bc <ADC_Init1+0xf8>
	}else if(u8AutoTriggercpy == Enable_AutoTrigger)
    38a8:	8b 81       	ldd	r24, Y+3	; 0x03
    38aa:	81 30       	cpi	r24, 0x01	; 1
    38ac:	39 f4       	brne	.+14     	; 0x38bc <ADC_Init1+0xf8>
	{
		SET_BIT(ADCSRA_R,ADATE_B);
    38ae:	a6 e2       	ldi	r26, 0x26	; 38
    38b0:	b0 e0       	ldi	r27, 0x00	; 0
    38b2:	e6 e2       	ldi	r30, 0x26	; 38
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	80 81       	ld	r24, Z
    38b8:	80 62       	ori	r24, 0x20	; 32
    38ba:	8c 93       	st	X, r24
//		ADCSRA_R |= (1<<ADATE_B);
	}

	/* Enable or disable the interrupt for the ADC */
	if(u8InterruptCpy == Disable_Interrupt)
    38bc:	8c 81       	ldd	r24, Y+4	; 0x04
    38be:	88 23       	and	r24, r24
    38c0:	41 f4       	brne	.+16     	; 0x38d2 <ADC_Init1+0x10e>
	{
		CLR_BIT(ADCSRA_R,ADIE_B);
    38c2:	a6 e2       	ldi	r26, 0x26	; 38
    38c4:	b0 e0       	ldi	r27, 0x00	; 0
    38c6:	e6 e2       	ldi	r30, 0x26	; 38
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	80 81       	ld	r24, Z
    38cc:	87 7f       	andi	r24, 0xF7	; 247
    38ce:	8c 93       	st	X, r24
    38d0:	0a c0       	rjmp	.+20     	; 0x38e6 <ADC_Init1+0x122>
	}else if(u8InterruptCpy == Enable_Interrupt)
    38d2:	8c 81       	ldd	r24, Y+4	; 0x04
    38d4:	81 30       	cpi	r24, 0x01	; 1
    38d6:	39 f4       	brne	.+14     	; 0x38e6 <ADC_Init1+0x122>
	{
		SET_BIT(ADCSRA_R,ADIE_B);
    38d8:	a6 e2       	ldi	r26, 0x26	; 38
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	e6 e2       	ldi	r30, 0x26	; 38
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	88 60       	ori	r24, 0x08	; 8
    38e4:	8c 93       	st	X, r24
//		ADCSRA_R |= (1<<ADIE_B);
	}

	return E_OK;
    38e6:	81 e0       	ldi	r24, 0x01	; 1
}
    38e8:	0f 90       	pop	r0
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	cf 91       	pop	r28
    38f2:	df 91       	pop	r29
    38f4:	08 95       	ret

000038f6 <ADC_Init2>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : ADC initialization part 2
*************************************************************/
enuErrorStatus_t ADC_Init2(uint8_t u8InputTerminlasCpy,uint8_t u8prescalercpy)
{
    38f6:	df 93       	push	r29
    38f8:	cf 93       	push	r28
    38fa:	00 d0       	rcall	.+0      	; 0x38fc <ADC_Init2+0x6>
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	89 83       	std	Y+1, r24	; 0x01
    3902:	6a 83       	std	Y+2, r22	; 0x02
	/* Select the channel */
	if(u8InputTerminlasCpy == Single_Ended_ADC0)
    3904:	89 81       	ldd	r24, Y+1	; 0x01
    3906:	88 23       	and	r24, r24
    3908:	21 f5       	brne	.+72     	; 0x3952 <ADC_Init2+0x5c>
	{

	 	CLR_BIT(ADMUX_R,MUX4_B);
    390a:	a7 e2       	ldi	r26, 0x27	; 39
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	e7 e2       	ldi	r30, 0x27	; 39
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
    3914:	8f 7e       	andi	r24, 0xEF	; 239
    3916:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3918:	a7 e2       	ldi	r26, 0x27	; 39
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	e7 e2       	ldi	r30, 0x27	; 39
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	87 7f       	andi	r24, 0xF7	; 247
    3924:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    3926:	a7 e2       	ldi	r26, 0x27	; 39
    3928:	b0 e0       	ldi	r27, 0x00	; 0
    392a:	e7 e2       	ldi	r30, 0x27	; 39
    392c:	f0 e0       	ldi	r31, 0x00	; 0
    392e:	80 81       	ld	r24, Z
    3930:	8b 7f       	andi	r24, 0xFB	; 251
    3932:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3934:	a7 e2       	ldi	r26, 0x27	; 39
    3936:	b0 e0       	ldi	r27, 0x00	; 0
    3938:	e7 e2       	ldi	r30, 0x27	; 39
    393a:	f0 e0       	ldi	r31, 0x00	; 0
    393c:	80 81       	ld	r24, Z
    393e:	8d 7f       	andi	r24, 0xFD	; 253
    3940:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX0_B);
    3942:	a7 e2       	ldi	r26, 0x27	; 39
    3944:	b0 e0       	ldi	r27, 0x00	; 0
    3946:	e7 e2       	ldi	r30, 0x27	; 39
    3948:	f0 e0       	ldi	r31, 0x00	; 0
    394a:	80 81       	ld	r24, Z
    394c:	8e 7f       	andi	r24, 0xFE	; 254
    394e:	8c 93       	st	X, r24
    3950:	80 c3       	rjmp	.+1792   	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Single_Ended_ADC1)
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	81 30       	cpi	r24, 0x01	; 1
    3956:	21 f5       	brne	.+72     	; 0x39a0 <ADC_Init2+0xaa>
	{
		CLR_BIT(ADMUX_R,MUX4_B);
    3958:	a7 e2       	ldi	r26, 0x27	; 39
    395a:	b0 e0       	ldi	r27, 0x00	; 0
    395c:	e7 e2       	ldi	r30, 0x27	; 39
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	80 81       	ld	r24, Z
    3962:	8f 7e       	andi	r24, 0xEF	; 239
    3964:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3966:	a7 e2       	ldi	r26, 0x27	; 39
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	e7 e2       	ldi	r30, 0x27	; 39
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	80 81       	ld	r24, Z
    3970:	87 7f       	andi	r24, 0xF7	; 247
    3972:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    3974:	a7 e2       	ldi	r26, 0x27	; 39
    3976:	b0 e0       	ldi	r27, 0x00	; 0
    3978:	e7 e2       	ldi	r30, 0x27	; 39
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	8b 7f       	andi	r24, 0xFB	; 251
    3980:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3982:	a7 e2       	ldi	r26, 0x27	; 39
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	e7 e2       	ldi	r30, 0x27	; 39
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	8d 7f       	andi	r24, 0xFD	; 253
    398e:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3990:	a7 e2       	ldi	r26, 0x27	; 39
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	e7 e2       	ldi	r30, 0x27	; 39
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	81 60       	ori	r24, 0x01	; 1
    399c:	8c 93       	st	X, r24
    399e:	59 c3       	rjmp	.+1714   	; 0x4052 <ADC_Init2+0x75c>
	}else if (u8InputTerminlasCpy == Single_Ended_ADC2)
    39a0:	89 81       	ldd	r24, Y+1	; 0x01
    39a2:	82 30       	cpi	r24, 0x02	; 2
    39a4:	21 f5       	brne	.+72     	; 0x39ee <ADC_Init2+0xf8>
	{
		CLR_BIT(ADMUX_R,MUX4_B);
    39a6:	a7 e2       	ldi	r26, 0x27	; 39
    39a8:	b0 e0       	ldi	r27, 0x00	; 0
    39aa:	e7 e2       	ldi	r30, 0x27	; 39
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
    39b0:	8f 7e       	andi	r24, 0xEF	; 239
    39b2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    39b4:	a7 e2       	ldi	r26, 0x27	; 39
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	e7 e2       	ldi	r30, 0x27	; 39
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	87 7f       	andi	r24, 0xF7	; 247
    39c0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    39c2:	a7 e2       	ldi	r26, 0x27	; 39
    39c4:	b0 e0       	ldi	r27, 0x00	; 0
    39c6:	e7 e2       	ldi	r30, 0x27	; 39
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	80 81       	ld	r24, Z
    39cc:	8b 7f       	andi	r24, 0xFB	; 251
    39ce:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX1_B);
    39d0:	a7 e2       	ldi	r26, 0x27	; 39
    39d2:	b0 e0       	ldi	r27, 0x00	; 0
    39d4:	e7 e2       	ldi	r30, 0x27	; 39
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	80 81       	ld	r24, Z
    39da:	82 60       	ori	r24, 0x02	; 2
    39dc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX0_B);
    39de:	a7 e2       	ldi	r26, 0x27	; 39
    39e0:	b0 e0       	ldi	r27, 0x00	; 0
    39e2:	e7 e2       	ldi	r30, 0x27	; 39
    39e4:	f0 e0       	ldi	r31, 0x00	; 0
    39e6:	80 81       	ld	r24, Z
    39e8:	8e 7f       	andi	r24, 0xFE	; 254
    39ea:	8c 93       	st	X, r24
    39ec:	32 c3       	rjmp	.+1636   	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Single_Ended_ADC3)
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	83 30       	cpi	r24, 0x03	; 3
    39f2:	21 f5       	brne	.+72     	; 0x3a3c <ADC_Init2+0x146>
	{
		CLR_BIT(ADMUX_R,MUX4_B);
    39f4:	a7 e2       	ldi	r26, 0x27	; 39
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	e7 e2       	ldi	r30, 0x27	; 39
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	80 81       	ld	r24, Z
    39fe:	8f 7e       	andi	r24, 0xEF	; 239
    3a00:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3a02:	a7 e2       	ldi	r26, 0x27	; 39
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	e7 e2       	ldi	r30, 0x27	; 39
    3a08:	f0 e0       	ldi	r31, 0x00	; 0
    3a0a:	80 81       	ld	r24, Z
    3a0c:	87 7f       	andi	r24, 0xF7	; 247
    3a0e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    3a10:	a7 e2       	ldi	r26, 0x27	; 39
    3a12:	b0 e0       	ldi	r27, 0x00	; 0
    3a14:	e7 e2       	ldi	r30, 0x27	; 39
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	80 81       	ld	r24, Z
    3a1a:	8b 7f       	andi	r24, 0xFB	; 251
    3a1c:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX1_B);
    3a1e:	a7 e2       	ldi	r26, 0x27	; 39
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	e7 e2       	ldi	r30, 0x27	; 39
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	82 60       	ori	r24, 0x02	; 2
    3a2a:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3a2c:	a7 e2       	ldi	r26, 0x27	; 39
    3a2e:	b0 e0       	ldi	r27, 0x00	; 0
    3a30:	e7 e2       	ldi	r30, 0x27	; 39
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	80 81       	ld	r24, Z
    3a36:	81 60       	ori	r24, 0x01	; 1
    3a38:	8c 93       	st	X, r24
    3a3a:	0b c3       	rjmp	.+1558   	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Single_Ended_ADC4)
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
    3a3e:	84 30       	cpi	r24, 0x04	; 4
    3a40:	21 f5       	brne	.+72     	; 0x3a8a <ADC_Init2+0x194>
	{
		CLR_BIT(ADMUX_R,MUX4_B);
    3a42:	a7 e2       	ldi	r26, 0x27	; 39
    3a44:	b0 e0       	ldi	r27, 0x00	; 0
    3a46:	e7 e2       	ldi	r30, 0x27	; 39
    3a48:	f0 e0       	ldi	r31, 0x00	; 0
    3a4a:	80 81       	ld	r24, Z
    3a4c:	8f 7e       	andi	r24, 0xEF	; 239
    3a4e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3a50:	a7 e2       	ldi	r26, 0x27	; 39
    3a52:	b0 e0       	ldi	r27, 0x00	; 0
    3a54:	e7 e2       	ldi	r30, 0x27	; 39
    3a56:	f0 e0       	ldi	r31, 0x00	; 0
    3a58:	80 81       	ld	r24, Z
    3a5a:	87 7f       	andi	r24, 0xF7	; 247
    3a5c:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    3a5e:	a7 e2       	ldi	r26, 0x27	; 39
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	e7 e2       	ldi	r30, 0x27	; 39
    3a64:	f0 e0       	ldi	r31, 0x00	; 0
    3a66:	80 81       	ld	r24, Z
    3a68:	84 60       	ori	r24, 0x04	; 4
    3a6a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3a6c:	a7 e2       	ldi	r26, 0x27	; 39
    3a6e:	b0 e0       	ldi	r27, 0x00	; 0
    3a70:	e7 e2       	ldi	r30, 0x27	; 39
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	80 81       	ld	r24, Z
    3a76:	8d 7f       	andi	r24, 0xFD	; 253
    3a78:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX0_B);
    3a7a:	a7 e2       	ldi	r26, 0x27	; 39
    3a7c:	b0 e0       	ldi	r27, 0x00	; 0
    3a7e:	e7 e2       	ldi	r30, 0x27	; 39
    3a80:	f0 e0       	ldi	r31, 0x00	; 0
    3a82:	80 81       	ld	r24, Z
    3a84:	8e 7f       	andi	r24, 0xFE	; 254
    3a86:	8c 93       	st	X, r24
    3a88:	e4 c2       	rjmp	.+1480   	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Single_Ended_ADC5)
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	85 30       	cpi	r24, 0x05	; 5
    3a8e:	21 f5       	brne	.+72     	; 0x3ad8 <ADC_Init2+0x1e2>
	{
		CLR_BIT(ADMUX_R,MUX4_B);
    3a90:	a7 e2       	ldi	r26, 0x27	; 39
    3a92:	b0 e0       	ldi	r27, 0x00	; 0
    3a94:	e7 e2       	ldi	r30, 0x27	; 39
    3a96:	f0 e0       	ldi	r31, 0x00	; 0
    3a98:	80 81       	ld	r24, Z
    3a9a:	8f 7e       	andi	r24, 0xEF	; 239
    3a9c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3a9e:	a7 e2       	ldi	r26, 0x27	; 39
    3aa0:	b0 e0       	ldi	r27, 0x00	; 0
    3aa2:	e7 e2       	ldi	r30, 0x27	; 39
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	80 81       	ld	r24, Z
    3aa8:	87 7f       	andi	r24, 0xF7	; 247
    3aaa:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    3aac:	a7 e2       	ldi	r26, 0x27	; 39
    3aae:	b0 e0       	ldi	r27, 0x00	; 0
    3ab0:	e7 e2       	ldi	r30, 0x27	; 39
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	80 81       	ld	r24, Z
    3ab6:	84 60       	ori	r24, 0x04	; 4
    3ab8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3aba:	a7 e2       	ldi	r26, 0x27	; 39
    3abc:	b0 e0       	ldi	r27, 0x00	; 0
    3abe:	e7 e2       	ldi	r30, 0x27	; 39
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	80 81       	ld	r24, Z
    3ac4:	8d 7f       	andi	r24, 0xFD	; 253
    3ac6:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3ac8:	a7 e2       	ldi	r26, 0x27	; 39
    3aca:	b0 e0       	ldi	r27, 0x00	; 0
    3acc:	e7 e2       	ldi	r30, 0x27	; 39
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	80 81       	ld	r24, Z
    3ad2:	81 60       	ori	r24, 0x01	; 1
    3ad4:	8c 93       	st	X, r24
    3ad6:	bd c2       	rjmp	.+1402   	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Single_Ended_ADC6)
    3ad8:	89 81       	ldd	r24, Y+1	; 0x01
    3ada:	86 30       	cpi	r24, 0x06	; 6
    3adc:	21 f5       	brne	.+72     	; 0x3b26 <ADC_Init2+0x230>
	{
		CLR_BIT(ADMUX_R,MUX4_B);
    3ade:	a7 e2       	ldi	r26, 0x27	; 39
    3ae0:	b0 e0       	ldi	r27, 0x00	; 0
    3ae2:	e7 e2       	ldi	r30, 0x27	; 39
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	8f 7e       	andi	r24, 0xEF	; 239
    3aea:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3aec:	a7 e2       	ldi	r26, 0x27	; 39
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	e7 e2       	ldi	r30, 0x27	; 39
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	80 81       	ld	r24, Z
    3af6:	87 7f       	andi	r24, 0xF7	; 247
    3af8:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    3afa:	a7 e2       	ldi	r26, 0x27	; 39
    3afc:	b0 e0       	ldi	r27, 0x00	; 0
    3afe:	e7 e2       	ldi	r30, 0x27	; 39
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	80 81       	ld	r24, Z
    3b04:	84 60       	ori	r24, 0x04	; 4
    3b06:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX1_B);
    3b08:	a7 e2       	ldi	r26, 0x27	; 39
    3b0a:	b0 e0       	ldi	r27, 0x00	; 0
    3b0c:	e7 e2       	ldi	r30, 0x27	; 39
    3b0e:	f0 e0       	ldi	r31, 0x00	; 0
    3b10:	80 81       	ld	r24, Z
    3b12:	82 60       	ori	r24, 0x02	; 2
    3b14:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX0_B);
    3b16:	a7 e2       	ldi	r26, 0x27	; 39
    3b18:	b0 e0       	ldi	r27, 0x00	; 0
    3b1a:	e7 e2       	ldi	r30, 0x27	; 39
    3b1c:	f0 e0       	ldi	r31, 0x00	; 0
    3b1e:	80 81       	ld	r24, Z
    3b20:	8e 7f       	andi	r24, 0xFE	; 254
    3b22:	8c 93       	st	X, r24
    3b24:	96 c2       	rjmp	.+1324   	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Single_Ended_ADC7)
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	87 30       	cpi	r24, 0x07	; 7
    3b2a:	21 f5       	brne	.+72     	; 0x3b74 <ADC_Init2+0x27e>
	{
		CLR_BIT(ADMUX_R,MUX4_B);
    3b2c:	a7 e2       	ldi	r26, 0x27	; 39
    3b2e:	b0 e0       	ldi	r27, 0x00	; 0
    3b30:	e7 e2       	ldi	r30, 0x27	; 39
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	80 81       	ld	r24, Z
    3b36:	8f 7e       	andi	r24, 0xEF	; 239
    3b38:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3b3a:	a7 e2       	ldi	r26, 0x27	; 39
    3b3c:	b0 e0       	ldi	r27, 0x00	; 0
    3b3e:	e7 e2       	ldi	r30, 0x27	; 39
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	80 81       	ld	r24, Z
    3b44:	87 7f       	andi	r24, 0xF7	; 247
    3b46:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    3b48:	a7 e2       	ldi	r26, 0x27	; 39
    3b4a:	b0 e0       	ldi	r27, 0x00	; 0
    3b4c:	e7 e2       	ldi	r30, 0x27	; 39
    3b4e:	f0 e0       	ldi	r31, 0x00	; 0
    3b50:	80 81       	ld	r24, Z
    3b52:	84 60       	ori	r24, 0x04	; 4
    3b54:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX1_B);
    3b56:	a7 e2       	ldi	r26, 0x27	; 39
    3b58:	b0 e0       	ldi	r27, 0x00	; 0
    3b5a:	e7 e2       	ldi	r30, 0x27	; 39
    3b5c:	f0 e0       	ldi	r31, 0x00	; 0
    3b5e:	80 81       	ld	r24, Z
    3b60:	82 60       	ori	r24, 0x02	; 2
    3b62:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3b64:	a7 e2       	ldi	r26, 0x27	; 39
    3b66:	b0 e0       	ldi	r27, 0x00	; 0
    3b68:	e7 e2       	ldi	r30, 0x27	; 39
    3b6a:	f0 e0       	ldi	r31, 0x00	; 0
    3b6c:	80 81       	ld	r24, Z
    3b6e:	81 60       	ori	r24, 0x01	; 1
    3b70:	8c 93       	st	X, r24
    3b72:	6f c2       	rjmp	.+1246   	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC1_ADC0_Gain_10X)
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	88 30       	cpi	r24, 0x08	; 8
    3b78:	21 f5       	brne	.+72     	; 0x3bc2 <ADC_Init2+0x2cc>
	{
		CLR_BIT(ADMUX_R,MUX4_B);
    3b7a:	a7 e2       	ldi	r26, 0x27	; 39
    3b7c:	b0 e0       	ldi	r27, 0x00	; 0
    3b7e:	e7 e2       	ldi	r30, 0x27	; 39
    3b80:	f0 e0       	ldi	r31, 0x00	; 0
    3b82:	80 81       	ld	r24, Z
    3b84:	8f 7e       	andi	r24, 0xEF	; 239
    3b86:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX3_B);
    3b88:	a7 e2       	ldi	r26, 0x27	; 39
    3b8a:	b0 e0       	ldi	r27, 0x00	; 0
    3b8c:	e7 e2       	ldi	r30, 0x27	; 39
    3b8e:	f0 e0       	ldi	r31, 0x00	; 0
    3b90:	80 81       	ld	r24, Z
    3b92:	88 60       	ori	r24, 0x08	; 8
    3b94:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    3b96:	a7 e2       	ldi	r26, 0x27	; 39
    3b98:	b0 e0       	ldi	r27, 0x00	; 0
    3b9a:	e7 e2       	ldi	r30, 0x27	; 39
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	80 81       	ld	r24, Z
    3ba0:	8b 7f       	andi	r24, 0xFB	; 251
    3ba2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3ba4:	a7 e2       	ldi	r26, 0x27	; 39
    3ba6:	b0 e0       	ldi	r27, 0x00	; 0
    3ba8:	e7 e2       	ldi	r30, 0x27	; 39
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	80 81       	ld	r24, Z
    3bae:	8d 7f       	andi	r24, 0xFD	; 253
    3bb0:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3bb2:	a7 e2       	ldi	r26, 0x27	; 39
    3bb4:	b0 e0       	ldi	r27, 0x00	; 0
    3bb6:	e7 e2       	ldi	r30, 0x27	; 39
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	80 81       	ld	r24, Z
    3bbc:	81 60       	ori	r24, 0x01	; 1
    3bbe:	8c 93       	st	X, r24
    3bc0:	48 c2       	rjmp	.+1168   	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC1_ADC0_Gain_200X)
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	89 30       	cpi	r24, 0x09	; 9
    3bc6:	21 f5       	brne	.+72     	; 0x3c10 <ADC_Init2+0x31a>
	{
		CLR_BIT(ADMUX_R,MUX4_B);
    3bc8:	a7 e2       	ldi	r26, 0x27	; 39
    3bca:	b0 e0       	ldi	r27, 0x00	; 0
    3bcc:	e7 e2       	ldi	r30, 0x27	; 39
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	80 81       	ld	r24, Z
    3bd2:	8f 7e       	andi	r24, 0xEF	; 239
    3bd4:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX3_B);
    3bd6:	a7 e2       	ldi	r26, 0x27	; 39
    3bd8:	b0 e0       	ldi	r27, 0x00	; 0
    3bda:	e7 e2       	ldi	r30, 0x27	; 39
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	80 81       	ld	r24, Z
    3be0:	88 60       	ori	r24, 0x08	; 8
    3be2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    3be4:	a7 e2       	ldi	r26, 0x27	; 39
    3be6:	b0 e0       	ldi	r27, 0x00	; 0
    3be8:	e7 e2       	ldi	r30, 0x27	; 39
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	80 81       	ld	r24, Z
    3bee:	8b 7f       	andi	r24, 0xFB	; 251
    3bf0:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX1_B);
    3bf2:	a7 e2       	ldi	r26, 0x27	; 39
    3bf4:	b0 e0       	ldi	r27, 0x00	; 0
    3bf6:	e7 e2       	ldi	r30, 0x27	; 39
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	80 81       	ld	r24, Z
    3bfc:	82 60       	ori	r24, 0x02	; 2
    3bfe:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3c00:	a7 e2       	ldi	r26, 0x27	; 39
    3c02:	b0 e0       	ldi	r27, 0x00	; 0
    3c04:	e7 e2       	ldi	r30, 0x27	; 39
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	80 81       	ld	r24, Z
    3c0a:	81 60       	ori	r24, 0x01	; 1
    3c0c:	8c 93       	st	X, r24
    3c0e:	21 c2       	rjmp	.+1090   	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC3_ADC2_Gain_10X)
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	8a 30       	cpi	r24, 0x0A	; 10
    3c14:	21 f5       	brne	.+72     	; 0x3c5e <ADC_Init2+0x368>
	{
		CLR_BIT(ADMUX_R,MUX4_B);
    3c16:	a7 e2       	ldi	r26, 0x27	; 39
    3c18:	b0 e0       	ldi	r27, 0x00	; 0
    3c1a:	e7 e2       	ldi	r30, 0x27	; 39
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	80 81       	ld	r24, Z
    3c20:	8f 7e       	andi	r24, 0xEF	; 239
    3c22:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX3_B);
    3c24:	a7 e2       	ldi	r26, 0x27	; 39
    3c26:	b0 e0       	ldi	r27, 0x00	; 0
    3c28:	e7 e2       	ldi	r30, 0x27	; 39
    3c2a:	f0 e0       	ldi	r31, 0x00	; 0
    3c2c:	80 81       	ld	r24, Z
    3c2e:	88 60       	ori	r24, 0x08	; 8
    3c30:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    3c32:	a7 e2       	ldi	r26, 0x27	; 39
    3c34:	b0 e0       	ldi	r27, 0x00	; 0
    3c36:	e7 e2       	ldi	r30, 0x27	; 39
    3c38:	f0 e0       	ldi	r31, 0x00	; 0
    3c3a:	80 81       	ld	r24, Z
    3c3c:	84 60       	ori	r24, 0x04	; 4
    3c3e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3c40:	a7 e2       	ldi	r26, 0x27	; 39
    3c42:	b0 e0       	ldi	r27, 0x00	; 0
    3c44:	e7 e2       	ldi	r30, 0x27	; 39
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	80 81       	ld	r24, Z
    3c4a:	8d 7f       	andi	r24, 0xFD	; 253
    3c4c:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3c4e:	a7 e2       	ldi	r26, 0x27	; 39
    3c50:	b0 e0       	ldi	r27, 0x00	; 0
    3c52:	e7 e2       	ldi	r30, 0x27	; 39
    3c54:	f0 e0       	ldi	r31, 0x00	; 0
    3c56:	80 81       	ld	r24, Z
    3c58:	81 60       	ori	r24, 0x01	; 1
    3c5a:	8c 93       	st	X, r24
    3c5c:	fa c1       	rjmp	.+1012   	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC3_ADC2_Gain_200X)
    3c5e:	89 81       	ldd	r24, Y+1	; 0x01
    3c60:	8b 30       	cpi	r24, 0x0B	; 11
    3c62:	21 f5       	brne	.+72     	; 0x3cac <ADC_Init2+0x3b6>
	{
		CLR_BIT(ADMUX_R,MUX4_B);
    3c64:	a7 e2       	ldi	r26, 0x27	; 39
    3c66:	b0 e0       	ldi	r27, 0x00	; 0
    3c68:	e7 e2       	ldi	r30, 0x27	; 39
    3c6a:	f0 e0       	ldi	r31, 0x00	; 0
    3c6c:	80 81       	ld	r24, Z
    3c6e:	8f 7e       	andi	r24, 0xEF	; 239
    3c70:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX3_B);
    3c72:	a7 e2       	ldi	r26, 0x27	; 39
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	e7 e2       	ldi	r30, 0x27	; 39
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	88 60       	ori	r24, 0x08	; 8
    3c7e:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    3c80:	a7 e2       	ldi	r26, 0x27	; 39
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	e7 e2       	ldi	r30, 0x27	; 39
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	80 81       	ld	r24, Z
    3c8a:	84 60       	ori	r24, 0x04	; 4
    3c8c:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX1_B);
    3c8e:	a7 e2       	ldi	r26, 0x27	; 39
    3c90:	b0 e0       	ldi	r27, 0x00	; 0
    3c92:	e7 e2       	ldi	r30, 0x27	; 39
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	80 81       	ld	r24, Z
    3c98:	82 60       	ori	r24, 0x02	; 2
    3c9a:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3c9c:	a7 e2       	ldi	r26, 0x27	; 39
    3c9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ca0:	e7 e2       	ldi	r30, 0x27	; 39
    3ca2:	f0 e0       	ldi	r31, 0x00	; 0
    3ca4:	80 81       	ld	r24, Z
    3ca6:	81 60       	ori	r24, 0x01	; 1
    3ca8:	8c 93       	st	X, r24
    3caa:	d3 c1       	rjmp	.+934    	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC0_ADC1_Gain_1X)
    3cac:	89 81       	ldd	r24, Y+1	; 0x01
    3cae:	8c 30       	cpi	r24, 0x0C	; 12
    3cb0:	21 f5       	brne	.+72     	; 0x3cfa <ADC_Init2+0x404>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    3cb2:	a7 e2       	ldi	r26, 0x27	; 39
    3cb4:	b0 e0       	ldi	r27, 0x00	; 0
    3cb6:	e7 e2       	ldi	r30, 0x27	; 39
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	80 81       	ld	r24, Z
    3cbc:	80 61       	ori	r24, 0x10	; 16
    3cbe:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3cc0:	a7 e2       	ldi	r26, 0x27	; 39
    3cc2:	b0 e0       	ldi	r27, 0x00	; 0
    3cc4:	e7 e2       	ldi	r30, 0x27	; 39
    3cc6:	f0 e0       	ldi	r31, 0x00	; 0
    3cc8:	80 81       	ld	r24, Z
    3cca:	87 7f       	andi	r24, 0xF7	; 247
    3ccc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    3cce:	a7 e2       	ldi	r26, 0x27	; 39
    3cd0:	b0 e0       	ldi	r27, 0x00	; 0
    3cd2:	e7 e2       	ldi	r30, 0x27	; 39
    3cd4:	f0 e0       	ldi	r31, 0x00	; 0
    3cd6:	80 81       	ld	r24, Z
    3cd8:	8b 7f       	andi	r24, 0xFB	; 251
    3cda:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3cdc:	a7 e2       	ldi	r26, 0x27	; 39
    3cde:	b0 e0       	ldi	r27, 0x00	; 0
    3ce0:	e7 e2       	ldi	r30, 0x27	; 39
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	80 81       	ld	r24, Z
    3ce6:	8d 7f       	andi	r24, 0xFD	; 253
    3ce8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX0_B);
    3cea:	a7 e2       	ldi	r26, 0x27	; 39
    3cec:	b0 e0       	ldi	r27, 0x00	; 0
    3cee:	e7 e2       	ldi	r30, 0x27	; 39
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	80 81       	ld	r24, Z
    3cf4:	8e 7f       	andi	r24, 0xFE	; 254
    3cf6:	8c 93       	st	X, r24
    3cf8:	ac c1       	rjmp	.+856    	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC2_ADC1_Gain_1X)
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	8d 30       	cpi	r24, 0x0D	; 13
    3cfe:	21 f5       	brne	.+72     	; 0x3d48 <ADC_Init2+0x452>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    3d00:	a7 e2       	ldi	r26, 0x27	; 39
    3d02:	b0 e0       	ldi	r27, 0x00	; 0
    3d04:	e7 e2       	ldi	r30, 0x27	; 39
    3d06:	f0 e0       	ldi	r31, 0x00	; 0
    3d08:	80 81       	ld	r24, Z
    3d0a:	80 61       	ori	r24, 0x10	; 16
    3d0c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3d0e:	a7 e2       	ldi	r26, 0x27	; 39
    3d10:	b0 e0       	ldi	r27, 0x00	; 0
    3d12:	e7 e2       	ldi	r30, 0x27	; 39
    3d14:	f0 e0       	ldi	r31, 0x00	; 0
    3d16:	80 81       	ld	r24, Z
    3d18:	87 7f       	andi	r24, 0xF7	; 247
    3d1a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    3d1c:	a7 e2       	ldi	r26, 0x27	; 39
    3d1e:	b0 e0       	ldi	r27, 0x00	; 0
    3d20:	e7 e2       	ldi	r30, 0x27	; 39
    3d22:	f0 e0       	ldi	r31, 0x00	; 0
    3d24:	80 81       	ld	r24, Z
    3d26:	8b 7f       	andi	r24, 0xFB	; 251
    3d28:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX1_B);
    3d2a:	a7 e2       	ldi	r26, 0x27	; 39
    3d2c:	b0 e0       	ldi	r27, 0x00	; 0
    3d2e:	e7 e2       	ldi	r30, 0x27	; 39
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	80 81       	ld	r24, Z
    3d34:	82 60       	ori	r24, 0x02	; 2
    3d36:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX0_B);
    3d38:	a7 e2       	ldi	r26, 0x27	; 39
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	e7 e2       	ldi	r30, 0x27	; 39
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	80 81       	ld	r24, Z
    3d42:	8e 7f       	andi	r24, 0xFE	; 254
    3d44:	8c 93       	st	X, r24
    3d46:	85 c1       	rjmp	.+778    	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC3_ADC1_Gain_1X)
    3d48:	89 81       	ldd	r24, Y+1	; 0x01
    3d4a:	8e 30       	cpi	r24, 0x0E	; 14
    3d4c:	21 f5       	brne	.+72     	; 0x3d96 <ADC_Init2+0x4a0>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    3d4e:	a7 e2       	ldi	r26, 0x27	; 39
    3d50:	b0 e0       	ldi	r27, 0x00	; 0
    3d52:	e7 e2       	ldi	r30, 0x27	; 39
    3d54:	f0 e0       	ldi	r31, 0x00	; 0
    3d56:	80 81       	ld	r24, Z
    3d58:	80 61       	ori	r24, 0x10	; 16
    3d5a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3d5c:	a7 e2       	ldi	r26, 0x27	; 39
    3d5e:	b0 e0       	ldi	r27, 0x00	; 0
    3d60:	e7 e2       	ldi	r30, 0x27	; 39
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	80 81       	ld	r24, Z
    3d66:	87 7f       	andi	r24, 0xF7	; 247
    3d68:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    3d6a:	a7 e2       	ldi	r26, 0x27	; 39
    3d6c:	b0 e0       	ldi	r27, 0x00	; 0
    3d6e:	e7 e2       	ldi	r30, 0x27	; 39
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	80 81       	ld	r24, Z
    3d74:	8b 7f       	andi	r24, 0xFB	; 251
    3d76:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX1_B);
    3d78:	a7 e2       	ldi	r26, 0x27	; 39
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	e7 e2       	ldi	r30, 0x27	; 39
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	80 81       	ld	r24, Z
    3d82:	82 60       	ori	r24, 0x02	; 2
    3d84:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3d86:	a7 e2       	ldi	r26, 0x27	; 39
    3d88:	b0 e0       	ldi	r27, 0x00	; 0
    3d8a:	e7 e2       	ldi	r30, 0x27	; 39
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	80 81       	ld	r24, Z
    3d90:	81 60       	ori	r24, 0x01	; 1
    3d92:	8c 93       	st	X, r24
    3d94:	5e c1       	rjmp	.+700    	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC4_ADC1_Gain_1X)
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	8f 30       	cpi	r24, 0x0F	; 15
    3d9a:	21 f5       	brne	.+72     	; 0x3de4 <ADC_Init2+0x4ee>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    3d9c:	a7 e2       	ldi	r26, 0x27	; 39
    3d9e:	b0 e0       	ldi	r27, 0x00	; 0
    3da0:	e7 e2       	ldi	r30, 0x27	; 39
    3da2:	f0 e0       	ldi	r31, 0x00	; 0
    3da4:	80 81       	ld	r24, Z
    3da6:	80 61       	ori	r24, 0x10	; 16
    3da8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3daa:	a7 e2       	ldi	r26, 0x27	; 39
    3dac:	b0 e0       	ldi	r27, 0x00	; 0
    3dae:	e7 e2       	ldi	r30, 0x27	; 39
    3db0:	f0 e0       	ldi	r31, 0x00	; 0
    3db2:	80 81       	ld	r24, Z
    3db4:	87 7f       	andi	r24, 0xF7	; 247
    3db6:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    3db8:	a7 e2       	ldi	r26, 0x27	; 39
    3dba:	b0 e0       	ldi	r27, 0x00	; 0
    3dbc:	e7 e2       	ldi	r30, 0x27	; 39
    3dbe:	f0 e0       	ldi	r31, 0x00	; 0
    3dc0:	80 81       	ld	r24, Z
    3dc2:	84 60       	ori	r24, 0x04	; 4
    3dc4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3dc6:	a7 e2       	ldi	r26, 0x27	; 39
    3dc8:	b0 e0       	ldi	r27, 0x00	; 0
    3dca:	e7 e2       	ldi	r30, 0x27	; 39
    3dcc:	f0 e0       	ldi	r31, 0x00	; 0
    3dce:	80 81       	ld	r24, Z
    3dd0:	8d 7f       	andi	r24, 0xFD	; 253
    3dd2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX0_B);
    3dd4:	a7 e2       	ldi	r26, 0x27	; 39
    3dd6:	b0 e0       	ldi	r27, 0x00	; 0
    3dd8:	e7 e2       	ldi	r30, 0x27	; 39
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	80 81       	ld	r24, Z
    3dde:	8e 7f       	andi	r24, 0xFE	; 254
    3de0:	8c 93       	st	X, r24
    3de2:	37 c1       	rjmp	.+622    	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC5_ADC1_Gain_1X)
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	80 31       	cpi	r24, 0x10	; 16
    3de8:	21 f5       	brne	.+72     	; 0x3e32 <ADC_Init2+0x53c>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    3dea:	a7 e2       	ldi	r26, 0x27	; 39
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
    3dee:	e7 e2       	ldi	r30, 0x27	; 39
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	80 81       	ld	r24, Z
    3df4:	80 61       	ori	r24, 0x10	; 16
    3df6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3df8:	a7 e2       	ldi	r26, 0x27	; 39
    3dfa:	b0 e0       	ldi	r27, 0x00	; 0
    3dfc:	e7 e2       	ldi	r30, 0x27	; 39
    3dfe:	f0 e0       	ldi	r31, 0x00	; 0
    3e00:	80 81       	ld	r24, Z
    3e02:	87 7f       	andi	r24, 0xF7	; 247
    3e04:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    3e06:	a7 e2       	ldi	r26, 0x27	; 39
    3e08:	b0 e0       	ldi	r27, 0x00	; 0
    3e0a:	e7 e2       	ldi	r30, 0x27	; 39
    3e0c:	f0 e0       	ldi	r31, 0x00	; 0
    3e0e:	80 81       	ld	r24, Z
    3e10:	84 60       	ori	r24, 0x04	; 4
    3e12:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3e14:	a7 e2       	ldi	r26, 0x27	; 39
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	e7 e2       	ldi	r30, 0x27	; 39
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	8d 7f       	andi	r24, 0xFD	; 253
    3e20:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3e22:	a7 e2       	ldi	r26, 0x27	; 39
    3e24:	b0 e0       	ldi	r27, 0x00	; 0
    3e26:	e7 e2       	ldi	r30, 0x27	; 39
    3e28:	f0 e0       	ldi	r31, 0x00	; 0
    3e2a:	80 81       	ld	r24, Z
    3e2c:	81 60       	ori	r24, 0x01	; 1
    3e2e:	8c 93       	st	X, r24
    3e30:	10 c1       	rjmp	.+544    	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC6_ADC1_Gain_1X)
    3e32:	89 81       	ldd	r24, Y+1	; 0x01
    3e34:	81 31       	cpi	r24, 0x11	; 17
    3e36:	21 f5       	brne	.+72     	; 0x3e80 <ADC_Init2+0x58a>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    3e38:	a7 e2       	ldi	r26, 0x27	; 39
    3e3a:	b0 e0       	ldi	r27, 0x00	; 0
    3e3c:	e7 e2       	ldi	r30, 0x27	; 39
    3e3e:	f0 e0       	ldi	r31, 0x00	; 0
    3e40:	80 81       	ld	r24, Z
    3e42:	80 61       	ori	r24, 0x10	; 16
    3e44:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3e46:	a7 e2       	ldi	r26, 0x27	; 39
    3e48:	b0 e0       	ldi	r27, 0x00	; 0
    3e4a:	e7 e2       	ldi	r30, 0x27	; 39
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	80 81       	ld	r24, Z
    3e50:	87 7f       	andi	r24, 0xF7	; 247
    3e52:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    3e54:	a7 e2       	ldi	r26, 0x27	; 39
    3e56:	b0 e0       	ldi	r27, 0x00	; 0
    3e58:	e7 e2       	ldi	r30, 0x27	; 39
    3e5a:	f0 e0       	ldi	r31, 0x00	; 0
    3e5c:	80 81       	ld	r24, Z
    3e5e:	84 60       	ori	r24, 0x04	; 4
    3e60:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX1_B);
    3e62:	a7 e2       	ldi	r26, 0x27	; 39
    3e64:	b0 e0       	ldi	r27, 0x00	; 0
    3e66:	e7 e2       	ldi	r30, 0x27	; 39
    3e68:	f0 e0       	ldi	r31, 0x00	; 0
    3e6a:	80 81       	ld	r24, Z
    3e6c:	82 60       	ori	r24, 0x02	; 2
    3e6e:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX0_B);
    3e70:	a7 e2       	ldi	r26, 0x27	; 39
    3e72:	b0 e0       	ldi	r27, 0x00	; 0
    3e74:	e7 e2       	ldi	r30, 0x27	; 39
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	80 81       	ld	r24, Z
    3e7a:	8e 7f       	andi	r24, 0xFE	; 254
    3e7c:	8c 93       	st	X, r24
    3e7e:	e9 c0       	rjmp	.+466    	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC7_ADC1_Gain_1X)
    3e80:	89 81       	ldd	r24, Y+1	; 0x01
    3e82:	82 31       	cpi	r24, 0x12	; 18
    3e84:	21 f5       	brne	.+72     	; 0x3ece <ADC_Init2+0x5d8>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    3e86:	a7 e2       	ldi	r26, 0x27	; 39
    3e88:	b0 e0       	ldi	r27, 0x00	; 0
    3e8a:	e7 e2       	ldi	r30, 0x27	; 39
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	80 81       	ld	r24, Z
    3e90:	80 61       	ori	r24, 0x10	; 16
    3e92:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX3_B);
    3e94:	a7 e2       	ldi	r26, 0x27	; 39
    3e96:	b0 e0       	ldi	r27, 0x00	; 0
    3e98:	e7 e2       	ldi	r30, 0x27	; 39
    3e9a:	f0 e0       	ldi	r31, 0x00	; 0
    3e9c:	80 81       	ld	r24, Z
    3e9e:	87 7f       	andi	r24, 0xF7	; 247
    3ea0:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    3ea2:	a7 e2       	ldi	r26, 0x27	; 39
    3ea4:	b0 e0       	ldi	r27, 0x00	; 0
    3ea6:	e7 e2       	ldi	r30, 0x27	; 39
    3ea8:	f0 e0       	ldi	r31, 0x00	; 0
    3eaa:	80 81       	ld	r24, Z
    3eac:	84 60       	ori	r24, 0x04	; 4
    3eae:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX1_B);
    3eb0:	a7 e2       	ldi	r26, 0x27	; 39
    3eb2:	b0 e0       	ldi	r27, 0x00	; 0
    3eb4:	e7 e2       	ldi	r30, 0x27	; 39
    3eb6:	f0 e0       	ldi	r31, 0x00	; 0
    3eb8:	80 81       	ld	r24, Z
    3eba:	82 60       	ori	r24, 0x02	; 2
    3ebc:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3ebe:	a7 e2       	ldi	r26, 0x27	; 39
    3ec0:	b0 e0       	ldi	r27, 0x00	; 0
    3ec2:	e7 e2       	ldi	r30, 0x27	; 39
    3ec4:	f0 e0       	ldi	r31, 0x00	; 0
    3ec6:	80 81       	ld	r24, Z
    3ec8:	81 60       	ori	r24, 0x01	; 1
    3eca:	8c 93       	st	X, r24
    3ecc:	c2 c0       	rjmp	.+388    	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC0_ADC2_Gain_1X)
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	83 31       	cpi	r24, 0x13	; 19
    3ed2:	21 f5       	brne	.+72     	; 0x3f1c <ADC_Init2+0x626>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    3ed4:	a7 e2       	ldi	r26, 0x27	; 39
    3ed6:	b0 e0       	ldi	r27, 0x00	; 0
    3ed8:	e7 e2       	ldi	r30, 0x27	; 39
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	80 81       	ld	r24, Z
    3ede:	80 61       	ori	r24, 0x10	; 16
    3ee0:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX3_B);
    3ee2:	a7 e2       	ldi	r26, 0x27	; 39
    3ee4:	b0 e0       	ldi	r27, 0x00	; 0
    3ee6:	e7 e2       	ldi	r30, 0x27	; 39
    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
    3eea:	80 81       	ld	r24, Z
    3eec:	88 60       	ori	r24, 0x08	; 8
    3eee:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    3ef0:	a7 e2       	ldi	r26, 0x27	; 39
    3ef2:	b0 e0       	ldi	r27, 0x00	; 0
    3ef4:	e7 e2       	ldi	r30, 0x27	; 39
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	80 81       	ld	r24, Z
    3efa:	8b 7f       	andi	r24, 0xFB	; 251
    3efc:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3efe:	a7 e2       	ldi	r26, 0x27	; 39
    3f00:	b0 e0       	ldi	r27, 0x00	; 0
    3f02:	e7 e2       	ldi	r30, 0x27	; 39
    3f04:	f0 e0       	ldi	r31, 0x00	; 0
    3f06:	80 81       	ld	r24, Z
    3f08:	8d 7f       	andi	r24, 0xFD	; 253
    3f0a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX0_B);
    3f0c:	a7 e2       	ldi	r26, 0x27	; 39
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	e7 e2       	ldi	r30, 0x27	; 39
    3f12:	f0 e0       	ldi	r31, 0x00	; 0
    3f14:	80 81       	ld	r24, Z
    3f16:	8e 7f       	andi	r24, 0xFE	; 254
    3f18:	8c 93       	st	X, r24
    3f1a:	9b c0       	rjmp	.+310    	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC1_ADC2_Gain_1X)
    3f1c:	89 81       	ldd	r24, Y+1	; 0x01
    3f1e:	84 31       	cpi	r24, 0x14	; 20
    3f20:	21 f5       	brne	.+72     	; 0x3f6a <ADC_Init2+0x674>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    3f22:	a7 e2       	ldi	r26, 0x27	; 39
    3f24:	b0 e0       	ldi	r27, 0x00	; 0
    3f26:	e7 e2       	ldi	r30, 0x27	; 39
    3f28:	f0 e0       	ldi	r31, 0x00	; 0
    3f2a:	80 81       	ld	r24, Z
    3f2c:	80 61       	ori	r24, 0x10	; 16
    3f2e:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX3_B);
    3f30:	a7 e2       	ldi	r26, 0x27	; 39
    3f32:	b0 e0       	ldi	r27, 0x00	; 0
    3f34:	e7 e2       	ldi	r30, 0x27	; 39
    3f36:	f0 e0       	ldi	r31, 0x00	; 0
    3f38:	80 81       	ld	r24, Z
    3f3a:	88 60       	ori	r24, 0x08	; 8
    3f3c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    3f3e:	a7 e2       	ldi	r26, 0x27	; 39
    3f40:	b0 e0       	ldi	r27, 0x00	; 0
    3f42:	e7 e2       	ldi	r30, 0x27	; 39
    3f44:	f0 e0       	ldi	r31, 0x00	; 0
    3f46:	80 81       	ld	r24, Z
    3f48:	8b 7f       	andi	r24, 0xFB	; 251
    3f4a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3f4c:	a7 e2       	ldi	r26, 0x27	; 39
    3f4e:	b0 e0       	ldi	r27, 0x00	; 0
    3f50:	e7 e2       	ldi	r30, 0x27	; 39
    3f52:	f0 e0       	ldi	r31, 0x00	; 0
    3f54:	80 81       	ld	r24, Z
    3f56:	8d 7f       	andi	r24, 0xFD	; 253
    3f58:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3f5a:	a7 e2       	ldi	r26, 0x27	; 39
    3f5c:	b0 e0       	ldi	r27, 0x00	; 0
    3f5e:	e7 e2       	ldi	r30, 0x27	; 39
    3f60:	f0 e0       	ldi	r31, 0x00	; 0
    3f62:	80 81       	ld	r24, Z
    3f64:	81 60       	ori	r24, 0x01	; 1
    3f66:	8c 93       	st	X, r24
    3f68:	74 c0       	rjmp	.+232    	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC3_ADC2_Gain_1X)
    3f6a:	89 81       	ldd	r24, Y+1	; 0x01
    3f6c:	85 31       	cpi	r24, 0x15	; 21
    3f6e:	21 f5       	brne	.+72     	; 0x3fb8 <ADC_Init2+0x6c2>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    3f70:	a7 e2       	ldi	r26, 0x27	; 39
    3f72:	b0 e0       	ldi	r27, 0x00	; 0
    3f74:	e7 e2       	ldi	r30, 0x27	; 39
    3f76:	f0 e0       	ldi	r31, 0x00	; 0
    3f78:	80 81       	ld	r24, Z
    3f7a:	80 61       	ori	r24, 0x10	; 16
    3f7c:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX3_B);
    3f7e:	a7 e2       	ldi	r26, 0x27	; 39
    3f80:	b0 e0       	ldi	r27, 0x00	; 0
    3f82:	e7 e2       	ldi	r30, 0x27	; 39
    3f84:	f0 e0       	ldi	r31, 0x00	; 0
    3f86:	80 81       	ld	r24, Z
    3f88:	88 60       	ori	r24, 0x08	; 8
    3f8a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX2_B);
    3f8c:	a7 e2       	ldi	r26, 0x27	; 39
    3f8e:	b0 e0       	ldi	r27, 0x00	; 0
    3f90:	e7 e2       	ldi	r30, 0x27	; 39
    3f92:	f0 e0       	ldi	r31, 0x00	; 0
    3f94:	80 81       	ld	r24, Z
    3f96:	8b 7f       	andi	r24, 0xFB	; 251
    3f98:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX1_B);
    3f9a:	a7 e2       	ldi	r26, 0x27	; 39
    3f9c:	b0 e0       	ldi	r27, 0x00	; 0
    3f9e:	e7 e2       	ldi	r30, 0x27	; 39
    3fa0:	f0 e0       	ldi	r31, 0x00	; 0
    3fa2:	80 81       	ld	r24, Z
    3fa4:	82 60       	ori	r24, 0x02	; 2
    3fa6:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    3fa8:	a7 e2       	ldi	r26, 0x27	; 39
    3faa:	b0 e0       	ldi	r27, 0x00	; 0
    3fac:	e7 e2       	ldi	r30, 0x27	; 39
    3fae:	f0 e0       	ldi	r31, 0x00	; 0
    3fb0:	80 81       	ld	r24, Z
    3fb2:	81 60       	ori	r24, 0x01	; 1
    3fb4:	8c 93       	st	X, r24
    3fb6:	4d c0       	rjmp	.+154    	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC4_ADC2_Gain_1X)
    3fb8:	89 81       	ldd	r24, Y+1	; 0x01
    3fba:	86 31       	cpi	r24, 0x16	; 22
    3fbc:	21 f5       	brne	.+72     	; 0x4006 <ADC_Init2+0x710>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    3fbe:	a7 e2       	ldi	r26, 0x27	; 39
    3fc0:	b0 e0       	ldi	r27, 0x00	; 0
    3fc2:	e7 e2       	ldi	r30, 0x27	; 39
    3fc4:	f0 e0       	ldi	r31, 0x00	; 0
    3fc6:	80 81       	ld	r24, Z
    3fc8:	80 61       	ori	r24, 0x10	; 16
    3fca:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX3_B);
    3fcc:	a7 e2       	ldi	r26, 0x27	; 39
    3fce:	b0 e0       	ldi	r27, 0x00	; 0
    3fd0:	e7 e2       	ldi	r30, 0x27	; 39
    3fd2:	f0 e0       	ldi	r31, 0x00	; 0
    3fd4:	80 81       	ld	r24, Z
    3fd6:	88 60       	ori	r24, 0x08	; 8
    3fd8:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    3fda:	a7 e2       	ldi	r26, 0x27	; 39
    3fdc:	b0 e0       	ldi	r27, 0x00	; 0
    3fde:	e7 e2       	ldi	r30, 0x27	; 39
    3fe0:	f0 e0       	ldi	r31, 0x00	; 0
    3fe2:	80 81       	ld	r24, Z
    3fe4:	84 60       	ori	r24, 0x04	; 4
    3fe6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    3fe8:	a7 e2       	ldi	r26, 0x27	; 39
    3fea:	b0 e0       	ldi	r27, 0x00	; 0
    3fec:	e7 e2       	ldi	r30, 0x27	; 39
    3fee:	f0 e0       	ldi	r31, 0x00	; 0
    3ff0:	80 81       	ld	r24, Z
    3ff2:	8d 7f       	andi	r24, 0xFD	; 253
    3ff4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX0_B);
    3ff6:	a7 e2       	ldi	r26, 0x27	; 39
    3ff8:	b0 e0       	ldi	r27, 0x00	; 0
    3ffa:	e7 e2       	ldi	r30, 0x27	; 39
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
    3ffe:	80 81       	ld	r24, Z
    4000:	8e 7f       	andi	r24, 0xFE	; 254
    4002:	8c 93       	st	X, r24
    4004:	26 c0       	rjmp	.+76     	; 0x4052 <ADC_Init2+0x75c>
	}else if(u8InputTerminlasCpy == Differential_Input_ADC5_ADC2_Gain_1X)
    4006:	89 81       	ldd	r24, Y+1	; 0x01
    4008:	87 31       	cpi	r24, 0x17	; 23
    400a:	19 f5       	brne	.+70     	; 0x4052 <ADC_Init2+0x75c>
	{
		SET_BIT(ADMUX_R,MUX4_B);
    400c:	a7 e2       	ldi	r26, 0x27	; 39
    400e:	b0 e0       	ldi	r27, 0x00	; 0
    4010:	e7 e2       	ldi	r30, 0x27	; 39
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	80 81       	ld	r24, Z
    4016:	80 61       	ori	r24, 0x10	; 16
    4018:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX3_B);
    401a:	a7 e2       	ldi	r26, 0x27	; 39
    401c:	b0 e0       	ldi	r27, 0x00	; 0
    401e:	e7 e2       	ldi	r30, 0x27	; 39
    4020:	f0 e0       	ldi	r31, 0x00	; 0
    4022:	80 81       	ld	r24, Z
    4024:	88 60       	ori	r24, 0x08	; 8
    4026:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX2_B);
    4028:	a7 e2       	ldi	r26, 0x27	; 39
    402a:	b0 e0       	ldi	r27, 0x00	; 0
    402c:	e7 e2       	ldi	r30, 0x27	; 39
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	80 81       	ld	r24, Z
    4032:	84 60       	ori	r24, 0x04	; 4
    4034:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_R,MUX1_B);
    4036:	a7 e2       	ldi	r26, 0x27	; 39
    4038:	b0 e0       	ldi	r27, 0x00	; 0
    403a:	e7 e2       	ldi	r30, 0x27	; 39
    403c:	f0 e0       	ldi	r31, 0x00	; 0
    403e:	80 81       	ld	r24, Z
    4040:	8d 7f       	andi	r24, 0xFD	; 253
    4042:	8c 93       	st	X, r24
		SET_BIT(ADMUX_R,MUX0_B);
    4044:	a7 e2       	ldi	r26, 0x27	; 39
    4046:	b0 e0       	ldi	r27, 0x00	; 0
    4048:	e7 e2       	ldi	r30, 0x27	; 39
    404a:	f0 e0       	ldi	r31, 0x00	; 0
    404c:	80 81       	ld	r24, Z
    404e:	81 60       	ori	r24, 0x01	; 1
    4050:	8c 93       	st	X, r24
	
	
	

	/* Select the clock */
	if(u8prescalercpy == CLK_BY_2)
    4052:	8a 81       	ldd	r24, Y+2	; 0x02
    4054:	88 23       	and	r24, r24
    4056:	b1 f4       	brne	.+44     	; 0x4084 <ADC_Init2+0x78e>
	{
		CLR_BIT(ADCSRA_R,ADPS2_B);
    4058:	a6 e2       	ldi	r26, 0x26	; 38
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	e6 e2       	ldi	r30, 0x26	; 38
    405e:	f0 e0       	ldi	r31, 0x00	; 0
    4060:	80 81       	ld	r24, Z
    4062:	8b 7f       	andi	r24, 0xFB	; 251
    4064:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA_R,ADPS1_B);
    4066:	a6 e2       	ldi	r26, 0x26	; 38
    4068:	b0 e0       	ldi	r27, 0x00	; 0
    406a:	e6 e2       	ldi	r30, 0x26	; 38
    406c:	f0 e0       	ldi	r31, 0x00	; 0
    406e:	80 81       	ld	r24, Z
    4070:	8d 7f       	andi	r24, 0xFD	; 253
    4072:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_R,ADPS0_B);
    4074:	a6 e2       	ldi	r26, 0x26	; 38
    4076:	b0 e0       	ldi	r27, 0x00	; 0
    4078:	e6 e2       	ldi	r30, 0x26	; 38
    407a:	f0 e0       	ldi	r31, 0x00	; 0
    407c:	80 81       	ld	r24, Z
    407e:	81 60       	ori	r24, 0x01	; 1
    4080:	8c 93       	st	X, r24
    4082:	95 c0       	rjmp	.+298    	; 0x41ae <ADC_Init2+0x8b8>
//		ADCSRA_R|=(1<<ADPS0_B);
	}else if(u8prescalercpy == CLK_BY_4)
    4084:	8a 81       	ldd	r24, Y+2	; 0x02
    4086:	81 30       	cpi	r24, 0x01	; 1
    4088:	b1 f4       	brne	.+44     	; 0x40b6 <ADC_Init2+0x7c0>
	{
		CLR_BIT(ADCSRA_R,ADPS2_B);
    408a:	a6 e2       	ldi	r26, 0x26	; 38
    408c:	b0 e0       	ldi	r27, 0x00	; 0
    408e:	e6 e2       	ldi	r30, 0x26	; 38
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	80 81       	ld	r24, Z
    4094:	8b 7f       	andi	r24, 0xFB	; 251
    4096:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_R,ADPS1_B);
    4098:	a6 e2       	ldi	r26, 0x26	; 38
    409a:	b0 e0       	ldi	r27, 0x00	; 0
    409c:	e6 e2       	ldi	r30, 0x26	; 38
    409e:	f0 e0       	ldi	r31, 0x00	; 0
    40a0:	80 81       	ld	r24, Z
    40a2:	82 60       	ori	r24, 0x02	; 2
    40a4:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA_R,ADPS0_B);
    40a6:	a6 e2       	ldi	r26, 0x26	; 38
    40a8:	b0 e0       	ldi	r27, 0x00	; 0
    40aa:	e6 e2       	ldi	r30, 0x26	; 38
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	80 81       	ld	r24, Z
    40b0:	8e 7f       	andi	r24, 0xFE	; 254
    40b2:	8c 93       	st	X, r24
    40b4:	7c c0       	rjmp	.+248    	; 0x41ae <ADC_Init2+0x8b8>
	}else if(u8prescalercpy == CLK_BY_8)
    40b6:	8a 81       	ldd	r24, Y+2	; 0x02
    40b8:	82 30       	cpi	r24, 0x02	; 2
    40ba:	b1 f4       	brne	.+44     	; 0x40e8 <ADC_Init2+0x7f2>
	{
		CLR_BIT(ADCSRA_R,ADPS2_B);
    40bc:	a6 e2       	ldi	r26, 0x26	; 38
    40be:	b0 e0       	ldi	r27, 0x00	; 0
    40c0:	e6 e2       	ldi	r30, 0x26	; 38
    40c2:	f0 e0       	ldi	r31, 0x00	; 0
    40c4:	80 81       	ld	r24, Z
    40c6:	8b 7f       	andi	r24, 0xFB	; 251
    40c8:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_R,ADPS1_B);
    40ca:	a6 e2       	ldi	r26, 0x26	; 38
    40cc:	b0 e0       	ldi	r27, 0x00	; 0
    40ce:	e6 e2       	ldi	r30, 0x26	; 38
    40d0:	f0 e0       	ldi	r31, 0x00	; 0
    40d2:	80 81       	ld	r24, Z
    40d4:	82 60       	ori	r24, 0x02	; 2
    40d6:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_R,ADPS0_B);
    40d8:	a6 e2       	ldi	r26, 0x26	; 38
    40da:	b0 e0       	ldi	r27, 0x00	; 0
    40dc:	e6 e2       	ldi	r30, 0x26	; 38
    40de:	f0 e0       	ldi	r31, 0x00	; 0
    40e0:	80 81       	ld	r24, Z
    40e2:	81 60       	ori	r24, 0x01	; 1
    40e4:	8c 93       	st	X, r24
    40e6:	63 c0       	rjmp	.+198    	; 0x41ae <ADC_Init2+0x8b8>
	}else if(u8prescalercpy == CLK_BY_16)
    40e8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ea:	83 30       	cpi	r24, 0x03	; 3
    40ec:	b1 f4       	brne	.+44     	; 0x411a <ADC_Init2+0x824>
	{
		SET_BIT(ADCSRA_R,ADPS2_B);
    40ee:	a6 e2       	ldi	r26, 0x26	; 38
    40f0:	b0 e0       	ldi	r27, 0x00	; 0
    40f2:	e6 e2       	ldi	r30, 0x26	; 38
    40f4:	f0 e0       	ldi	r31, 0x00	; 0
    40f6:	80 81       	ld	r24, Z
    40f8:	84 60       	ori	r24, 0x04	; 4
    40fa:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA_R,ADPS1_B);
    40fc:	a6 e2       	ldi	r26, 0x26	; 38
    40fe:	b0 e0       	ldi	r27, 0x00	; 0
    4100:	e6 e2       	ldi	r30, 0x26	; 38
    4102:	f0 e0       	ldi	r31, 0x00	; 0
    4104:	80 81       	ld	r24, Z
    4106:	8d 7f       	andi	r24, 0xFD	; 253
    4108:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA_R,ADPS0_B);
    410a:	a6 e2       	ldi	r26, 0x26	; 38
    410c:	b0 e0       	ldi	r27, 0x00	; 0
    410e:	e6 e2       	ldi	r30, 0x26	; 38
    4110:	f0 e0       	ldi	r31, 0x00	; 0
    4112:	80 81       	ld	r24, Z
    4114:	8e 7f       	andi	r24, 0xFE	; 254
    4116:	8c 93       	st	X, r24
    4118:	4a c0       	rjmp	.+148    	; 0x41ae <ADC_Init2+0x8b8>
	}else if(u8prescalercpy == CLK_BY_32)
    411a:	8a 81       	ldd	r24, Y+2	; 0x02
    411c:	84 30       	cpi	r24, 0x04	; 4
    411e:	b1 f4       	brne	.+44     	; 0x414c <ADC_Init2+0x856>
	{
		SET_BIT(ADCSRA_R,ADPS2_B);
    4120:	a6 e2       	ldi	r26, 0x26	; 38
    4122:	b0 e0       	ldi	r27, 0x00	; 0
    4124:	e6 e2       	ldi	r30, 0x26	; 38
    4126:	f0 e0       	ldi	r31, 0x00	; 0
    4128:	80 81       	ld	r24, Z
    412a:	84 60       	ori	r24, 0x04	; 4
    412c:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA_R,ADPS1_B);
    412e:	a6 e2       	ldi	r26, 0x26	; 38
    4130:	b0 e0       	ldi	r27, 0x00	; 0
    4132:	e6 e2       	ldi	r30, 0x26	; 38
    4134:	f0 e0       	ldi	r31, 0x00	; 0
    4136:	80 81       	ld	r24, Z
    4138:	8d 7f       	andi	r24, 0xFD	; 253
    413a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_R,ADPS0_B);
    413c:	a6 e2       	ldi	r26, 0x26	; 38
    413e:	b0 e0       	ldi	r27, 0x00	; 0
    4140:	e6 e2       	ldi	r30, 0x26	; 38
    4142:	f0 e0       	ldi	r31, 0x00	; 0
    4144:	80 81       	ld	r24, Z
    4146:	81 60       	ori	r24, 0x01	; 1
    4148:	8c 93       	st	X, r24
    414a:	31 c0       	rjmp	.+98     	; 0x41ae <ADC_Init2+0x8b8>
	}else if(u8prescalercpy == CLK_BY_64)
    414c:	8a 81       	ldd	r24, Y+2	; 0x02
    414e:	85 30       	cpi	r24, 0x05	; 5
    4150:	b1 f4       	brne	.+44     	; 0x417e <ADC_Init2+0x888>
	{
		SET_BIT(ADCSRA_R,ADPS2_B);
    4152:	a6 e2       	ldi	r26, 0x26	; 38
    4154:	b0 e0       	ldi	r27, 0x00	; 0
    4156:	e6 e2       	ldi	r30, 0x26	; 38
    4158:	f0 e0       	ldi	r31, 0x00	; 0
    415a:	80 81       	ld	r24, Z
    415c:	84 60       	ori	r24, 0x04	; 4
    415e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_R,ADPS1_B);
    4160:	a6 e2       	ldi	r26, 0x26	; 38
    4162:	b0 e0       	ldi	r27, 0x00	; 0
    4164:	e6 e2       	ldi	r30, 0x26	; 38
    4166:	f0 e0       	ldi	r31, 0x00	; 0
    4168:	80 81       	ld	r24, Z
    416a:	82 60       	ori	r24, 0x02	; 2
    416c:	8c 93       	st	X, r24
		CLR_BIT(ADCSRA_R,ADPS0_B);
    416e:	a6 e2       	ldi	r26, 0x26	; 38
    4170:	b0 e0       	ldi	r27, 0x00	; 0
    4172:	e6 e2       	ldi	r30, 0x26	; 38
    4174:	f0 e0       	ldi	r31, 0x00	; 0
    4176:	80 81       	ld	r24, Z
    4178:	8e 7f       	andi	r24, 0xFE	; 254
    417a:	8c 93       	st	X, r24
    417c:	18 c0       	rjmp	.+48     	; 0x41ae <ADC_Init2+0x8b8>
	}else if(u8prescalercpy == CLK_BY_128)
    417e:	8a 81       	ldd	r24, Y+2	; 0x02
    4180:	86 30       	cpi	r24, 0x06	; 6
    4182:	a9 f4       	brne	.+42     	; 0x41ae <ADC_Init2+0x8b8>
	{
		SET_BIT(ADCSRA_R,ADPS2_B);
    4184:	a6 e2       	ldi	r26, 0x26	; 38
    4186:	b0 e0       	ldi	r27, 0x00	; 0
    4188:	e6 e2       	ldi	r30, 0x26	; 38
    418a:	f0 e0       	ldi	r31, 0x00	; 0
    418c:	80 81       	ld	r24, Z
    418e:	84 60       	ori	r24, 0x04	; 4
    4190:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_R,ADPS1_B);
    4192:	a6 e2       	ldi	r26, 0x26	; 38
    4194:	b0 e0       	ldi	r27, 0x00	; 0
    4196:	e6 e2       	ldi	r30, 0x26	; 38
    4198:	f0 e0       	ldi	r31, 0x00	; 0
    419a:	80 81       	ld	r24, Z
    419c:	82 60       	ori	r24, 0x02	; 2
    419e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_R,ADPS0_B);
    41a0:	a6 e2       	ldi	r26, 0x26	; 38
    41a2:	b0 e0       	ldi	r27, 0x00	; 0
    41a4:	e6 e2       	ldi	r30, 0x26	; 38
    41a6:	f0 e0       	ldi	r31, 0x00	; 0
    41a8:	80 81       	ld	r24, Z
    41aa:	81 60       	ori	r24, 0x01	; 1
    41ac:	8c 93       	st	X, r24
	}
	
	return E_OK;
    41ae:	81 e0       	ldi	r24, 0x01	; 1
}
    41b0:	0f 90       	pop	r0
    41b2:	0f 90       	pop	r0
    41b4:	cf 91       	pop	r28
    41b6:	df 91       	pop	r29
    41b8:	08 95       	ret

000041ba <ADC_read_value>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Get the ADC reading
*************************************************************/
enuErrorStatus_t ADC_read_value(uint16_t* pu16data)
{
    41ba:	df 93       	push	r29
    41bc:	cf 93       	push	r28
    41be:	00 d0       	rcall	.+0      	; 0x41c0 <ADC_read_value+0x6>
    41c0:	cd b7       	in	r28, 0x3d	; 61
    41c2:	de b7       	in	r29, 0x3e	; 62
    41c4:	9a 83       	std	Y+2, r25	; 0x02
    41c6:	89 83       	std	Y+1, r24	; 0x01

	/* Starting the conversion */
	SET_BIT(ADCSRA_R,ADSC_B);
    41c8:	a6 e2       	ldi	r26, 0x26	; 38
    41ca:	b0 e0       	ldi	r27, 0x00	; 0
    41cc:	e6 e2       	ldi	r30, 0x26	; 38
    41ce:	f0 e0       	ldi	r31, 0x00	; 0
    41d0:	80 81       	ld	r24, Z
    41d2:	80 64       	ori	r24, 0x40	; 64
    41d4:	8c 93       	st	X, r24

	while(!GET_BIT(ADCSRA_R,ADIF_B)); //polling
    41d6:	e6 e2       	ldi	r30, 0x26	; 38
    41d8:	f0 e0       	ldi	r31, 0x00	; 0
    41da:	80 81       	ld	r24, Z
    41dc:	82 95       	swap	r24
    41de:	8f 70       	andi	r24, 0x0F	; 15
    41e0:	88 2f       	mov	r24, r24
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	81 70       	andi	r24, 0x01	; 1
    41e6:	90 70       	andi	r25, 0x00	; 0
    41e8:	00 97       	sbiw	r24, 0x00	; 0
    41ea:	a9 f3       	breq	.-22     	; 0x41d6 <ADC_read_value+0x1c>

	/* Clear the flag */
	SET_BIT(ADCSRA_R,ADIF_B);
    41ec:	a6 e2       	ldi	r26, 0x26	; 38
    41ee:	b0 e0       	ldi	r27, 0x00	; 0
    41f0:	e6 e2       	ldi	r30, 0x26	; 38
    41f2:	f0 e0       	ldi	r31, 0x00	; 0
    41f4:	80 81       	ld	r24, Z
    41f6:	80 61       	ori	r24, 0x10	; 16
    41f8:	8c 93       	st	X, r24

	/* Returning the data */
	if(gAdjust = Right_Adjusted)
    41fa:	81 e0       	ldi	r24, 0x01	; 1
    41fc:	80 93 a0 00 	sts	0x00A0, r24
	{
		*pu16data=(ADCL_R) | ((ADCH_R)<<8);
    4200:	e4 e2       	ldi	r30, 0x24	; 36
    4202:	f0 e0       	ldi	r31, 0x00	; 0
    4204:	80 81       	ld	r24, Z
    4206:	28 2f       	mov	r18, r24
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	e5 e2       	ldi	r30, 0x25	; 37
    420c:	f0 e0       	ldi	r31, 0x00	; 0
    420e:	80 81       	ld	r24, Z
    4210:	88 2f       	mov	r24, r24
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	98 2f       	mov	r25, r24
    4216:	88 27       	eor	r24, r24
    4218:	82 2b       	or	r24, r18
    421a:	93 2b       	or	r25, r19
    421c:	e9 81       	ldd	r30, Y+1	; 0x01
    421e:	fa 81       	ldd	r31, Y+2	; 0x02
    4220:	91 83       	std	Z+1, r25	; 0x01
    4222:	80 83       	st	Z, r24
	}else if(gAdjust = Left_Adjusted)
	{
		*pu16data = (uint16_t)ADCH_R;
	}

	return E_OK;
    4224:	81 e0       	ldi	r24, 0x01	; 1
}
    4226:	0f 90       	pop	r0
    4228:	0f 90       	pop	r0
    422a:	cf 91       	pop	r28
    422c:	df 91       	pop	r29
    422e:	08 95       	ret

00004230 <LCD_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : LCD initialization
*************************************************************/
enuErrorStatus_t LCD_Init(void)
{
    4230:	0f 93       	push	r16
    4232:	1f 93       	push	r17
    4234:	df 93       	push	r29
    4236:	cf 93       	push	r28
    4238:	cd b7       	in	r28, 0x3d	; 61
    423a:	de b7       	in	r29, 0x3e	; 62
    423c:	c6 54       	subi	r28, 0x46	; 70
    423e:	d0 40       	sbci	r29, 0x00	; 0
    4240:	0f b6       	in	r0, 0x3f	; 63
    4242:	f8 94       	cli
    4244:	de bf       	out	0x3e, r29	; 62
    4246:	0f be       	out	0x3f, r0	; 63
    4248:	cd bf       	out	0x3d, r28	; 61

	DDRC_R=0x07;
    424a:	e4 e3       	ldi	r30, 0x34	; 52
    424c:	f0 e0       	ldi	r31, 0x00	; 0
    424e:	87 e0       	ldi	r24, 0x07	; 7
    4250:	80 83       	st	Z, r24
		DATA_PORT_DIRECTION=0xFF;
		_delay_ms(30);
		LCD_SendCMD(LCD_TwoLine_NonBold);
	}else if(Mode == 4)
	{
		DATA_PORT_DIRECTION=0xF0;
    4252:	ea e3       	ldi	r30, 0x3A	; 58
    4254:	f0 e0       	ldi	r31, 0x00	; 0
    4256:	80 ef       	ldi	r24, 0xF0	; 240
    4258:	80 83       	st	Z, r24
    425a:	fe 01       	movw	r30, r28
    425c:	ed 5b       	subi	r30, 0xBD	; 189
    425e:	ff 4f       	sbci	r31, 0xFF	; 255
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	a0 ef       	ldi	r26, 0xF0	; 240
    4266:	b1 e4       	ldi	r27, 0x41	; 65
    4268:	80 83       	st	Z, r24
    426a:	91 83       	std	Z+1, r25	; 0x01
    426c:	a2 83       	std	Z+2, r26	; 0x02
    426e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4270:	8e 01       	movw	r16, r28
    4272:	01 5c       	subi	r16, 0xC1	; 193
    4274:	1f 4f       	sbci	r17, 0xFF	; 255
    4276:	fe 01       	movw	r30, r28
    4278:	ed 5b       	subi	r30, 0xBD	; 189
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	60 81       	ld	r22, Z
    427e:	71 81       	ldd	r23, Z+1	; 0x01
    4280:	82 81       	ldd	r24, Z+2	; 0x02
    4282:	93 81       	ldd	r25, Z+3	; 0x03
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	4a ef       	ldi	r20, 0xFA	; 250
    428a:	54 e4       	ldi	r21, 0x44	; 68
    428c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	f8 01       	movw	r30, r16
    4296:	80 83       	st	Z, r24
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	a2 83       	std	Z+2, r26	; 0x02
    429c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    429e:	fe 01       	movw	r30, r28
    42a0:	ff 96       	adiw	r30, 0x3f	; 63
    42a2:	60 81       	ld	r22, Z
    42a4:	71 81       	ldd	r23, Z+1	; 0x01
    42a6:	82 81       	ldd	r24, Z+2	; 0x02
    42a8:	93 81       	ldd	r25, Z+3	; 0x03
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	30 e0       	ldi	r19, 0x00	; 0
    42ae:	40 e8       	ldi	r20, 0x80	; 128
    42b0:	5f e3       	ldi	r21, 0x3F	; 63
    42b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42b6:	88 23       	and	r24, r24
    42b8:	2c f4       	brge	.+10     	; 0x42c4 <LCD_Init+0x94>
		__ticks = 1;
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	9e af       	std	Y+62, r25	; 0x3e
    42c0:	8d af       	std	Y+61, r24	; 0x3d
    42c2:	46 c0       	rjmp	.+140    	; 0x4350 <LCD_Init+0x120>
	else if (__tmp > 65535)
    42c4:	fe 01       	movw	r30, r28
    42c6:	ff 96       	adiw	r30, 0x3f	; 63
    42c8:	60 81       	ld	r22, Z
    42ca:	71 81       	ldd	r23, Z+1	; 0x01
    42cc:	82 81       	ldd	r24, Z+2	; 0x02
    42ce:	93 81       	ldd	r25, Z+3	; 0x03
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	3f ef       	ldi	r19, 0xFF	; 255
    42d4:	4f e7       	ldi	r20, 0x7F	; 127
    42d6:	57 e4       	ldi	r21, 0x47	; 71
    42d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42dc:	18 16       	cp	r1, r24
    42de:	64 f5       	brge	.+88     	; 0x4338 <LCD_Init+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e0:	fe 01       	movw	r30, r28
    42e2:	ed 5b       	subi	r30, 0xBD	; 189
    42e4:	ff 4f       	sbci	r31, 0xFF	; 255
    42e6:	60 81       	ld	r22, Z
    42e8:	71 81       	ldd	r23, Z+1	; 0x01
    42ea:	82 81       	ldd	r24, Z+2	; 0x02
    42ec:	93 81       	ldd	r25, Z+3	; 0x03
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	40 e2       	ldi	r20, 0x20	; 32
    42f4:	51 e4       	ldi	r21, 0x41	; 65
    42f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	bc 01       	movw	r22, r24
    4300:	cd 01       	movw	r24, r26
    4302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	9e af       	std	Y+62, r25	; 0x3e
    430c:	8d af       	std	Y+61, r24	; 0x3d
    430e:	0f c0       	rjmp	.+30     	; 0x432e <LCD_Init+0xfe>
    4310:	88 ec       	ldi	r24, 0xC8	; 200
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	9c af       	std	Y+60, r25	; 0x3c
    4316:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4318:	8b ad       	ldd	r24, Y+59	; 0x3b
    431a:	9c ad       	ldd	r25, Y+60	; 0x3c
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	f1 f7       	brne	.-4      	; 0x431c <LCD_Init+0xec>
    4320:	9c af       	std	Y+60, r25	; 0x3c
    4322:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4324:	8d ad       	ldd	r24, Y+61	; 0x3d
    4326:	9e ad       	ldd	r25, Y+62	; 0x3e
    4328:	01 97       	sbiw	r24, 0x01	; 1
    432a:	9e af       	std	Y+62, r25	; 0x3e
    432c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    432e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4330:	9e ad       	ldd	r25, Y+62	; 0x3e
    4332:	00 97       	sbiw	r24, 0x00	; 0
    4334:	69 f7       	brne	.-38     	; 0x4310 <LCD_Init+0xe0>
    4336:	16 c0       	rjmp	.+44     	; 0x4364 <LCD_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4338:	fe 01       	movw	r30, r28
    433a:	ff 96       	adiw	r30, 0x3f	; 63
    433c:	60 81       	ld	r22, Z
    433e:	71 81       	ldd	r23, Z+1	; 0x01
    4340:	82 81       	ldd	r24, Z+2	; 0x02
    4342:	93 81       	ldd	r25, Z+3	; 0x03
    4344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	9e af       	std	Y+62, r25	; 0x3e
    434e:	8d af       	std	Y+61, r24	; 0x3d
    4350:	8d ad       	ldd	r24, Y+61	; 0x3d
    4352:	9e ad       	ldd	r25, Y+62	; 0x3e
    4354:	9a af       	std	Y+58, r25	; 0x3a
    4356:	89 af       	std	Y+57, r24	; 0x39
    4358:	89 ad       	ldd	r24, Y+57	; 0x39
    435a:	9a ad       	ldd	r25, Y+58	; 0x3a
    435c:	01 97       	sbiw	r24, 0x01	; 1
    435e:	f1 f7       	brne	.-4      	; 0x435c <LCD_Init+0x12c>
    4360:	9a af       	std	Y+58, r25	; 0x3a
    4362:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(30);
		LCD_SendCMD(0x02);
    4364:	82 e0       	ldi	r24, 0x02	; 2
    4366:	0e 94 93 23 	call	0x4726	; 0x4726 <LCD_SendCMD>
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	a0 e0       	ldi	r26, 0x00	; 0
    4370:	b0 e4       	ldi	r27, 0x40	; 64
    4372:	8d ab       	std	Y+53, r24	; 0x35
    4374:	9e ab       	std	Y+54, r25	; 0x36
    4376:	af ab       	std	Y+55, r26	; 0x37
    4378:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    437a:	6d a9       	ldd	r22, Y+53	; 0x35
    437c:	7e a9       	ldd	r23, Y+54	; 0x36
    437e:	8f a9       	ldd	r24, Y+55	; 0x37
    4380:	98 ad       	ldd	r25, Y+56	; 0x38
    4382:	20 e0       	ldi	r18, 0x00	; 0
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	4a ef       	ldi	r20, 0xFA	; 250
    4388:	54 e4       	ldi	r21, 0x44	; 68
    438a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    438e:	dc 01       	movw	r26, r24
    4390:	cb 01       	movw	r24, r22
    4392:	89 ab       	std	Y+49, r24	; 0x31
    4394:	9a ab       	std	Y+50, r25	; 0x32
    4396:	ab ab       	std	Y+51, r26	; 0x33
    4398:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    439a:	69 a9       	ldd	r22, Y+49	; 0x31
    439c:	7a a9       	ldd	r23, Y+50	; 0x32
    439e:	8b a9       	ldd	r24, Y+51	; 0x33
    43a0:	9c a9       	ldd	r25, Y+52	; 0x34
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	40 e8       	ldi	r20, 0x80	; 128
    43a8:	5f e3       	ldi	r21, 0x3F	; 63
    43aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43ae:	88 23       	and	r24, r24
    43b0:	2c f4       	brge	.+10     	; 0x43bc <LCD_Init+0x18c>
		__ticks = 1;
    43b2:	81 e0       	ldi	r24, 0x01	; 1
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	98 ab       	std	Y+48, r25	; 0x30
    43b8:	8f a7       	std	Y+47, r24	; 0x2f
    43ba:	3f c0       	rjmp	.+126    	; 0x443a <LCD_Init+0x20a>
	else if (__tmp > 65535)
    43bc:	69 a9       	ldd	r22, Y+49	; 0x31
    43be:	7a a9       	ldd	r23, Y+50	; 0x32
    43c0:	8b a9       	ldd	r24, Y+51	; 0x33
    43c2:	9c a9       	ldd	r25, Y+52	; 0x34
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	3f ef       	ldi	r19, 0xFF	; 255
    43c8:	4f e7       	ldi	r20, 0x7F	; 127
    43ca:	57 e4       	ldi	r21, 0x47	; 71
    43cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43d0:	18 16       	cp	r1, r24
    43d2:	4c f5       	brge	.+82     	; 0x4426 <LCD_Init+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43d4:	6d a9       	ldd	r22, Y+53	; 0x35
    43d6:	7e a9       	ldd	r23, Y+54	; 0x36
    43d8:	8f a9       	ldd	r24, Y+55	; 0x37
    43da:	98 ad       	ldd	r25, Y+56	; 0x38
    43dc:	20 e0       	ldi	r18, 0x00	; 0
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	40 e2       	ldi	r20, 0x20	; 32
    43e2:	51 e4       	ldi	r21, 0x41	; 65
    43e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e8:	dc 01       	movw	r26, r24
    43ea:	cb 01       	movw	r24, r22
    43ec:	bc 01       	movw	r22, r24
    43ee:	cd 01       	movw	r24, r26
    43f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	98 ab       	std	Y+48, r25	; 0x30
    43fa:	8f a7       	std	Y+47, r24	; 0x2f
    43fc:	0f c0       	rjmp	.+30     	; 0x441c <LCD_Init+0x1ec>
    43fe:	88 ec       	ldi	r24, 0xC8	; 200
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	9e a7       	std	Y+46, r25	; 0x2e
    4404:	8d a7       	std	Y+45, r24	; 0x2d
    4406:	8d a5       	ldd	r24, Y+45	; 0x2d
    4408:	9e a5       	ldd	r25, Y+46	; 0x2e
    440a:	01 97       	sbiw	r24, 0x01	; 1
    440c:	f1 f7       	brne	.-4      	; 0x440a <LCD_Init+0x1da>
    440e:	9e a7       	std	Y+46, r25	; 0x2e
    4410:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4412:	8f a5       	ldd	r24, Y+47	; 0x2f
    4414:	98 a9       	ldd	r25, Y+48	; 0x30
    4416:	01 97       	sbiw	r24, 0x01	; 1
    4418:	98 ab       	std	Y+48, r25	; 0x30
    441a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    441c:	8f a5       	ldd	r24, Y+47	; 0x2f
    441e:	98 a9       	ldd	r25, Y+48	; 0x30
    4420:	00 97       	sbiw	r24, 0x00	; 0
    4422:	69 f7       	brne	.-38     	; 0x43fe <LCD_Init+0x1ce>
    4424:	14 c0       	rjmp	.+40     	; 0x444e <LCD_Init+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4426:	69 a9       	ldd	r22, Y+49	; 0x31
    4428:	7a a9       	ldd	r23, Y+50	; 0x32
    442a:	8b a9       	ldd	r24, Y+51	; 0x33
    442c:	9c a9       	ldd	r25, Y+52	; 0x34
    442e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4432:	dc 01       	movw	r26, r24
    4434:	cb 01       	movw	r24, r22
    4436:	98 ab       	std	Y+48, r25	; 0x30
    4438:	8f a7       	std	Y+47, r24	; 0x2f
    443a:	8f a5       	ldd	r24, Y+47	; 0x2f
    443c:	98 a9       	ldd	r25, Y+48	; 0x30
    443e:	9c a7       	std	Y+44, r25	; 0x2c
    4440:	8b a7       	std	Y+43, r24	; 0x2b
    4442:	8b a5       	ldd	r24, Y+43	; 0x2b
    4444:	9c a5       	ldd	r25, Y+44	; 0x2c
    4446:	01 97       	sbiw	r24, 0x01	; 1
    4448:	f1 f7       	brne	.-4      	; 0x4446 <LCD_Init+0x216>
    444a:	9c a7       	std	Y+44, r25	; 0x2c
    444c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);
		LCD_SendCMD(0x28);
    444e:	88 e2       	ldi	r24, 0x28	; 40
    4450:	0e 94 93 23 	call	0x4726	; 0x4726 <LCD_SendCMD>
    4454:	80 e0       	ldi	r24, 0x00	; 0
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	a0 e0       	ldi	r26, 0x00	; 0
    445a:	b0 e4       	ldi	r27, 0x40	; 64
    445c:	8f a3       	std	Y+39, r24	; 0x27
    445e:	98 a7       	std	Y+40, r25	; 0x28
    4460:	a9 a7       	std	Y+41, r26	; 0x29
    4462:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4464:	6f a1       	ldd	r22, Y+39	; 0x27
    4466:	78 a5       	ldd	r23, Y+40	; 0x28
    4468:	89 a5       	ldd	r24, Y+41	; 0x29
    446a:	9a a5       	ldd	r25, Y+42	; 0x2a
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	4a ef       	ldi	r20, 0xFA	; 250
    4472:	54 e4       	ldi	r21, 0x44	; 68
    4474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4478:	dc 01       	movw	r26, r24
    447a:	cb 01       	movw	r24, r22
    447c:	8b a3       	std	Y+35, r24	; 0x23
    447e:	9c a3       	std	Y+36, r25	; 0x24
    4480:	ad a3       	std	Y+37, r26	; 0x25
    4482:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4484:	6b a1       	ldd	r22, Y+35	; 0x23
    4486:	7c a1       	ldd	r23, Y+36	; 0x24
    4488:	8d a1       	ldd	r24, Y+37	; 0x25
    448a:	9e a1       	ldd	r25, Y+38	; 0x26
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	40 e8       	ldi	r20, 0x80	; 128
    4492:	5f e3       	ldi	r21, 0x3F	; 63
    4494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4498:	88 23       	and	r24, r24
    449a:	2c f4       	brge	.+10     	; 0x44a6 <LCD_Init+0x276>
		__ticks = 1;
    449c:	81 e0       	ldi	r24, 0x01	; 1
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	9a a3       	std	Y+34, r25	; 0x22
    44a2:	89 a3       	std	Y+33, r24	; 0x21
    44a4:	3f c0       	rjmp	.+126    	; 0x4524 <LCD_Init+0x2f4>
	else if (__tmp > 65535)
    44a6:	6b a1       	ldd	r22, Y+35	; 0x23
    44a8:	7c a1       	ldd	r23, Y+36	; 0x24
    44aa:	8d a1       	ldd	r24, Y+37	; 0x25
    44ac:	9e a1       	ldd	r25, Y+38	; 0x26
    44ae:	20 e0       	ldi	r18, 0x00	; 0
    44b0:	3f ef       	ldi	r19, 0xFF	; 255
    44b2:	4f e7       	ldi	r20, 0x7F	; 127
    44b4:	57 e4       	ldi	r21, 0x47	; 71
    44b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44ba:	18 16       	cp	r1, r24
    44bc:	4c f5       	brge	.+82     	; 0x4510 <LCD_Init+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44be:	6f a1       	ldd	r22, Y+39	; 0x27
    44c0:	78 a5       	ldd	r23, Y+40	; 0x28
    44c2:	89 a5       	ldd	r24, Y+41	; 0x29
    44c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	40 e2       	ldi	r20, 0x20	; 32
    44cc:	51 e4       	ldi	r21, 0x41	; 65
    44ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	bc 01       	movw	r22, r24
    44d8:	cd 01       	movw	r24, r26
    44da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	9a a3       	std	Y+34, r25	; 0x22
    44e4:	89 a3       	std	Y+33, r24	; 0x21
    44e6:	0f c0       	rjmp	.+30     	; 0x4506 <LCD_Init+0x2d6>
    44e8:	88 ec       	ldi	r24, 0xC8	; 200
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	98 a3       	std	Y+32, r25	; 0x20
    44ee:	8f 8f       	std	Y+31, r24	; 0x1f
    44f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44f2:	98 a1       	ldd	r25, Y+32	; 0x20
    44f4:	01 97       	sbiw	r24, 0x01	; 1
    44f6:	f1 f7       	brne	.-4      	; 0x44f4 <LCD_Init+0x2c4>
    44f8:	98 a3       	std	Y+32, r25	; 0x20
    44fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44fc:	89 a1       	ldd	r24, Y+33	; 0x21
    44fe:	9a a1       	ldd	r25, Y+34	; 0x22
    4500:	01 97       	sbiw	r24, 0x01	; 1
    4502:	9a a3       	std	Y+34, r25	; 0x22
    4504:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4506:	89 a1       	ldd	r24, Y+33	; 0x21
    4508:	9a a1       	ldd	r25, Y+34	; 0x22
    450a:	00 97       	sbiw	r24, 0x00	; 0
    450c:	69 f7       	brne	.-38     	; 0x44e8 <LCD_Init+0x2b8>
    450e:	14 c0       	rjmp	.+40     	; 0x4538 <LCD_Init+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4510:	6b a1       	ldd	r22, Y+35	; 0x23
    4512:	7c a1       	ldd	r23, Y+36	; 0x24
    4514:	8d a1       	ldd	r24, Y+37	; 0x25
    4516:	9e a1       	ldd	r25, Y+38	; 0x26
    4518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451c:	dc 01       	movw	r26, r24
    451e:	cb 01       	movw	r24, r22
    4520:	9a a3       	std	Y+34, r25	; 0x22
    4522:	89 a3       	std	Y+33, r24	; 0x21
    4524:	89 a1       	ldd	r24, Y+33	; 0x21
    4526:	9a a1       	ldd	r25, Y+34	; 0x22
    4528:	9e 8f       	std	Y+30, r25	; 0x1e
    452a:	8d 8f       	std	Y+29, r24	; 0x1d
    452c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    452e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4530:	01 97       	sbiw	r24, 0x01	; 1
    4532:	f1 f7       	brne	.-4      	; 0x4530 <LCD_Init+0x300>
    4534:	9e 8f       	std	Y+30, r25	; 0x1e
    4536:	8d 8f       	std	Y+29, r24	; 0x1d

	}

	_delay_ms(2);
	LCD_SendCMD(LCD_Cursor_OFF);
    4538:	8c e0       	ldi	r24, 0x0C	; 12
    453a:	0e 94 93 23 	call	0x4726	; 0x4726 <LCD_SendCMD>
    453e:	80 e0       	ldi	r24, 0x00	; 0
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	a0 e0       	ldi	r26, 0x00	; 0
    4544:	b0 e4       	ldi	r27, 0x40	; 64
    4546:	89 8f       	std	Y+25, r24	; 0x19
    4548:	9a 8f       	std	Y+26, r25	; 0x1a
    454a:	ab 8f       	std	Y+27, r26	; 0x1b
    454c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    454e:	69 8d       	ldd	r22, Y+25	; 0x19
    4550:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4552:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4554:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	4a ef       	ldi	r20, 0xFA	; 250
    455c:	54 e4       	ldi	r21, 0x44	; 68
    455e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4562:	dc 01       	movw	r26, r24
    4564:	cb 01       	movw	r24, r22
    4566:	8d 8b       	std	Y+21, r24	; 0x15
    4568:	9e 8b       	std	Y+22, r25	; 0x16
    456a:	af 8b       	std	Y+23, r26	; 0x17
    456c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    456e:	6d 89       	ldd	r22, Y+21	; 0x15
    4570:	7e 89       	ldd	r23, Y+22	; 0x16
    4572:	8f 89       	ldd	r24, Y+23	; 0x17
    4574:	98 8d       	ldd	r25, Y+24	; 0x18
    4576:	20 e0       	ldi	r18, 0x00	; 0
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	40 e8       	ldi	r20, 0x80	; 128
    457c:	5f e3       	ldi	r21, 0x3F	; 63
    457e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4582:	88 23       	and	r24, r24
    4584:	2c f4       	brge	.+10     	; 0x4590 <LCD_Init+0x360>
		__ticks = 1;
    4586:	81 e0       	ldi	r24, 0x01	; 1
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	9c 8b       	std	Y+20, r25	; 0x14
    458c:	8b 8b       	std	Y+19, r24	; 0x13
    458e:	3f c0       	rjmp	.+126    	; 0x460e <LCD_Init+0x3de>
	else if (__tmp > 65535)
    4590:	6d 89       	ldd	r22, Y+21	; 0x15
    4592:	7e 89       	ldd	r23, Y+22	; 0x16
    4594:	8f 89       	ldd	r24, Y+23	; 0x17
    4596:	98 8d       	ldd	r25, Y+24	; 0x18
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	3f ef       	ldi	r19, 0xFF	; 255
    459c:	4f e7       	ldi	r20, 0x7F	; 127
    459e:	57 e4       	ldi	r21, 0x47	; 71
    45a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45a4:	18 16       	cp	r1, r24
    45a6:	4c f5       	brge	.+82     	; 0x45fa <LCD_Init+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45a8:	69 8d       	ldd	r22, Y+25	; 0x19
    45aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	30 e0       	ldi	r19, 0x00	; 0
    45b4:	40 e2       	ldi	r20, 0x20	; 32
    45b6:	51 e4       	ldi	r21, 0x41	; 65
    45b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	bc 01       	movw	r22, r24
    45c2:	cd 01       	movw	r24, r26
    45c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c8:	dc 01       	movw	r26, r24
    45ca:	cb 01       	movw	r24, r22
    45cc:	9c 8b       	std	Y+20, r25	; 0x14
    45ce:	8b 8b       	std	Y+19, r24	; 0x13
    45d0:	0f c0       	rjmp	.+30     	; 0x45f0 <LCD_Init+0x3c0>
    45d2:	88 ec       	ldi	r24, 0xC8	; 200
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	9a 8b       	std	Y+18, r25	; 0x12
    45d8:	89 8b       	std	Y+17, r24	; 0x11
    45da:	89 89       	ldd	r24, Y+17	; 0x11
    45dc:	9a 89       	ldd	r25, Y+18	; 0x12
    45de:	01 97       	sbiw	r24, 0x01	; 1
    45e0:	f1 f7       	brne	.-4      	; 0x45de <LCD_Init+0x3ae>
    45e2:	9a 8b       	std	Y+18, r25	; 0x12
    45e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e6:	8b 89       	ldd	r24, Y+19	; 0x13
    45e8:	9c 89       	ldd	r25, Y+20	; 0x14
    45ea:	01 97       	sbiw	r24, 0x01	; 1
    45ec:	9c 8b       	std	Y+20, r25	; 0x14
    45ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45f0:	8b 89       	ldd	r24, Y+19	; 0x13
    45f2:	9c 89       	ldd	r25, Y+20	; 0x14
    45f4:	00 97       	sbiw	r24, 0x00	; 0
    45f6:	69 f7       	brne	.-38     	; 0x45d2 <LCD_Init+0x3a2>
    45f8:	14 c0       	rjmp	.+40     	; 0x4622 <LCD_Init+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45fa:	6d 89       	ldd	r22, Y+21	; 0x15
    45fc:	7e 89       	ldd	r23, Y+22	; 0x16
    45fe:	8f 89       	ldd	r24, Y+23	; 0x17
    4600:	98 8d       	ldd	r25, Y+24	; 0x18
    4602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4606:	dc 01       	movw	r26, r24
    4608:	cb 01       	movw	r24, r22
    460a:	9c 8b       	std	Y+20, r25	; 0x14
    460c:	8b 8b       	std	Y+19, r24	; 0x13
    460e:	8b 89       	ldd	r24, Y+19	; 0x13
    4610:	9c 89       	ldd	r25, Y+20	; 0x14
    4612:	98 8b       	std	Y+16, r25	; 0x10
    4614:	8f 87       	std	Y+15, r24	; 0x0f
    4616:	8f 85       	ldd	r24, Y+15	; 0x0f
    4618:	98 89       	ldd	r25, Y+16	; 0x10
    461a:	01 97       	sbiw	r24, 0x01	; 1
    461c:	f1 f7       	brne	.-4      	; 0x461a <LCD_Init+0x3ea>
    461e:	98 8b       	std	Y+16, r25	; 0x10
    4620:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_SendCMD(0b00000001);
    4622:	81 e0       	ldi	r24, 0x01	; 1
    4624:	0e 94 93 23 	call	0x4726	; 0x4726 <LCD_SendCMD>
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	a0 ef       	ldi	r26, 0xF0	; 240
    462e:	b1 e4       	ldi	r27, 0x41	; 65
    4630:	8b 87       	std	Y+11, r24	; 0x0b
    4632:	9c 87       	std	Y+12, r25	; 0x0c
    4634:	ad 87       	std	Y+13, r26	; 0x0d
    4636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4638:	6b 85       	ldd	r22, Y+11	; 0x0b
    463a:	7c 85       	ldd	r23, Y+12	; 0x0c
    463c:	8d 85       	ldd	r24, Y+13	; 0x0d
    463e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	4a ef       	ldi	r20, 0xFA	; 250
    4646:	54 e4       	ldi	r21, 0x44	; 68
    4648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    464c:	dc 01       	movw	r26, r24
    464e:	cb 01       	movw	r24, r22
    4650:	8f 83       	std	Y+7, r24	; 0x07
    4652:	98 87       	std	Y+8, r25	; 0x08
    4654:	a9 87       	std	Y+9, r26	; 0x09
    4656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4658:	6f 81       	ldd	r22, Y+7	; 0x07
    465a:	78 85       	ldd	r23, Y+8	; 0x08
    465c:	89 85       	ldd	r24, Y+9	; 0x09
    465e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4660:	20 e0       	ldi	r18, 0x00	; 0
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	40 e8       	ldi	r20, 0x80	; 128
    4666:	5f e3       	ldi	r21, 0x3F	; 63
    4668:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    466c:	88 23       	and	r24, r24
    466e:	2c f4       	brge	.+10     	; 0x467a <LCD_Init+0x44a>
		__ticks = 1;
    4670:	81 e0       	ldi	r24, 0x01	; 1
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	9e 83       	std	Y+6, r25	; 0x06
    4676:	8d 83       	std	Y+5, r24	; 0x05
    4678:	3f c0       	rjmp	.+126    	; 0x46f8 <LCD_Init+0x4c8>
	else if (__tmp > 65535)
    467a:	6f 81       	ldd	r22, Y+7	; 0x07
    467c:	78 85       	ldd	r23, Y+8	; 0x08
    467e:	89 85       	ldd	r24, Y+9	; 0x09
    4680:	9a 85       	ldd	r25, Y+10	; 0x0a
    4682:	20 e0       	ldi	r18, 0x00	; 0
    4684:	3f ef       	ldi	r19, 0xFF	; 255
    4686:	4f e7       	ldi	r20, 0x7F	; 127
    4688:	57 e4       	ldi	r21, 0x47	; 71
    468a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    468e:	18 16       	cp	r1, r24
    4690:	4c f5       	brge	.+82     	; 0x46e4 <LCD_Init+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4692:	6b 85       	ldd	r22, Y+11	; 0x0b
    4694:	7c 85       	ldd	r23, Y+12	; 0x0c
    4696:	8d 85       	ldd	r24, Y+13	; 0x0d
    4698:	9e 85       	ldd	r25, Y+14	; 0x0e
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	40 e2       	ldi	r20, 0x20	; 32
    46a0:	51 e4       	ldi	r21, 0x41	; 65
    46a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a6:	dc 01       	movw	r26, r24
    46a8:	cb 01       	movw	r24, r22
    46aa:	bc 01       	movw	r22, r24
    46ac:	cd 01       	movw	r24, r26
    46ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b2:	dc 01       	movw	r26, r24
    46b4:	cb 01       	movw	r24, r22
    46b6:	9e 83       	std	Y+6, r25	; 0x06
    46b8:	8d 83       	std	Y+5, r24	; 0x05
    46ba:	0f c0       	rjmp	.+30     	; 0x46da <LCD_Init+0x4aa>
    46bc:	88 ec       	ldi	r24, 0xC8	; 200
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	9c 83       	std	Y+4, r25	; 0x04
    46c2:	8b 83       	std	Y+3, r24	; 0x03
    46c4:	8b 81       	ldd	r24, Y+3	; 0x03
    46c6:	9c 81       	ldd	r25, Y+4	; 0x04
    46c8:	01 97       	sbiw	r24, 0x01	; 1
    46ca:	f1 f7       	brne	.-4      	; 0x46c8 <LCD_Init+0x498>
    46cc:	9c 83       	std	Y+4, r25	; 0x04
    46ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46d0:	8d 81       	ldd	r24, Y+5	; 0x05
    46d2:	9e 81       	ldd	r25, Y+6	; 0x06
    46d4:	01 97       	sbiw	r24, 0x01	; 1
    46d6:	9e 83       	std	Y+6, r25	; 0x06
    46d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46da:	8d 81       	ldd	r24, Y+5	; 0x05
    46dc:	9e 81       	ldd	r25, Y+6	; 0x06
    46de:	00 97       	sbiw	r24, 0x00	; 0
    46e0:	69 f7       	brne	.-38     	; 0x46bc <LCD_Init+0x48c>
    46e2:	14 c0       	rjmp	.+40     	; 0x470c <LCD_Init+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46e4:	6f 81       	ldd	r22, Y+7	; 0x07
    46e6:	78 85       	ldd	r23, Y+8	; 0x08
    46e8:	89 85       	ldd	r24, Y+9	; 0x09
    46ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f0:	dc 01       	movw	r26, r24
    46f2:	cb 01       	movw	r24, r22
    46f4:	9e 83       	std	Y+6, r25	; 0x06
    46f6:	8d 83       	std	Y+5, r24	; 0x05
    46f8:	8d 81       	ldd	r24, Y+5	; 0x05
    46fa:	9e 81       	ldd	r25, Y+6	; 0x06
    46fc:	9a 83       	std	Y+2, r25	; 0x02
    46fe:	89 83       	std	Y+1, r24	; 0x01
    4700:	89 81       	ldd	r24, Y+1	; 0x01
    4702:	9a 81       	ldd	r25, Y+2	; 0x02
    4704:	01 97       	sbiw	r24, 0x01	; 1
    4706:	f1 f7       	brne	.-4      	; 0x4704 <LCD_Init+0x4d4>
    4708:	9a 83       	std	Y+2, r25	; 0x02
    470a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
	return E_OK;
    470c:	81 e0       	ldi	r24, 0x01	; 1
	
}
    470e:	ca 5b       	subi	r28, 0xBA	; 186
    4710:	df 4f       	sbci	r29, 0xFF	; 255
    4712:	0f b6       	in	r0, 0x3f	; 63
    4714:	f8 94       	cli
    4716:	de bf       	out	0x3e, r29	; 62
    4718:	0f be       	out	0x3f, r0	; 63
    471a:	cd bf       	out	0x3d, r28	; 61
    471c:	cf 91       	pop	r28
    471e:	df 91       	pop	r29
    4720:	1f 91       	pop	r17
    4722:	0f 91       	pop	r16
    4724:	08 95       	ret

00004726 <LCD_SendCMD>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Sending a command to the LCD
*************************************************************/
enuErrorStatus_t LCD_SendCMD(uint8_t cmd)
{
    4726:	df 93       	push	r29
    4728:	cf 93       	push	r28
    472a:	cd b7       	in	r28, 0x3d	; 61
    472c:	de b7       	in	r29, 0x3e	; 62
    472e:	6d 97       	sbiw	r28, 0x1d	; 29
    4730:	0f b6       	in	r0, 0x3f	; 63
    4732:	f8 94       	cli
    4734:	de bf       	out	0x3e, r29	; 62
    4736:	0f be       	out	0x3f, r0	; 63
    4738:	cd bf       	out	0x3d, r28	; 61
    473a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_Init();
    473c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_Init>
	/* Reset the RS and R/W pins*/
	CLR_BIT(CTRL_PORT,RS_LCD);
    4740:	a5 e3       	ldi	r26, 0x35	; 53
    4742:	b0 e0       	ldi	r27, 0x00	; 0
    4744:	e5 e3       	ldi	r30, 0x35	; 53
    4746:	f0 e0       	ldi	r31, 0x00	; 0
    4748:	80 81       	ld	r24, Z
    474a:	8e 7f       	andi	r24, 0xFE	; 254
    474c:	8c 93       	st	X, r24
	CLR_BIT(CTRL_PORT,RW_LCD);
    474e:	a5 e3       	ldi	r26, 0x35	; 53
    4750:	b0 e0       	ldi	r27, 0x00	; 0
    4752:	e5 e3       	ldi	r30, 0x35	; 53
    4754:	f0 e0       	ldi	r31, 0x00	; 0
    4756:	80 81       	ld	r24, Z
    4758:	8d 7f       	andi	r24, 0xFD	; 253
    475a:	8c 93       	st	X, r24
	if(Mode == 8)
	{
		DATA_PORT = cmd;
	}else if(Mode == 4)
	{
		DATA_PORT =(DATA_PORT&0x0F)|(cmd&0xF0);
    475c:	ab e3       	ldi	r26, 0x3B	; 59
    475e:	b0 e0       	ldi	r27, 0x00	; 0
    4760:	eb e3       	ldi	r30, 0x3B	; 59
    4762:	f0 e0       	ldi	r31, 0x00	; 0
    4764:	80 81       	ld	r24, Z
    4766:	98 2f       	mov	r25, r24
    4768:	9f 70       	andi	r25, 0x0F	; 15
    476a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    476c:	80 7f       	andi	r24, 0xF0	; 240
    476e:	89 2b       	or	r24, r25
    4770:	8c 93       	st	X, r24

		SET_BIT(CTRL_PORT,E_LCD);
    4772:	a5 e3       	ldi	r26, 0x35	; 53
    4774:	b0 e0       	ldi	r27, 0x00	; 0
    4776:	e5 e3       	ldi	r30, 0x35	; 53
    4778:	f0 e0       	ldi	r31, 0x00	; 0
    477a:	80 81       	ld	r24, Z
    477c:	84 60       	ori	r24, 0x04	; 4
    477e:	8c 93       	st	X, r24
    4780:	80 e0       	ldi	r24, 0x00	; 0
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	a0 e0       	ldi	r26, 0x00	; 0
    4786:	b0 e4       	ldi	r27, 0x40	; 64
    4788:	89 8f       	std	Y+25, r24	; 0x19
    478a:	9a 8f       	std	Y+26, r25	; 0x1a
    478c:	ab 8f       	std	Y+27, r26	; 0x1b
    478e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4790:	69 8d       	ldd	r22, Y+25	; 0x19
    4792:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4794:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4796:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	4a ef       	ldi	r20, 0xFA	; 250
    479e:	54 e4       	ldi	r21, 0x44	; 68
    47a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	8d 8b       	std	Y+21, r24	; 0x15
    47aa:	9e 8b       	std	Y+22, r25	; 0x16
    47ac:	af 8b       	std	Y+23, r26	; 0x17
    47ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    47b0:	6d 89       	ldd	r22, Y+21	; 0x15
    47b2:	7e 89       	ldd	r23, Y+22	; 0x16
    47b4:	8f 89       	ldd	r24, Y+23	; 0x17
    47b6:	98 8d       	ldd	r25, Y+24	; 0x18
    47b8:	20 e0       	ldi	r18, 0x00	; 0
    47ba:	30 e0       	ldi	r19, 0x00	; 0
    47bc:	40 e8       	ldi	r20, 0x80	; 128
    47be:	5f e3       	ldi	r21, 0x3F	; 63
    47c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47c4:	88 23       	and	r24, r24
    47c6:	2c f4       	brge	.+10     	; 0x47d2 <LCD_SendCMD+0xac>
		__ticks = 1;
    47c8:	81 e0       	ldi	r24, 0x01	; 1
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	9c 8b       	std	Y+20, r25	; 0x14
    47ce:	8b 8b       	std	Y+19, r24	; 0x13
    47d0:	3f c0       	rjmp	.+126    	; 0x4850 <LCD_SendCMD+0x12a>
	else if (__tmp > 65535)
    47d2:	6d 89       	ldd	r22, Y+21	; 0x15
    47d4:	7e 89       	ldd	r23, Y+22	; 0x16
    47d6:	8f 89       	ldd	r24, Y+23	; 0x17
    47d8:	98 8d       	ldd	r25, Y+24	; 0x18
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	3f ef       	ldi	r19, 0xFF	; 255
    47de:	4f e7       	ldi	r20, 0x7F	; 127
    47e0:	57 e4       	ldi	r21, 0x47	; 71
    47e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47e6:	18 16       	cp	r1, r24
    47e8:	4c f5       	brge	.+82     	; 0x483c <LCD_SendCMD+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ea:	69 8d       	ldd	r22, Y+25	; 0x19
    47ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47f2:	20 e0       	ldi	r18, 0x00	; 0
    47f4:	30 e0       	ldi	r19, 0x00	; 0
    47f6:	40 e2       	ldi	r20, 0x20	; 32
    47f8:	51 e4       	ldi	r21, 0x41	; 65
    47fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47fe:	dc 01       	movw	r26, r24
    4800:	cb 01       	movw	r24, r22
    4802:	bc 01       	movw	r22, r24
    4804:	cd 01       	movw	r24, r26
    4806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	9c 8b       	std	Y+20, r25	; 0x14
    4810:	8b 8b       	std	Y+19, r24	; 0x13
    4812:	0f c0       	rjmp	.+30     	; 0x4832 <LCD_SendCMD+0x10c>
    4814:	88 ec       	ldi	r24, 0xC8	; 200
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	9a 8b       	std	Y+18, r25	; 0x12
    481a:	89 8b       	std	Y+17, r24	; 0x11
    481c:	89 89       	ldd	r24, Y+17	; 0x11
    481e:	9a 89       	ldd	r25, Y+18	; 0x12
    4820:	01 97       	sbiw	r24, 0x01	; 1
    4822:	f1 f7       	brne	.-4      	; 0x4820 <LCD_SendCMD+0xfa>
    4824:	9a 8b       	std	Y+18, r25	; 0x12
    4826:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4828:	8b 89       	ldd	r24, Y+19	; 0x13
    482a:	9c 89       	ldd	r25, Y+20	; 0x14
    482c:	01 97       	sbiw	r24, 0x01	; 1
    482e:	9c 8b       	std	Y+20, r25	; 0x14
    4830:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4832:	8b 89       	ldd	r24, Y+19	; 0x13
    4834:	9c 89       	ldd	r25, Y+20	; 0x14
    4836:	00 97       	sbiw	r24, 0x00	; 0
    4838:	69 f7       	brne	.-38     	; 0x4814 <LCD_SendCMD+0xee>
    483a:	14 c0       	rjmp	.+40     	; 0x4864 <LCD_SendCMD+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    483c:	6d 89       	ldd	r22, Y+21	; 0x15
    483e:	7e 89       	ldd	r23, Y+22	; 0x16
    4840:	8f 89       	ldd	r24, Y+23	; 0x17
    4842:	98 8d       	ldd	r25, Y+24	; 0x18
    4844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4848:	dc 01       	movw	r26, r24
    484a:	cb 01       	movw	r24, r22
    484c:	9c 8b       	std	Y+20, r25	; 0x14
    484e:	8b 8b       	std	Y+19, r24	; 0x13
    4850:	8b 89       	ldd	r24, Y+19	; 0x13
    4852:	9c 89       	ldd	r25, Y+20	; 0x14
    4854:	98 8b       	std	Y+16, r25	; 0x10
    4856:	8f 87       	std	Y+15, r24	; 0x0f
    4858:	8f 85       	ldd	r24, Y+15	; 0x0f
    485a:	98 89       	ldd	r25, Y+16	; 0x10
    485c:	01 97       	sbiw	r24, 0x01	; 1
    485e:	f1 f7       	brne	.-4      	; 0x485c <LCD_SendCMD+0x136>
    4860:	98 8b       	std	Y+16, r25	; 0x10
    4862:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		CLR_BIT(CTRL_PORT,E_LCD);
    4864:	a5 e3       	ldi	r26, 0x35	; 53
    4866:	b0 e0       	ldi	r27, 0x00	; 0
    4868:	e5 e3       	ldi	r30, 0x35	; 53
    486a:	f0 e0       	ldi	r31, 0x00	; 0
    486c:	80 81       	ld	r24, Z
    486e:	8b 7f       	andi	r24, 0xFB	; 251
    4870:	8c 93       	st	X, r24
		DATA_PORT=(DATA_PORT&0x0F)|(cmd<<4);
    4872:	ab e3       	ldi	r26, 0x3B	; 59
    4874:	b0 e0       	ldi	r27, 0x00	; 0
    4876:	eb e3       	ldi	r30, 0x3B	; 59
    4878:	f0 e0       	ldi	r31, 0x00	; 0
    487a:	80 81       	ld	r24, Z
    487c:	28 2f       	mov	r18, r24
    487e:	2f 70       	andi	r18, 0x0F	; 15
    4880:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4882:	88 2f       	mov	r24, r24
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	82 95       	swap	r24
    4888:	92 95       	swap	r25
    488a:	90 7f       	andi	r25, 0xF0	; 240
    488c:	98 27       	eor	r25, r24
    488e:	80 7f       	andi	r24, 0xF0	; 240
    4890:	98 27       	eor	r25, r24
    4892:	82 2b       	or	r24, r18
    4894:	8c 93       	st	X, r24

	}
	
	/* Latch the E pin */
	SET_BIT(CTRL_PORT,E_LCD);
    4896:	a5 e3       	ldi	r26, 0x35	; 53
    4898:	b0 e0       	ldi	r27, 0x00	; 0
    489a:	e5 e3       	ldi	r30, 0x35	; 53
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	80 81       	ld	r24, Z
    48a0:	84 60       	ori	r24, 0x04	; 4
    48a2:	8c 93       	st	X, r24
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	a0 e0       	ldi	r26, 0x00	; 0
    48aa:	b0 e4       	ldi	r27, 0x40	; 64
    48ac:	8b 87       	std	Y+11, r24	; 0x0b
    48ae:	9c 87       	std	Y+12, r25	; 0x0c
    48b0:	ad 87       	std	Y+13, r26	; 0x0d
    48b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    48b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    48b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    48ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    48bc:	20 e0       	ldi	r18, 0x00	; 0
    48be:	30 e0       	ldi	r19, 0x00	; 0
    48c0:	4a ef       	ldi	r20, 0xFA	; 250
    48c2:	54 e4       	ldi	r21, 0x44	; 68
    48c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48c8:	dc 01       	movw	r26, r24
    48ca:	cb 01       	movw	r24, r22
    48cc:	8f 83       	std	Y+7, r24	; 0x07
    48ce:	98 87       	std	Y+8, r25	; 0x08
    48d0:	a9 87       	std	Y+9, r26	; 0x09
    48d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48d4:	6f 81       	ldd	r22, Y+7	; 0x07
    48d6:	78 85       	ldd	r23, Y+8	; 0x08
    48d8:	89 85       	ldd	r24, Y+9	; 0x09
    48da:	9a 85       	ldd	r25, Y+10	; 0x0a
    48dc:	20 e0       	ldi	r18, 0x00	; 0
    48de:	30 e0       	ldi	r19, 0x00	; 0
    48e0:	40 e8       	ldi	r20, 0x80	; 128
    48e2:	5f e3       	ldi	r21, 0x3F	; 63
    48e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48e8:	88 23       	and	r24, r24
    48ea:	2c f4       	brge	.+10     	; 0x48f6 <LCD_SendCMD+0x1d0>
		__ticks = 1;
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	9e 83       	std	Y+6, r25	; 0x06
    48f2:	8d 83       	std	Y+5, r24	; 0x05
    48f4:	3f c0       	rjmp	.+126    	; 0x4974 <LCD_SendCMD+0x24e>
	else if (__tmp > 65535)
    48f6:	6f 81       	ldd	r22, Y+7	; 0x07
    48f8:	78 85       	ldd	r23, Y+8	; 0x08
    48fa:	89 85       	ldd	r24, Y+9	; 0x09
    48fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    48fe:	20 e0       	ldi	r18, 0x00	; 0
    4900:	3f ef       	ldi	r19, 0xFF	; 255
    4902:	4f e7       	ldi	r20, 0x7F	; 127
    4904:	57 e4       	ldi	r21, 0x47	; 71
    4906:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    490a:	18 16       	cp	r1, r24
    490c:	4c f5       	brge	.+82     	; 0x4960 <LCD_SendCMD+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    490e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4910:	7c 85       	ldd	r23, Y+12	; 0x0c
    4912:	8d 85       	ldd	r24, Y+13	; 0x0d
    4914:	9e 85       	ldd	r25, Y+14	; 0x0e
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	40 e2       	ldi	r20, 0x20	; 32
    491c:	51 e4       	ldi	r21, 0x41	; 65
    491e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4922:	dc 01       	movw	r26, r24
    4924:	cb 01       	movw	r24, r22
    4926:	bc 01       	movw	r22, r24
    4928:	cd 01       	movw	r24, r26
    492a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    492e:	dc 01       	movw	r26, r24
    4930:	cb 01       	movw	r24, r22
    4932:	9e 83       	std	Y+6, r25	; 0x06
    4934:	8d 83       	std	Y+5, r24	; 0x05
    4936:	0f c0       	rjmp	.+30     	; 0x4956 <LCD_SendCMD+0x230>
    4938:	88 ec       	ldi	r24, 0xC8	; 200
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	9c 83       	std	Y+4, r25	; 0x04
    493e:	8b 83       	std	Y+3, r24	; 0x03
    4940:	8b 81       	ldd	r24, Y+3	; 0x03
    4942:	9c 81       	ldd	r25, Y+4	; 0x04
    4944:	01 97       	sbiw	r24, 0x01	; 1
    4946:	f1 f7       	brne	.-4      	; 0x4944 <LCD_SendCMD+0x21e>
    4948:	9c 83       	std	Y+4, r25	; 0x04
    494a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    494c:	8d 81       	ldd	r24, Y+5	; 0x05
    494e:	9e 81       	ldd	r25, Y+6	; 0x06
    4950:	01 97       	sbiw	r24, 0x01	; 1
    4952:	9e 83       	std	Y+6, r25	; 0x06
    4954:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4956:	8d 81       	ldd	r24, Y+5	; 0x05
    4958:	9e 81       	ldd	r25, Y+6	; 0x06
    495a:	00 97       	sbiw	r24, 0x00	; 0
    495c:	69 f7       	brne	.-38     	; 0x4938 <LCD_SendCMD+0x212>
    495e:	14 c0       	rjmp	.+40     	; 0x4988 <LCD_SendCMD+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4960:	6f 81       	ldd	r22, Y+7	; 0x07
    4962:	78 85       	ldd	r23, Y+8	; 0x08
    4964:	89 85       	ldd	r24, Y+9	; 0x09
    4966:	9a 85       	ldd	r25, Y+10	; 0x0a
    4968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    496c:	dc 01       	movw	r26, r24
    496e:	cb 01       	movw	r24, r22
    4970:	9e 83       	std	Y+6, r25	; 0x06
    4972:	8d 83       	std	Y+5, r24	; 0x05
    4974:	8d 81       	ldd	r24, Y+5	; 0x05
    4976:	9e 81       	ldd	r25, Y+6	; 0x06
    4978:	9a 83       	std	Y+2, r25	; 0x02
    497a:	89 83       	std	Y+1, r24	; 0x01
    497c:	89 81       	ldd	r24, Y+1	; 0x01
    497e:	9a 81       	ldd	r25, Y+2	; 0x02
    4980:	01 97       	sbiw	r24, 0x01	; 1
    4982:	f1 f7       	brne	.-4      	; 0x4980 <LCD_SendCMD+0x25a>
    4984:	9a 83       	std	Y+2, r25	; 0x02
    4986:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLR_BIT(CTRL_PORT,E_LCD);
    4988:	a5 e3       	ldi	r26, 0x35	; 53
    498a:	b0 e0       	ldi	r27, 0x00	; 0
    498c:	e5 e3       	ldi	r30, 0x35	; 53
    498e:	f0 e0       	ldi	r31, 0x00	; 0
    4990:	80 81       	ld	r24, Z
    4992:	8b 7f       	andi	r24, 0xFB	; 251
    4994:	8c 93       	st	X, r24
	
	return E_OK;
    4996:	81 e0       	ldi	r24, 0x01	; 1
}
    4998:	6d 96       	adiw	r28, 0x1d	; 29
    499a:	0f b6       	in	r0, 0x3f	; 63
    499c:	f8 94       	cli
    499e:	de bf       	out	0x3e, r29	; 62
    49a0:	0f be       	out	0x3f, r0	; 63
    49a2:	cd bf       	out	0x3d, r28	; 61
    49a4:	cf 91       	pop	r28
    49a6:	df 91       	pop	r29
    49a8:	08 95       	ret

000049aa <LCD_SendChar>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Sending data to the LCD
*************************************************************/
enuErrorStatus_t LCD_SendChar(uint8_t c)
{
    49aa:	df 93       	push	r29
    49ac:	cf 93       	push	r28
    49ae:	cd b7       	in	r28, 0x3d	; 61
    49b0:	de b7       	in	r29, 0x3e	; 62
    49b2:	6d 97       	sbiw	r28, 0x1d	; 29
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	f8 94       	cli
    49b8:	de bf       	out	0x3e, r29	; 62
    49ba:	0f be       	out	0x3f, r0	; 63
    49bc:	cd bf       	out	0x3d, r28	; 61
    49be:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_Init();
    49c0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_Init>
	
	/* Set the RS , reset the R/W */
	SET_BIT(CTRL_PORT,RS_LCD);
    49c4:	a5 e3       	ldi	r26, 0x35	; 53
    49c6:	b0 e0       	ldi	r27, 0x00	; 0
    49c8:	e5 e3       	ldi	r30, 0x35	; 53
    49ca:	f0 e0       	ldi	r31, 0x00	; 0
    49cc:	80 81       	ld	r24, Z
    49ce:	81 60       	ori	r24, 0x01	; 1
    49d0:	8c 93       	st	X, r24
	CLR_BIT(CTRL_PORT,RW_LCD);
    49d2:	a5 e3       	ldi	r26, 0x35	; 53
    49d4:	b0 e0       	ldi	r27, 0x00	; 0
    49d6:	e5 e3       	ldi	r30, 0x35	; 53
    49d8:	f0 e0       	ldi	r31, 0x00	; 0
    49da:	80 81       	ld	r24, Z
    49dc:	8d 7f       	andi	r24, 0xFD	; 253
    49de:	8c 93       	st	X, r24
	if(Mode == 8)
	{
		DATA_PORT = c;
	}else if(Mode == 4)
	{
		DATA_PORT =(DATA_PORT&0x0F)|(c&0xF0);
    49e0:	ab e3       	ldi	r26, 0x3B	; 59
    49e2:	b0 e0       	ldi	r27, 0x00	; 0
    49e4:	eb e3       	ldi	r30, 0x3B	; 59
    49e6:	f0 e0       	ldi	r31, 0x00	; 0
    49e8:	80 81       	ld	r24, Z
    49ea:	98 2f       	mov	r25, r24
    49ec:	9f 70       	andi	r25, 0x0F	; 15
    49ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49f0:	80 7f       	andi	r24, 0xF0	; 240
    49f2:	89 2b       	or	r24, r25
    49f4:	8c 93       	st	X, r24

		SET_BIT(CTRL_PORT,E_LCD);
    49f6:	a5 e3       	ldi	r26, 0x35	; 53
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	e5 e3       	ldi	r30, 0x35	; 53
    49fc:	f0 e0       	ldi	r31, 0x00	; 0
    49fe:	80 81       	ld	r24, Z
    4a00:	84 60       	ori	r24, 0x04	; 4
    4a02:	8c 93       	st	X, r24
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	a0 e0       	ldi	r26, 0x00	; 0
    4a0a:	b0 e4       	ldi	r27, 0x40	; 64
    4a0c:	89 8f       	std	Y+25, r24	; 0x19
    4a0e:	9a 8f       	std	Y+26, r25	; 0x1a
    4a10:	ab 8f       	std	Y+27, r26	; 0x1b
    4a12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a14:	69 8d       	ldd	r22, Y+25	; 0x19
    4a16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a1c:	20 e0       	ldi	r18, 0x00	; 0
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	4a ef       	ldi	r20, 0xFA	; 250
    4a22:	54 e4       	ldi	r21, 0x44	; 68
    4a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a28:	dc 01       	movw	r26, r24
    4a2a:	cb 01       	movw	r24, r22
    4a2c:	8d 8b       	std	Y+21, r24	; 0x15
    4a2e:	9e 8b       	std	Y+22, r25	; 0x16
    4a30:	af 8b       	std	Y+23, r26	; 0x17
    4a32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a34:	6d 89       	ldd	r22, Y+21	; 0x15
    4a36:	7e 89       	ldd	r23, Y+22	; 0x16
    4a38:	8f 89       	ldd	r24, Y+23	; 0x17
    4a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	40 e8       	ldi	r20, 0x80	; 128
    4a42:	5f e3       	ldi	r21, 0x3F	; 63
    4a44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a48:	88 23       	and	r24, r24
    4a4a:	2c f4       	brge	.+10     	; 0x4a56 <LCD_SendChar+0xac>
		__ticks = 1;
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	9c 8b       	std	Y+20, r25	; 0x14
    4a52:	8b 8b       	std	Y+19, r24	; 0x13
    4a54:	3f c0       	rjmp	.+126    	; 0x4ad4 <LCD_SendChar+0x12a>
	else if (__tmp > 65535)
    4a56:	6d 89       	ldd	r22, Y+21	; 0x15
    4a58:	7e 89       	ldd	r23, Y+22	; 0x16
    4a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    4a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    4a5e:	20 e0       	ldi	r18, 0x00	; 0
    4a60:	3f ef       	ldi	r19, 0xFF	; 255
    4a62:	4f e7       	ldi	r20, 0x7F	; 127
    4a64:	57 e4       	ldi	r21, 0x47	; 71
    4a66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a6a:	18 16       	cp	r1, r24
    4a6c:	4c f5       	brge	.+82     	; 0x4ac0 <LCD_SendChar+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a6e:	69 8d       	ldd	r22, Y+25	; 0x19
    4a70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e2       	ldi	r20, 0x20	; 32
    4a7c:	51 e4       	ldi	r21, 0x41	; 65
    4a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	bc 01       	movw	r22, r24
    4a88:	cd 01       	movw	r24, r26
    4a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a8e:	dc 01       	movw	r26, r24
    4a90:	cb 01       	movw	r24, r22
    4a92:	9c 8b       	std	Y+20, r25	; 0x14
    4a94:	8b 8b       	std	Y+19, r24	; 0x13
    4a96:	0f c0       	rjmp	.+30     	; 0x4ab6 <LCD_SendChar+0x10c>
    4a98:	88 ec       	ldi	r24, 0xC8	; 200
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	9a 8b       	std	Y+18, r25	; 0x12
    4a9e:	89 8b       	std	Y+17, r24	; 0x11
    4aa0:	89 89       	ldd	r24, Y+17	; 0x11
    4aa2:	9a 89       	ldd	r25, Y+18	; 0x12
    4aa4:	01 97       	sbiw	r24, 0x01	; 1
    4aa6:	f1 f7       	brne	.-4      	; 0x4aa4 <LCD_SendChar+0xfa>
    4aa8:	9a 8b       	std	Y+18, r25	; 0x12
    4aaa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aac:	8b 89       	ldd	r24, Y+19	; 0x13
    4aae:	9c 89       	ldd	r25, Y+20	; 0x14
    4ab0:	01 97       	sbiw	r24, 0x01	; 1
    4ab2:	9c 8b       	std	Y+20, r25	; 0x14
    4ab4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    4aba:	00 97       	sbiw	r24, 0x00	; 0
    4abc:	69 f7       	brne	.-38     	; 0x4a98 <LCD_SendChar+0xee>
    4abe:	14 c0       	rjmp	.+40     	; 0x4ae8 <LCD_SendChar+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	9c 8b       	std	Y+20, r25	; 0x14
    4ad2:	8b 8b       	std	Y+19, r24	; 0x13
    4ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ad8:	98 8b       	std	Y+16, r25	; 0x10
    4ada:	8f 87       	std	Y+15, r24	; 0x0f
    4adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ade:	98 89       	ldd	r25, Y+16	; 0x10
    4ae0:	01 97       	sbiw	r24, 0x01	; 1
    4ae2:	f1 f7       	brne	.-4      	; 0x4ae0 <LCD_SendChar+0x136>
    4ae4:	98 8b       	std	Y+16, r25	; 0x10
    4ae6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		CLR_BIT(CTRL_PORT,E_LCD);
    4ae8:	a5 e3       	ldi	r26, 0x35	; 53
    4aea:	b0 e0       	ldi	r27, 0x00	; 0
    4aec:	e5 e3       	ldi	r30, 0x35	; 53
    4aee:	f0 e0       	ldi	r31, 0x00	; 0
    4af0:	80 81       	ld	r24, Z
    4af2:	8b 7f       	andi	r24, 0xFB	; 251
    4af4:	8c 93       	st	X, r24
		DATA_PORT=(DATA_PORT&0x0F)|(c<<4);
    4af6:	ab e3       	ldi	r26, 0x3B	; 59
    4af8:	b0 e0       	ldi	r27, 0x00	; 0
    4afa:	eb e3       	ldi	r30, 0x3B	; 59
    4afc:	f0 e0       	ldi	r31, 0x00	; 0
    4afe:	80 81       	ld	r24, Z
    4b00:	28 2f       	mov	r18, r24
    4b02:	2f 70       	andi	r18, 0x0F	; 15
    4b04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b06:	88 2f       	mov	r24, r24
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	82 95       	swap	r24
    4b0c:	92 95       	swap	r25
    4b0e:	90 7f       	andi	r25, 0xF0	; 240
    4b10:	98 27       	eor	r25, r24
    4b12:	80 7f       	andi	r24, 0xF0	; 240
    4b14:	98 27       	eor	r25, r24
    4b16:	82 2b       	or	r24, r18
    4b18:	8c 93       	st	X, r24

	}
	/* Latch the E pin */
	SET_BIT(CTRL_PORT,E_LCD);
    4b1a:	a5 e3       	ldi	r26, 0x35	; 53
    4b1c:	b0 e0       	ldi	r27, 0x00	; 0
    4b1e:	e5 e3       	ldi	r30, 0x35	; 53
    4b20:	f0 e0       	ldi	r31, 0x00	; 0
    4b22:	80 81       	ld	r24, Z
    4b24:	84 60       	ori	r24, 0x04	; 4
    4b26:	8c 93       	st	X, r24
    4b28:	80 e0       	ldi	r24, 0x00	; 0
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	a0 e0       	ldi	r26, 0x00	; 0
    4b2e:	b0 e4       	ldi	r27, 0x40	; 64
    4b30:	8b 87       	std	Y+11, r24	; 0x0b
    4b32:	9c 87       	std	Y+12, r25	; 0x0c
    4b34:	ad 87       	std	Y+13, r26	; 0x0d
    4b36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b40:	20 e0       	ldi	r18, 0x00	; 0
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	4a ef       	ldi	r20, 0xFA	; 250
    4b46:	54 e4       	ldi	r21, 0x44	; 68
    4b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b4c:	dc 01       	movw	r26, r24
    4b4e:	cb 01       	movw	r24, r22
    4b50:	8f 83       	std	Y+7, r24	; 0x07
    4b52:	98 87       	std	Y+8, r25	; 0x08
    4b54:	a9 87       	std	Y+9, r26	; 0x09
    4b56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b58:	6f 81       	ldd	r22, Y+7	; 0x07
    4b5a:	78 85       	ldd	r23, Y+8	; 0x08
    4b5c:	89 85       	ldd	r24, Y+9	; 0x09
    4b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	40 e8       	ldi	r20, 0x80	; 128
    4b66:	5f e3       	ldi	r21, 0x3F	; 63
    4b68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b6c:	88 23       	and	r24, r24
    4b6e:	2c f4       	brge	.+10     	; 0x4b7a <LCD_SendChar+0x1d0>
		__ticks = 1;
    4b70:	81 e0       	ldi	r24, 0x01	; 1
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	9e 83       	std	Y+6, r25	; 0x06
    4b76:	8d 83       	std	Y+5, r24	; 0x05
    4b78:	3f c0       	rjmp	.+126    	; 0x4bf8 <LCD_SendChar+0x24e>
	else if (__tmp > 65535)
    4b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    4b7c:	78 85       	ldd	r23, Y+8	; 0x08
    4b7e:	89 85       	ldd	r24, Y+9	; 0x09
    4b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b82:	20 e0       	ldi	r18, 0x00	; 0
    4b84:	3f ef       	ldi	r19, 0xFF	; 255
    4b86:	4f e7       	ldi	r20, 0x7F	; 127
    4b88:	57 e4       	ldi	r21, 0x47	; 71
    4b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b8e:	18 16       	cp	r1, r24
    4b90:	4c f5       	brge	.+82     	; 0x4be4 <LCD_SendChar+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	40 e2       	ldi	r20, 0x20	; 32
    4ba0:	51 e4       	ldi	r21, 0x41	; 65
    4ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	bc 01       	movw	r22, r24
    4bac:	cd 01       	movw	r24, r26
    4bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb2:	dc 01       	movw	r26, r24
    4bb4:	cb 01       	movw	r24, r22
    4bb6:	9e 83       	std	Y+6, r25	; 0x06
    4bb8:	8d 83       	std	Y+5, r24	; 0x05
    4bba:	0f c0       	rjmp	.+30     	; 0x4bda <LCD_SendChar+0x230>
    4bbc:	88 ec       	ldi	r24, 0xC8	; 200
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	9c 83       	std	Y+4, r25	; 0x04
    4bc2:	8b 83       	std	Y+3, r24	; 0x03
    4bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc8:	01 97       	sbiw	r24, 0x01	; 1
    4bca:	f1 f7       	brne	.-4      	; 0x4bc8 <LCD_SendChar+0x21e>
    4bcc:	9c 83       	std	Y+4, r25	; 0x04
    4bce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4bd4:	01 97       	sbiw	r24, 0x01	; 1
    4bd6:	9e 83       	std	Y+6, r25	; 0x06
    4bd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bda:	8d 81       	ldd	r24, Y+5	; 0x05
    4bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bde:	00 97       	sbiw	r24, 0x00	; 0
    4be0:	69 f7       	brne	.-38     	; 0x4bbc <LCD_SendChar+0x212>
    4be2:	14 c0       	rjmp	.+40     	; 0x4c0c <LCD_SendChar+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4be4:	6f 81       	ldd	r22, Y+7	; 0x07
    4be6:	78 85       	ldd	r23, Y+8	; 0x08
    4be8:	89 85       	ldd	r24, Y+9	; 0x09
    4bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	cb 01       	movw	r24, r22
    4bf4:	9e 83       	std	Y+6, r25	; 0x06
    4bf6:	8d 83       	std	Y+5, r24	; 0x05
    4bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    4bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    4bfc:	9a 83       	std	Y+2, r25	; 0x02
    4bfe:	89 83       	std	Y+1, r24	; 0x01
    4c00:	89 81       	ldd	r24, Y+1	; 0x01
    4c02:	9a 81       	ldd	r25, Y+2	; 0x02
    4c04:	01 97       	sbiw	r24, 0x01	; 1
    4c06:	f1 f7       	brne	.-4      	; 0x4c04 <LCD_SendChar+0x25a>
    4c08:	9a 83       	std	Y+2, r25	; 0x02
    4c0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLR_BIT(CTRL_PORT,E_LCD);
    4c0c:	a5 e3       	ldi	r26, 0x35	; 53
    4c0e:	b0 e0       	ldi	r27, 0x00	; 0
    4c10:	e5 e3       	ldi	r30, 0x35	; 53
    4c12:	f0 e0       	ldi	r31, 0x00	; 0
    4c14:	80 81       	ld	r24, Z
    4c16:	8b 7f       	andi	r24, 0xFB	; 251
    4c18:	8c 93       	st	X, r24
	
	return E_OK;
    4c1a:	81 e0       	ldi	r24, 0x01	; 1
}
    4c1c:	6d 96       	adiw	r28, 0x1d	; 29
    4c1e:	0f b6       	in	r0, 0x3f	; 63
    4c20:	f8 94       	cli
    4c22:	de bf       	out	0x3e, r29	; 62
    4c24:	0f be       	out	0x3f, r0	; 63
    4c26:	cd bf       	out	0x3d, r28	; 61
    4c28:	cf 91       	pop	r28
    4c2a:	df 91       	pop	r29
    4c2c:	08 95       	ret

00004c2e <LCD_SendString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Sending a string to the LCD
*************************************************************/
enuErrorStatus_t LCD_SendString(uint8_t* ptr)
{
    4c2e:	df 93       	push	r29
    4c30:	cf 93       	push	r28
    4c32:	cd b7       	in	r28, 0x3d	; 61
    4c34:	de b7       	in	r29, 0x3e	; 62
    4c36:	6b 97       	sbiw	r28, 0x1b	; 27
    4c38:	0f b6       	in	r0, 0x3f	; 63
    4c3a:	f8 94       	cli
    4c3c:	de bf       	out	0x3e, r29	; 62
    4c3e:	0f be       	out	0x3f, r0	; 63
    4c40:	cd bf       	out	0x3d, r28	; 61
    4c42:	9b 8f       	std	Y+27, r25	; 0x1b
    4c44:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8_t i=0;
    4c46:	19 8e       	std	Y+25, r1	; 0x19
    4c48:	cc c0       	rjmp	.+408    	; 0x4de2 <LCD_SendString+0x1b4>
	while(ptr[i] != '\0')
	{
		LCD_SendChar(ptr[i]);
    4c4a:	89 8d       	ldd	r24, Y+25	; 0x19
    4c4c:	28 2f       	mov	r18, r24
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4c52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4c54:	fc 01       	movw	r30, r24
    4c56:	e2 0f       	add	r30, r18
    4c58:	f3 1f       	adc	r31, r19
    4c5a:	80 81       	ld	r24, Z
    4c5c:	0e 94 d5 24 	call	0x49aa	; 0x49aa <LCD_SendChar>
		i++;
    4c60:	89 8d       	ldd	r24, Y+25	; 0x19
    4c62:	8f 5f       	subi	r24, 0xFF	; 255
    4c64:	89 8f       	std	Y+25, r24	; 0x19
    4c66:	80 e0       	ldi	r24, 0x00	; 0
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	a0 ea       	ldi	r26, 0xA0	; 160
    4c6c:	b2 e4       	ldi	r27, 0x42	; 66
    4c6e:	8d 8b       	std	Y+21, r24	; 0x15
    4c70:	9e 8b       	std	Y+22, r25	; 0x16
    4c72:	af 8b       	std	Y+23, r26	; 0x17
    4c74:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4c76:	6d 89       	ldd	r22, Y+21	; 0x15
    4c78:	7e 89       	ldd	r23, Y+22	; 0x16
    4c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    4c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    4c7e:	2b ea       	ldi	r18, 0xAB	; 171
    4c80:	3a ea       	ldi	r19, 0xAA	; 170
    4c82:	4a e2       	ldi	r20, 0x2A	; 42
    4c84:	50 e4       	ldi	r21, 0x40	; 64
    4c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	89 8b       	std	Y+17, r24	; 0x11
    4c90:	9a 8b       	std	Y+18, r25	; 0x12
    4c92:	ab 8b       	std	Y+19, r26	; 0x13
    4c94:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4c96:	69 89       	ldd	r22, Y+17	; 0x11
    4c98:	7a 89       	ldd	r23, Y+18	; 0x12
    4c9a:	8b 89       	ldd	r24, Y+19	; 0x13
    4c9c:	9c 89       	ldd	r25, Y+20	; 0x14
    4c9e:	20 e0       	ldi	r18, 0x00	; 0
    4ca0:	30 e0       	ldi	r19, 0x00	; 0
    4ca2:	40 e8       	ldi	r20, 0x80	; 128
    4ca4:	5f e3       	ldi	r21, 0x3F	; 63
    4ca6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4caa:	88 23       	and	r24, r24
    4cac:	1c f4       	brge	.+6      	; 0x4cb4 <LCD_SendString+0x86>
		__ticks = 1;
    4cae:	81 e0       	ldi	r24, 0x01	; 1
    4cb0:	88 8b       	std	Y+16, r24	; 0x10
    4cb2:	91 c0       	rjmp	.+290    	; 0x4dd6 <LCD_SendString+0x1a8>
	else if (__tmp > 255)
    4cb4:	69 89       	ldd	r22, Y+17	; 0x11
    4cb6:	7a 89       	ldd	r23, Y+18	; 0x12
    4cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    4cba:	9c 89       	ldd	r25, Y+20	; 0x14
    4cbc:	20 e0       	ldi	r18, 0x00	; 0
    4cbe:	30 e0       	ldi	r19, 0x00	; 0
    4cc0:	4f e7       	ldi	r20, 0x7F	; 127
    4cc2:	53 e4       	ldi	r21, 0x43	; 67
    4cc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cc8:	18 16       	cp	r1, r24
    4cca:	0c f0       	brlt	.+2      	; 0x4cce <LCD_SendString+0xa0>
    4ccc:	7b c0       	rjmp	.+246    	; 0x4dc4 <LCD_SendString+0x196>
	{
		_delay_ms(__us / 1000.0);
    4cce:	6d 89       	ldd	r22, Y+21	; 0x15
    4cd0:	7e 89       	ldd	r23, Y+22	; 0x16
    4cd2:	8f 89       	ldd	r24, Y+23	; 0x17
    4cd4:	98 8d       	ldd	r25, Y+24	; 0x18
    4cd6:	20 e0       	ldi	r18, 0x00	; 0
    4cd8:	30 e0       	ldi	r19, 0x00	; 0
    4cda:	4a e7       	ldi	r20, 0x7A	; 122
    4cdc:	54 e4       	ldi	r21, 0x44	; 68
    4cde:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	8c 87       	std	Y+12, r24	; 0x0c
    4ce8:	9d 87       	std	Y+13, r25	; 0x0d
    4cea:	ae 87       	std	Y+14, r26	; 0x0e
    4cec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cee:	6c 85       	ldd	r22, Y+12	; 0x0c
    4cf0:	7d 85       	ldd	r23, Y+13	; 0x0d
    4cf2:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cf4:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cf6:	20 e0       	ldi	r18, 0x00	; 0
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	4a ef       	ldi	r20, 0xFA	; 250
    4cfc:	54 e4       	ldi	r21, 0x44	; 68
    4cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d02:	dc 01       	movw	r26, r24
    4d04:	cb 01       	movw	r24, r22
    4d06:	88 87       	std	Y+8, r24	; 0x08
    4d08:	99 87       	std	Y+9, r25	; 0x09
    4d0a:	aa 87       	std	Y+10, r26	; 0x0a
    4d0c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4d0e:	68 85       	ldd	r22, Y+8	; 0x08
    4d10:	79 85       	ldd	r23, Y+9	; 0x09
    4d12:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d14:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d16:	20 e0       	ldi	r18, 0x00	; 0
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	40 e8       	ldi	r20, 0x80	; 128
    4d1c:	5f e3       	ldi	r21, 0x3F	; 63
    4d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d22:	88 23       	and	r24, r24
    4d24:	2c f4       	brge	.+10     	; 0x4d30 <LCD_SendString+0x102>
		__ticks = 1;
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	9f 83       	std	Y+7, r25	; 0x07
    4d2c:	8e 83       	std	Y+6, r24	; 0x06
    4d2e:	3f c0       	rjmp	.+126    	; 0x4dae <LCD_SendString+0x180>
	else if (__tmp > 65535)
    4d30:	68 85       	ldd	r22, Y+8	; 0x08
    4d32:	79 85       	ldd	r23, Y+9	; 0x09
    4d34:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d36:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d38:	20 e0       	ldi	r18, 0x00	; 0
    4d3a:	3f ef       	ldi	r19, 0xFF	; 255
    4d3c:	4f e7       	ldi	r20, 0x7F	; 127
    4d3e:	57 e4       	ldi	r21, 0x47	; 71
    4d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d44:	18 16       	cp	r1, r24
    4d46:	4c f5       	brge	.+82     	; 0x4d9a <LCD_SendString+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d48:	6c 85       	ldd	r22, Y+12	; 0x0c
    4d4a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4d4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	40 e2       	ldi	r20, 0x20	; 32
    4d56:	51 e4       	ldi	r21, 0x41	; 65
    4d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	bc 01       	movw	r22, r24
    4d62:	cd 01       	movw	r24, r26
    4d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d68:	dc 01       	movw	r26, r24
    4d6a:	cb 01       	movw	r24, r22
    4d6c:	9f 83       	std	Y+7, r25	; 0x07
    4d6e:	8e 83       	std	Y+6, r24	; 0x06
    4d70:	0f c0       	rjmp	.+30     	; 0x4d90 <LCD_SendString+0x162>
    4d72:	88 ec       	ldi	r24, 0xC8	; 200
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	9d 83       	std	Y+5, r25	; 0x05
    4d78:	8c 83       	std	Y+4, r24	; 0x04
    4d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    4d7c:	9d 81       	ldd	r25, Y+5	; 0x05
    4d7e:	01 97       	sbiw	r24, 0x01	; 1
    4d80:	f1 f7       	brne	.-4      	; 0x4d7e <LCD_SendString+0x150>
    4d82:	9d 83       	std	Y+5, r25	; 0x05
    4d84:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d86:	8e 81       	ldd	r24, Y+6	; 0x06
    4d88:	9f 81       	ldd	r25, Y+7	; 0x07
    4d8a:	01 97       	sbiw	r24, 0x01	; 1
    4d8c:	9f 83       	std	Y+7, r25	; 0x07
    4d8e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d90:	8e 81       	ldd	r24, Y+6	; 0x06
    4d92:	9f 81       	ldd	r25, Y+7	; 0x07
    4d94:	00 97       	sbiw	r24, 0x00	; 0
    4d96:	69 f7       	brne	.-38     	; 0x4d72 <LCD_SendString+0x144>
    4d98:	24 c0       	rjmp	.+72     	; 0x4de2 <LCD_SendString+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d9a:	68 85       	ldd	r22, Y+8	; 0x08
    4d9c:	79 85       	ldd	r23, Y+9	; 0x09
    4d9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4da0:	9b 85       	ldd	r25, Y+11	; 0x0b
    4da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da6:	dc 01       	movw	r26, r24
    4da8:	cb 01       	movw	r24, r22
    4daa:	9f 83       	std	Y+7, r25	; 0x07
    4dac:	8e 83       	std	Y+6, r24	; 0x06
    4dae:	8e 81       	ldd	r24, Y+6	; 0x06
    4db0:	9f 81       	ldd	r25, Y+7	; 0x07
    4db2:	9b 83       	std	Y+3, r25	; 0x03
    4db4:	8a 83       	std	Y+2, r24	; 0x02
    4db6:	8a 81       	ldd	r24, Y+2	; 0x02
    4db8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dba:	01 97       	sbiw	r24, 0x01	; 1
    4dbc:	f1 f7       	brne	.-4      	; 0x4dba <LCD_SendString+0x18c>
    4dbe:	9b 83       	std	Y+3, r25	; 0x03
    4dc0:	8a 83       	std	Y+2, r24	; 0x02
    4dc2:	0f c0       	rjmp	.+30     	; 0x4de2 <LCD_SendString+0x1b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4dc4:	69 89       	ldd	r22, Y+17	; 0x11
    4dc6:	7a 89       	ldd	r23, Y+18	; 0x12
    4dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    4dca:	9c 89       	ldd	r25, Y+20	; 0x14
    4dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd0:	dc 01       	movw	r26, r24
    4dd2:	cb 01       	movw	r24, r22
    4dd4:	88 8b       	std	Y+16, r24	; 0x10
    4dd6:	88 89       	ldd	r24, Y+16	; 0x10
    4dd8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4dda:	89 81       	ldd	r24, Y+1	; 0x01
    4ddc:	8a 95       	dec	r24
    4dde:	f1 f7       	brne	.-4      	; 0x4ddc <LCD_SendString+0x1ae>
    4de0:	89 83       	std	Y+1, r24	; 0x01
* Description     : Sending a string to the LCD
*************************************************************/
enuErrorStatus_t LCD_SendString(uint8_t* ptr)
{
	uint8_t i=0;
	while(ptr[i] != '\0')
    4de2:	89 8d       	ldd	r24, Y+25	; 0x19
    4de4:	28 2f       	mov	r18, r24
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4dea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4dec:	fc 01       	movw	r30, r24
    4dee:	e2 0f       	add	r30, r18
    4df0:	f3 1f       	adc	r31, r19
    4df2:	80 81       	ld	r24, Z
    4df4:	88 23       	and	r24, r24
    4df6:	09 f0       	breq	.+2      	; 0x4dfa <LCD_SendString+0x1cc>
    4df8:	28 cf       	rjmp	.-432    	; 0x4c4a <LCD_SendString+0x1c>
	{
		LCD_SendChar(ptr[i]);
		i++;
		_delay_us(80);
	}
	return E_OK;
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
}
    4dfc:	6b 96       	adiw	r28, 0x1b	; 27
    4dfe:	0f b6       	in	r0, 0x3f	; 63
    4e00:	f8 94       	cli
    4e02:	de bf       	out	0x3e, r29	; 62
    4e04:	0f be       	out	0x3f, r0	; 63
    4e06:	cd bf       	out	0x3d, r28	; 61
    4e08:	cf 91       	pop	r28
    4e0a:	df 91       	pop	r29
    4e0c:	08 95       	ret

00004e0e <LCD_writeNum>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Writing a number on the LCD
*************************************************************/
enuErrorStatus_t LCD_writeNum(uint32_t num)
{
    4e0e:	df 93       	push	r29
    4e10:	cf 93       	push	r28
    4e12:	cd b7       	in	r28, 0x3d	; 61
    4e14:	de b7       	in	r29, 0x3e	; 62
    4e16:	66 97       	sbiw	r28, 0x16	; 22
    4e18:	0f b6       	in	r0, 0x3f	; 63
    4e1a:	f8 94       	cli
    4e1c:	de bf       	out	0x3e, r29	; 62
    4e1e:	0f be       	out	0x3f, r0	; 63
    4e20:	cd bf       	out	0x3d, r28	; 61
    4e22:	6d 87       	std	Y+13, r22	; 0x0d
    4e24:	7e 87       	std	Y+14, r23	; 0x0e
    4e26:	8f 87       	std	Y+15, r24	; 0x0f
    4e28:	98 8b       	std	Y+16, r25	; 0x10
		{
			LCD_SendChar(arr_num[i]);
		}
	}
	return E_OK;
}
    4e2a:	2d b7       	in	r18, 0x3d	; 61
    4e2c:	3e b7       	in	r19, 0x3e	; 62
    4e2e:	3e 8b       	std	Y+22, r19	; 0x16
    4e30:	2d 8b       	std	Y+21, r18	; 0x15
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Writing a number on the LCD
*************************************************************/
enuErrorStatus_t LCD_writeNum(uint32_t num)
{
	int8_t counter = 1;
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	8a 87       	std	Y+10, r24	; 0x0a
	uint32_t temp = num;
    4e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e3a:	af 85       	ldd	r26, Y+15	; 0x0f
    4e3c:	b8 89       	ldd	r27, Y+16	; 0x10
    4e3e:	8e 83       	std	Y+6, r24	; 0x06
    4e40:	9f 83       	std	Y+7, r25	; 0x07
    4e42:	a8 87       	std	Y+8, r26	; 0x08
    4e44:	b9 87       	std	Y+9, r27	; 0x09
	uint32_t char_num;
	int8_t i;
	if(num == 0)
    4e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e4a:	af 85       	ldd	r26, Y+15	; 0x0f
    4e4c:	b8 89       	ldd	r27, Y+16	; 0x10
    4e4e:	00 97       	sbiw	r24, 0x00	; 0
    4e50:	a1 05       	cpc	r26, r1
    4e52:	b1 05       	cpc	r27, r1
    4e54:	21 f4       	brne	.+8      	; 0x4e5e <LCD_writeNum+0x50>
	{
		LCD_SendChar('0');
    4e56:	80 e3       	ldi	r24, 0x30	; 48
    4e58:	0e 94 d5 24 	call	0x49aa	; 0x49aa <LCD_SendChar>
    4e5c:	97 c0       	rjmp	.+302    	; 0x4f8c <LCD_writeNum+0x17e>
    4e5e:	8d b7       	in	r24, 0x3d	; 61
    4e60:	9e b7       	in	r25, 0x3e	; 62
    4e62:	9a 8b       	std	Y+18, r25	; 0x12
    4e64:	89 8b       	std	Y+17, r24	; 0x11
    4e66:	15 c0       	rjmp	.+42     	; 0x4e92 <LCD_writeNum+0x84>
	}
	else
	{
		while(temp >= 10)
		{
			temp = temp/10;
    4e68:	8e 81       	ldd	r24, Y+6	; 0x06
    4e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    4e6c:	a8 85       	ldd	r26, Y+8	; 0x08
    4e6e:	b9 85       	ldd	r27, Y+9	; 0x09
    4e70:	2a e0       	ldi	r18, 0x0A	; 10
    4e72:	30 e0       	ldi	r19, 0x00	; 0
    4e74:	40 e0       	ldi	r20, 0x00	; 0
    4e76:	50 e0       	ldi	r21, 0x00	; 0
    4e78:	bc 01       	movw	r22, r24
    4e7a:	cd 01       	movw	r24, r26
    4e7c:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__udivmodsi4>
    4e80:	da 01       	movw	r26, r20
    4e82:	c9 01       	movw	r24, r18
    4e84:	8e 83       	std	Y+6, r24	; 0x06
    4e86:	9f 83       	std	Y+7, r25	; 0x07
    4e88:	a8 87       	std	Y+8, r26	; 0x08
    4e8a:	b9 87       	std	Y+9, r27	; 0x09
			counter ++;
    4e8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e8e:	8f 5f       	subi	r24, 0xFF	; 255
    4e90:	8a 87       	std	Y+10, r24	; 0x0a
	{
		LCD_SendChar('0');
	}
	else
	{
		while(temp >= 10)
    4e92:	8e 81       	ldd	r24, Y+6	; 0x06
    4e94:	9f 81       	ldd	r25, Y+7	; 0x07
    4e96:	a8 85       	ldd	r26, Y+8	; 0x08
    4e98:	b9 85       	ldd	r27, Y+9	; 0x09
    4e9a:	8a 30       	cpi	r24, 0x0A	; 10
    4e9c:	91 05       	cpc	r25, r1
    4e9e:	a1 05       	cpc	r26, r1
    4ea0:	b1 05       	cpc	r27, r1
    4ea2:	10 f7       	brcc	.-60     	; 0x4e68 <LCD_writeNum+0x5a>
		{
			temp = temp/10;
			counter ++;
		}
		uint8_t arr_num[counter];
    4ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ea6:	99 27       	eor	r25, r25
    4ea8:	87 fd       	sbrc	r24, 7
    4eaa:	90 95       	com	r25
    4eac:	2d b7       	in	r18, 0x3d	; 61
    4eae:	3e b7       	in	r19, 0x3e	; 62
    4eb0:	28 1b       	sub	r18, r24
    4eb2:	39 0b       	sbc	r19, r25
    4eb4:	0f b6       	in	r0, 0x3f	; 63
    4eb6:	f8 94       	cli
    4eb8:	3e bf       	out	0x3e, r19	; 62
    4eba:	0f be       	out	0x3f, r0	; 63
    4ebc:	2d bf       	out	0x3d, r18	; 61
    4ebe:	8d b7       	in	r24, 0x3d	; 61
    4ec0:	9e b7       	in	r25, 0x3e	; 62
    4ec2:	01 96       	adiw	r24, 0x01	; 1
    4ec4:	9c 8b       	std	Y+20, r25	; 0x14
    4ec6:	8b 8b       	std	Y+19, r24	; 0x13
    4ec8:	8b 89       	ldd	r24, Y+19	; 0x13
    4eca:	9c 89       	ldd	r25, Y+20	; 0x14
    4ecc:	00 96       	adiw	r24, 0x00	; 0
    4ece:	9c 8b       	std	Y+20, r25	; 0x14
    4ed0:	8b 8b       	std	Y+19, r24	; 0x13
    4ed2:	2b 89       	ldd	r18, Y+19	; 0x13
    4ed4:	3c 89       	ldd	r19, Y+20	; 0x14
    4ed6:	3c 87       	std	Y+12, r19	; 0x0c
    4ed8:	2b 87       	std	Y+11, r18	; 0x0b
		for(i=0;i<counter;i++)
    4eda:	19 82       	std	Y+1, r1	; 0x01
    4edc:	35 c0       	rjmp	.+106    	; 0x4f48 <LCD_writeNum+0x13a>
		{
			char_num = num % 10;
    4ede:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ee2:	af 85       	ldd	r26, Y+15	; 0x0f
    4ee4:	b8 89       	ldd	r27, Y+16	; 0x10
    4ee6:	2a e0       	ldi	r18, 0x0A	; 10
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	40 e0       	ldi	r20, 0x00	; 0
    4eec:	50 e0       	ldi	r21, 0x00	; 0
    4eee:	bc 01       	movw	r22, r24
    4ef0:	cd 01       	movw	r24, r26
    4ef2:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__udivmodsi4>
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	cb 01       	movw	r24, r22
    4efa:	8a 83       	std	Y+2, r24	; 0x02
    4efc:	9b 83       	std	Y+3, r25	; 0x03
    4efe:	ac 83       	std	Y+4, r26	; 0x04
    4f00:	bd 83       	std	Y+5, r27	; 0x05
			arr_num[i]=char_num + '0';
    4f02:	89 81       	ldd	r24, Y+1	; 0x01
    4f04:	28 2f       	mov	r18, r24
    4f06:	33 27       	eor	r19, r19
    4f08:	27 fd       	sbrc	r18, 7
    4f0a:	30 95       	com	r19
    4f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f0e:	48 2f       	mov	r20, r24
    4f10:	40 5d       	subi	r20, 0xD0	; 208
    4f12:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f14:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f16:	fc 01       	movw	r30, r24
    4f18:	e2 0f       	add	r30, r18
    4f1a:	f3 1f       	adc	r31, r19
    4f1c:	40 83       	st	Z, r20
			num = num/10;
    4f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f22:	af 85       	ldd	r26, Y+15	; 0x0f
    4f24:	b8 89       	ldd	r27, Y+16	; 0x10
    4f26:	2a e0       	ldi	r18, 0x0A	; 10
    4f28:	30 e0       	ldi	r19, 0x00	; 0
    4f2a:	40 e0       	ldi	r20, 0x00	; 0
    4f2c:	50 e0       	ldi	r21, 0x00	; 0
    4f2e:	bc 01       	movw	r22, r24
    4f30:	cd 01       	movw	r24, r26
    4f32:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__udivmodsi4>
    4f36:	da 01       	movw	r26, r20
    4f38:	c9 01       	movw	r24, r18
    4f3a:	8d 87       	std	Y+13, r24	; 0x0d
    4f3c:	9e 87       	std	Y+14, r25	; 0x0e
    4f3e:	af 87       	std	Y+15, r26	; 0x0f
    4f40:	b8 8b       	std	Y+16, r27	; 0x10
		{
			temp = temp/10;
			counter ++;
		}
		uint8_t arr_num[counter];
		for(i=0;i<counter;i++)
    4f42:	89 81       	ldd	r24, Y+1	; 0x01
    4f44:	8f 5f       	subi	r24, 0xFF	; 255
    4f46:	89 83       	std	Y+1, r24	; 0x01
    4f48:	99 81       	ldd	r25, Y+1	; 0x01
    4f4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f4c:	98 17       	cp	r25, r24
    4f4e:	3c f2       	brlt	.-114    	; 0x4ede <LCD_writeNum+0xd0>
		{
			char_num = num % 10;
			arr_num[i]=char_num + '0';
			num = num/10;
		}
		for(i=counter-1;i>=0;i--)
    4f50:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f52:	81 50       	subi	r24, 0x01	; 1
    4f54:	89 83       	std	Y+1, r24	; 0x01
    4f56:	10 c0       	rjmp	.+32     	; 0x4f78 <LCD_writeNum+0x16a>
		{
			LCD_SendChar(arr_num[i]);
    4f58:	89 81       	ldd	r24, Y+1	; 0x01
    4f5a:	28 2f       	mov	r18, r24
    4f5c:	33 27       	eor	r19, r19
    4f5e:	27 fd       	sbrc	r18, 7
    4f60:	30 95       	com	r19
    4f62:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f64:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f66:	fc 01       	movw	r30, r24
    4f68:	e2 0f       	add	r30, r18
    4f6a:	f3 1f       	adc	r31, r19
    4f6c:	80 81       	ld	r24, Z
    4f6e:	0e 94 d5 24 	call	0x49aa	; 0x49aa <LCD_SendChar>
		{
			char_num = num % 10;
			arr_num[i]=char_num + '0';
			num = num/10;
		}
		for(i=counter-1;i>=0;i--)
    4f72:	89 81       	ldd	r24, Y+1	; 0x01
    4f74:	81 50       	subi	r24, 0x01	; 1
    4f76:	89 83       	std	Y+1, r24	; 0x01
    4f78:	89 81       	ldd	r24, Y+1	; 0x01
    4f7a:	88 23       	and	r24, r24
    4f7c:	6c f7       	brge	.-38     	; 0x4f58 <LCD_writeNum+0x14a>
    4f7e:	89 89       	ldd	r24, Y+17	; 0x11
    4f80:	9a 89       	ldd	r25, Y+18	; 0x12
    4f82:	0f b6       	in	r0, 0x3f	; 63
    4f84:	f8 94       	cli
    4f86:	9e bf       	out	0x3e, r25	; 62
    4f88:	0f be       	out	0x3f, r0	; 63
    4f8a:	8d bf       	out	0x3d, r24	; 61
		{
			LCD_SendChar(arr_num[i]);
		}
	}
	return E_OK;
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
}
    4f8e:	2d 89       	ldd	r18, Y+21	; 0x15
    4f90:	3e 89       	ldd	r19, Y+22	; 0x16
    4f92:	0f b6       	in	r0, 0x3f	; 63
    4f94:	f8 94       	cli
    4f96:	3e bf       	out	0x3e, r19	; 62
    4f98:	0f be       	out	0x3f, r0	; 63
    4f9a:	2d bf       	out	0x3d, r18	; 61
    4f9c:	66 96       	adiw	r28, 0x16	; 22
    4f9e:	0f b6       	in	r0, 0x3f	; 63
    4fa0:	f8 94       	cli
    4fa2:	de bf       	out	0x3e, r29	; 62
    4fa4:	0f be       	out	0x3f, r0	; 63
    4fa6:	cd bf       	out	0x3d, r28	; 61
    4fa8:	cf 91       	pop	r28
    4faa:	df 91       	pop	r29
    4fac:	08 95       	ret

00004fae <LCD_GOTOXY>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Change the coordinate of the cursor
*************************************************************/
enuErrorStatus_t LCD_GOTOXY(uint8_t X,uint8_t Y)
{
    4fae:	df 93       	push	r29
    4fb0:	cf 93       	push	r28
    4fb2:	00 d0       	rcall	.+0      	; 0x4fb4 <LCD_GOTOXY+0x6>
    4fb4:	cd b7       	in	r28, 0x3d	; 61
    4fb6:	de b7       	in	r29, 0x3e	; 62
    4fb8:	89 83       	std	Y+1, r24	; 0x01
    4fba:	6a 83       	std	Y+2, r22	; 0x02
	if(Y == 1)
    4fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    4fbe:	81 30       	cpi	r24, 0x01	; 1
    4fc0:	29 f4       	brne	.+10     	; 0x4fcc <LCD_GOTOXY+0x1e>
	{
		LCD_SendCMD(0b10000000 + X);
    4fc2:	89 81       	ldd	r24, Y+1	; 0x01
    4fc4:	80 58       	subi	r24, 0x80	; 128
    4fc6:	0e 94 93 23 	call	0x4726	; 0x4726 <LCD_SendCMD>
    4fca:	07 c0       	rjmp	.+14     	; 0x4fda <LCD_GOTOXY+0x2c>
	}
	else if(Y == 2)
    4fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    4fce:	82 30       	cpi	r24, 0x02	; 2
    4fd0:	21 f4       	brne	.+8      	; 0x4fda <LCD_GOTOXY+0x2c>
	{
		LCD_SendCMD(0b11000000 + X);
    4fd2:	89 81       	ldd	r24, Y+1	; 0x01
    4fd4:	80 54       	subi	r24, 0x40	; 64
    4fd6:	0e 94 93 23 	call	0x4726	; 0x4726 <LCD_SendCMD>
	}
	return E_OK;
    4fda:	81 e0       	ldi	r24, 0x01	; 1
}
    4fdc:	0f 90       	pop	r0
    4fde:	0f 90       	pop	r0
    4fe0:	cf 91       	pop	r28
    4fe2:	df 91       	pop	r29
    4fe4:	08 95       	ret

00004fe6 <KEYPAD_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Keypad initialization
*************************************************************/
enuErrorStatus_t KEYPAD_Init(void)
{
    4fe6:	df 93       	push	r29
    4fe8:	cf 93       	push	r28
    4fea:	0f 92       	push	r0
    4fec:	cd b7       	in	r28, 0x3d	; 61
    4fee:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
    4ff0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_Init>
	volatile uint8_t i;
	for(i=4;i<7;i++)
    4ff4:	84 e0       	ldi	r24, 0x04	; 4
    4ff6:	89 83       	std	Y+1, r24	; 0x01
    4ff8:	07 c0       	rjmp	.+14     	; 0x5008 <KEYPAD_Init+0x22>
	{
		/* Put high on the output pins */
		DIO_Write(i,HIGH);	
    4ffa:	89 81       	ldd	r24, Y+1	; 0x01
    4ffc:	61 e0       	ldi	r22, 0x01	; 1
    4ffe:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <DIO_Write>
*************************************************************/
enuErrorStatus_t KEYPAD_Init(void)
{
	DIO_Init();
	volatile uint8_t i;
	for(i=4;i<7;i++)
    5002:	89 81       	ldd	r24, Y+1	; 0x01
    5004:	8f 5f       	subi	r24, 0xFF	; 255
    5006:	89 83       	std	Y+1, r24	; 0x01
    5008:	89 81       	ldd	r24, Y+1	; 0x01
    500a:	87 30       	cpi	r24, 0x07	; 7
    500c:	b0 f3       	brcs	.-20     	; 0x4ffa <KEYPAD_Init+0x14>
	{
		/* Put high on the output pins */
		DIO_Write(i,HIGH);	
	}

	return E_OK;
    500e:	81 e0       	ldi	r24, 0x01	; 1
}
    5010:	0f 90       	pop	r0
    5012:	cf 91       	pop	r28
    5014:	df 91       	pop	r29
    5016:	08 95       	ret

00005018 <KEYPAD_Read>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling
* Description     : Reading the Keypad buttons
*************************************************************/
enuErrorStatus_t KEYPAD_Read(uint8_t* ptr)
{
    5018:	df 93       	push	r29
    501a:	cf 93       	push	r28
    501c:	cd b7       	in	r28, 0x3d	; 61
    501e:	de b7       	in	r29, 0x3e	; 62
    5020:	63 97       	sbiw	r28, 0x13	; 19
    5022:	0f b6       	in	r0, 0x3f	; 63
    5024:	f8 94       	cli
    5026:	de bf       	out	0x3e, r29	; 62
    5028:	0f be       	out	0x3f, r0	; 63
    502a:	cd bf       	out	0x3d, r28	; 61
    502c:	9b 8b       	std	Y+19, r25	; 0x13
    502e:	8a 8b       	std	Y+18, r24	; 0x12
	*ptr=250;
    5030:	ea 89       	ldd	r30, Y+18	; 0x12
    5032:	fb 89       	ldd	r31, Y+19	; 0x13
    5034:	8a ef       	ldi	r24, 0xFA	; 250
    5036:	80 83       	st	Z, r24
	uint8_t x;
	uint8_t row,column;
	for(column=0;column<3;column++)
    5038:	1f 86       	std	Y+15, r1	; 0x0f
    503a:	a7 c0       	rjmp	.+334    	; 0x518a <KEYPAD_Read+0x172>
	{
		/* Put low on an output pin and scan for the input pins */
		DIO_Write(column+4,LOW);
    503c:	8f 85       	ldd	r24, Y+15	; 0x0f
    503e:	8c 5f       	subi	r24, 0xFC	; 252
    5040:	60 e0       	ldi	r22, 0x00	; 0
    5042:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <DIO_Write>
		for(row=0;row<4;row++)
    5046:	18 8a       	std	Y+16, r1	; 0x10
    5048:	94 c0       	rjmp	.+296    	; 0x5172 <KEYPAD_Read+0x15a>
		{
			DIO_Read(row,&x);
    504a:	9e 01       	movw	r18, r28
    504c:	2f 5e       	subi	r18, 0xEF	; 239
    504e:	3f 4f       	sbci	r19, 0xFF	; 255
    5050:	88 89       	ldd	r24, Y+16	; 0x10
    5052:	b9 01       	movw	r22, r18
    5054:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <DIO_Read>
			if(x==0)
    5058:	89 89       	ldd	r24, Y+17	; 0x11
    505a:	88 23       	and	r24, r24
    505c:	09 f0       	breq	.+2      	; 0x5060 <KEYPAD_Read+0x48>
    505e:	86 c0       	rjmp	.+268    	; 0x516c <KEYPAD_Read+0x154>
			{
				/* Returning a character from the keypad array */
				*ptr=KEYPAD_ARRAY[row][column];
    5060:	88 89       	ldd	r24, Y+16	; 0x10
    5062:	28 2f       	mov	r18, r24
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	8f 85       	ldd	r24, Y+15	; 0x0f
    5068:	48 2f       	mov	r20, r24
    506a:	50 e0       	ldi	r21, 0x00	; 0
    506c:	c9 01       	movw	r24, r18
    506e:	88 0f       	add	r24, r24
    5070:	99 1f       	adc	r25, r25
    5072:	82 0f       	add	r24, r18
    5074:	93 1f       	adc	r25, r19
    5076:	84 0f       	add	r24, r20
    5078:	95 1f       	adc	r25, r21
    507a:	fc 01       	movw	r30, r24
    507c:	e2 58       	subi	r30, 0x82	; 130
    507e:	ff 4f       	sbci	r31, 0xFF	; 255
    5080:	80 81       	ld	r24, Z
    5082:	ea 89       	ldd	r30, Y+18	; 0x12
    5084:	fb 89       	ldd	r31, Y+19	; 0x13
    5086:	80 83       	st	Z, r24
    5088:	80 e0       	ldi	r24, 0x00	; 0
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	a6 e9       	ldi	r26, 0x96	; 150
    508e:	b3 e4       	ldi	r27, 0x43	; 67
    5090:	8b 87       	std	Y+11, r24	; 0x0b
    5092:	9c 87       	std	Y+12, r25	; 0x0c
    5094:	ad 87       	std	Y+13, r26	; 0x0d
    5096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5098:	6b 85       	ldd	r22, Y+11	; 0x0b
    509a:	7c 85       	ldd	r23, Y+12	; 0x0c
    509c:	8d 85       	ldd	r24, Y+13	; 0x0d
    509e:	9e 85       	ldd	r25, Y+14	; 0x0e
    50a0:	20 e0       	ldi	r18, 0x00	; 0
    50a2:	30 e0       	ldi	r19, 0x00	; 0
    50a4:	4a ef       	ldi	r20, 0xFA	; 250
    50a6:	54 e4       	ldi	r21, 0x44	; 68
    50a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50ac:	dc 01       	movw	r26, r24
    50ae:	cb 01       	movw	r24, r22
    50b0:	8f 83       	std	Y+7, r24	; 0x07
    50b2:	98 87       	std	Y+8, r25	; 0x08
    50b4:	a9 87       	std	Y+9, r26	; 0x09
    50b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50b8:	6f 81       	ldd	r22, Y+7	; 0x07
    50ba:	78 85       	ldd	r23, Y+8	; 0x08
    50bc:	89 85       	ldd	r24, Y+9	; 0x09
    50be:	9a 85       	ldd	r25, Y+10	; 0x0a
    50c0:	20 e0       	ldi	r18, 0x00	; 0
    50c2:	30 e0       	ldi	r19, 0x00	; 0
    50c4:	40 e8       	ldi	r20, 0x80	; 128
    50c6:	5f e3       	ldi	r21, 0x3F	; 63
    50c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50cc:	88 23       	and	r24, r24
    50ce:	2c f4       	brge	.+10     	; 0x50da <KEYPAD_Read+0xc2>
		__ticks = 1;
    50d0:	81 e0       	ldi	r24, 0x01	; 1
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	9e 83       	std	Y+6, r25	; 0x06
    50d6:	8d 83       	std	Y+5, r24	; 0x05
    50d8:	3f c0       	rjmp	.+126    	; 0x5158 <KEYPAD_Read+0x140>
	else if (__tmp > 65535)
    50da:	6f 81       	ldd	r22, Y+7	; 0x07
    50dc:	78 85       	ldd	r23, Y+8	; 0x08
    50de:	89 85       	ldd	r24, Y+9	; 0x09
    50e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    50e2:	20 e0       	ldi	r18, 0x00	; 0
    50e4:	3f ef       	ldi	r19, 0xFF	; 255
    50e6:	4f e7       	ldi	r20, 0x7F	; 127
    50e8:	57 e4       	ldi	r21, 0x47	; 71
    50ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50ee:	18 16       	cp	r1, r24
    50f0:	4c f5       	brge	.+82     	; 0x5144 <KEYPAD_Read+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    50f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    50f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    50f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    50fa:	20 e0       	ldi	r18, 0x00	; 0
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	40 e2       	ldi	r20, 0x20	; 32
    5100:	51 e4       	ldi	r21, 0x41	; 65
    5102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5106:	dc 01       	movw	r26, r24
    5108:	cb 01       	movw	r24, r22
    510a:	bc 01       	movw	r22, r24
    510c:	cd 01       	movw	r24, r26
    510e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5112:	dc 01       	movw	r26, r24
    5114:	cb 01       	movw	r24, r22
    5116:	9e 83       	std	Y+6, r25	; 0x06
    5118:	8d 83       	std	Y+5, r24	; 0x05
    511a:	0f c0       	rjmp	.+30     	; 0x513a <KEYPAD_Read+0x122>
    511c:	88 ec       	ldi	r24, 0xC8	; 200
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	9c 83       	std	Y+4, r25	; 0x04
    5122:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5124:	8b 81       	ldd	r24, Y+3	; 0x03
    5126:	9c 81       	ldd	r25, Y+4	; 0x04
    5128:	01 97       	sbiw	r24, 0x01	; 1
    512a:	f1 f7       	brne	.-4      	; 0x5128 <KEYPAD_Read+0x110>
    512c:	9c 83       	std	Y+4, r25	; 0x04
    512e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5130:	8d 81       	ldd	r24, Y+5	; 0x05
    5132:	9e 81       	ldd	r25, Y+6	; 0x06
    5134:	01 97       	sbiw	r24, 0x01	; 1
    5136:	9e 83       	std	Y+6, r25	; 0x06
    5138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    513a:	8d 81       	ldd	r24, Y+5	; 0x05
    513c:	9e 81       	ldd	r25, Y+6	; 0x06
    513e:	00 97       	sbiw	r24, 0x00	; 0
    5140:	69 f7       	brne	.-38     	; 0x511c <KEYPAD_Read+0x104>
    5142:	14 c0       	rjmp	.+40     	; 0x516c <KEYPAD_Read+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5144:	6f 81       	ldd	r22, Y+7	; 0x07
    5146:	78 85       	ldd	r23, Y+8	; 0x08
    5148:	89 85       	ldd	r24, Y+9	; 0x09
    514a:	9a 85       	ldd	r25, Y+10	; 0x0a
    514c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5150:	dc 01       	movw	r26, r24
    5152:	cb 01       	movw	r24, r22
    5154:	9e 83       	std	Y+6, r25	; 0x06
    5156:	8d 83       	std	Y+5, r24	; 0x05
    5158:	8d 81       	ldd	r24, Y+5	; 0x05
    515a:	9e 81       	ldd	r25, Y+6	; 0x06
    515c:	9a 83       	std	Y+2, r25	; 0x02
    515e:	89 83       	std	Y+1, r24	; 0x01
    5160:	89 81       	ldd	r24, Y+1	; 0x01
    5162:	9a 81       	ldd	r25, Y+2	; 0x02
    5164:	01 97       	sbiw	r24, 0x01	; 1
    5166:	f1 f7       	brne	.-4      	; 0x5164 <KEYPAD_Read+0x14c>
    5168:	9a 83       	std	Y+2, r25	; 0x02
    516a:	89 83       	std	Y+1, r24	; 0x01
	uint8_t row,column;
	for(column=0;column<3;column++)
	{
		/* Put low on an output pin and scan for the input pins */
		DIO_Write(column+4,LOW);
		for(row=0;row<4;row++)
    516c:	88 89       	ldd	r24, Y+16	; 0x10
    516e:	8f 5f       	subi	r24, 0xFF	; 255
    5170:	88 8b       	std	Y+16, r24	; 0x10
    5172:	88 89       	ldd	r24, Y+16	; 0x10
    5174:	84 30       	cpi	r24, 0x04	; 4
    5176:	08 f4       	brcc	.+2      	; 0x517a <KEYPAD_Read+0x162>
    5178:	68 cf       	rjmp	.-304    	; 0x504a <KEYPAD_Read+0x32>
				/* Returning a character from the keypad array */
				*ptr=KEYPAD_ARRAY[row][column];
				_delay_ms(300);
			}
		}
		DIO_Write(column+4,HIGH);
    517a:	8f 85       	ldd	r24, Y+15	; 0x0f
    517c:	8c 5f       	subi	r24, 0xFC	; 252
    517e:	61 e0       	ldi	r22, 0x01	; 1
    5180:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <DIO_Write>
enuErrorStatus_t KEYPAD_Read(uint8_t* ptr)
{
	*ptr=250;
	uint8_t x;
	uint8_t row,column;
	for(column=0;column<3;column++)
    5184:	8f 85       	ldd	r24, Y+15	; 0x0f
    5186:	8f 5f       	subi	r24, 0xFF	; 255
    5188:	8f 87       	std	Y+15, r24	; 0x0f
    518a:	8f 85       	ldd	r24, Y+15	; 0x0f
    518c:	83 30       	cpi	r24, 0x03	; 3
    518e:	08 f4       	brcc	.+2      	; 0x5192 <KEYPAD_Read+0x17a>
    5190:	55 cf       	rjmp	.-342    	; 0x503c <KEYPAD_Read+0x24>
				_delay_ms(300);
			}
		}
		DIO_Write(column+4,HIGH);
	}
	return E_OK;
    5192:	81 e0       	ldi	r24, 0x01	; 1
}
    5194:	63 96       	adiw	r28, 0x13	; 19
    5196:	0f b6       	in	r0, 0x3f	; 63
    5198:	f8 94       	cli
    519a:	de bf       	out	0x3e, r29	; 62
    519c:	0f be       	out	0x3f, r0	; 63
    519e:	cd bf       	out	0x3d, r28	; 61
    51a0:	cf 91       	pop	r28
    51a2:	df 91       	pop	r29
    51a4:	08 95       	ret

000051a6 <main>:
	ADCSRA_R=0b10000111;
	ADMUX_R=0b01000000;
}*/

int main(void)
{
    51a6:	df 93       	push	r29
    51a8:	cf 93       	push	r28
    51aa:	cd b7       	in	r28, 0x3d	; 61
    51ac:	de b7       	in	r29, 0x3e	; 62
    51ae:	6f 97       	sbiw	r28, 0x1f	; 31
    51b0:	0f b6       	in	r0, 0x3f	; 63
    51b2:	f8 94       	cli
    51b4:	de bf       	out	0x3e, r29	; 62
    51b6:	0f be       	out	0x3f, r0	; 63
    51b8:	cd bf       	out	0x3d, r28	; 61

	/* LCD , KEYPAD , ADC initialization */
	LCD_Init();
    51ba:	0e 94 18 21 	call	0x4230	; 0x4230 <LCD_Init>
	ADC_Init1(Vref_vcc,Right_Adjusted,Disable_AutoTrigger,Disable_Interrupt);
    51be:	80 e0       	ldi	r24, 0x00	; 0
    51c0:	61 e0       	ldi	r22, 0x01	; 1
    51c2:	40 e0       	ldi	r20, 0x00	; 0
    51c4:	20 e0       	ldi	r18, 0x00	; 0
    51c6:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <ADC_Init1>
	ADC_Init2(Single_Ended_ADC0,CLK_BY_2);
    51ca:	80 e0       	ldi	r24, 0x00	; 0
    51cc:	60 e0       	ldi	r22, 0x00	; 0
    51ce:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <ADC_Init2>
	KEYPAD_Init();
    51d2:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <KEYPAD_Init>
	/* Variables initialization */
	uint16_t x;
	uint32_t mv_value;
	uint32_t temperature;
	uint8_t NUM[2];
	uint8_t counter =0;
    51d6:	1a 8a       	std	Y+18, r1	; 0x12
	uint8_t base=1;
    51d8:	81 e0       	ldi	r24, 0x01	; 1
    51da:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t res=0;
    51dc:	18 8a       	std	Y+16, r1	; 0x10
	uint8_t var=250;
    51de:	8a ef       	ldi	r24, 0xFA	; 250
    51e0:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8_t check=0;
    51e2:	1f 86       	std	Y+15, r1	; 0x0f

	/* The fan port */
	SET_BIT(DDRC_R,7);
    51e4:	a4 e3       	ldi	r26, 0x34	; 52
    51e6:	b0 e0       	ldi	r27, 0x00	; 0
    51e8:	e4 e3       	ldi	r30, 0x34	; 52
    51ea:	f0 e0       	ldi	r31, 0x00	; 0
    51ec:	80 81       	ld	r24, Z
    51ee:	80 68       	ori	r24, 0x80	; 128
    51f0:	8c 93       	st	X, r24

	/* Strings to appear on the LCD */
	uint8_t* str1="Temp :";
    51f2:	80 e6       	ldi	r24, 0x60	; 96
    51f4:	90 e0       	ldi	r25, 0x00	; 0
    51f6:	9e 87       	std	Y+14, r25	; 0x0e
    51f8:	8d 87       	std	Y+13, r24	; 0x0d
	uint8_t* str2="Allowed temp :";
    51fa:	87 e6       	ldi	r24, 0x67	; 103
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	9c 87       	std	Y+12, r25	; 0x0c
    5200:	8b 87       	std	Y+11, r24	; 0x0b
	LCD_SendString(str2);
    5202:	8b 85       	ldd	r24, Y+11	; 0x0b
    5204:	9c 85       	ldd	r25, Y+12	; 0x0c
    5206:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <LCD_SendString>
    520a:	7b c0       	rjmp	.+246    	; 0x5302 <main+0x15c>
    	/* Keep checking if a temperature value is entered */
    	/* Assuming the user to set a temperature value of at least 2 integers */
    	while((check==0))
    	{
    		/* Read the value from the keypad */
    	KEYPAD_Read(&var);
    520c:	ce 01       	movw	r24, r28
    520e:	4f 96       	adiw	r24, 0x1f	; 31
    5210:	0e 94 0c 28 	call	0x5018	; 0x5018 <KEYPAD_Read>
    	uint8_t temp2=var;
    5214:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5216:	8a 87       	std	Y+10, r24	; 0x0a
    	if(var==250)
    5218:	8f 8d       	ldd	r24, Y+31	; 0x1f
    521a:	8a 3f       	cpi	r24, 0xFA	; 250
    521c:	09 f4       	brne	.+2      	; 0x5220 <main+0x7a>
    521e:	71 c0       	rjmp	.+226    	; 0x5302 <main+0x15c>
    	{

    	}else{
    	if(temp2=='E')
    5220:	8a 85       	ldd	r24, Y+10	; 0x0a
    5222:	85 34       	cpi	r24, 0x45	; 69
    5224:	81 f5       	brne	.+96     	; 0x5286 <main+0xe0>
    	{
    		for(uint8_t i=counter-1;i>=0;i--)
    5226:	8a 89       	ldd	r24, Y+18	; 0x12
    5228:	81 50       	subi	r24, 0x01	; 1
    522a:	89 87       	std	Y+9, r24	; 0x09
    		{
    			res=res+(NUM[i]*base);
    522c:	89 85       	ldd	r24, Y+9	; 0x09
    522e:	28 2f       	mov	r18, r24
    5230:	30 e0       	ldi	r19, 0x00	; 0
    5232:	ce 01       	movw	r24, r28
    5234:	4d 96       	adiw	r24, 0x1d	; 29
    5236:	fc 01       	movw	r30, r24
    5238:	e2 0f       	add	r30, r18
    523a:	f3 1f       	adc	r31, r19
    523c:	90 81       	ld	r25, Z
    523e:	89 89       	ldd	r24, Y+17	; 0x11
    5240:	98 9f       	mul	r25, r24
    5242:	90 2d       	mov	r25, r0
    5244:	11 24       	eor	r1, r1
    5246:	88 89       	ldd	r24, Y+16	; 0x10
    5248:	89 0f       	add	r24, r25
    524a:	88 8b       	std	Y+16, r24	; 0x10
    			base=base*10;
    524c:	89 89       	ldd	r24, Y+17	; 0x11
    524e:	88 2f       	mov	r24, r24
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	9c 01       	movw	r18, r24
    5254:	22 0f       	add	r18, r18
    5256:	33 1f       	adc	r19, r19
    5258:	c9 01       	movw	r24, r18
    525a:	88 0f       	add	r24, r24
    525c:	99 1f       	adc	r25, r25
    525e:	88 0f       	add	r24, r24
    5260:	99 1f       	adc	r25, r25
    5262:	82 0f       	add	r24, r18
    5264:	93 1f       	adc	r25, r19
    5266:	89 8b       	std	Y+17, r24	; 0x11
    			check++;
    5268:	8f 85       	ldd	r24, Y+15	; 0x0f
    526a:	8f 5f       	subi	r24, 0xFF	; 255
    526c:	8f 87       	std	Y+15, r24	; 0x0f
    			if(i==0)
    526e:	89 85       	ldd	r24, Y+9	; 0x09
    5270:	88 23       	and	r24, r24
    5272:	21 f0       	breq	.+8      	; 0x527c <main+0xd6>
    	{

    	}else{
    	if(temp2=='E')
    	{
    		for(uint8_t i=counter-1;i>=0;i--)
    5274:	89 85       	ldd	r24, Y+9	; 0x09
    5276:	81 50       	subi	r24, 0x01	; 1
    5278:	89 87       	std	Y+9, r24	; 0x09
    527a:	d8 cf       	rjmp	.-80     	; 0x522c <main+0x86>
    			if(i==0)
    			{
    				break;
    			}
    		}
    		LCD_GOTOXY(0,2);
    527c:	80 e0       	ldi	r24, 0x00	; 0
    527e:	62 e0       	ldi	r22, 0x02	; 2
    5280:	0e 94 d7 27 	call	0x4fae	; 0x4fae <LCD_GOTOXY>
    5284:	3e c0       	rjmp	.+124    	; 0x5302 <main+0x15c>
    	}else
    	{
    		if(counter==0)
    5286:	8a 89       	ldd	r24, Y+18	; 0x12
    5288:	88 23       	and	r24, r24
    528a:	d9 f4       	brne	.+54     	; 0x52c2 <main+0x11c>
    		{
    			if(temp2=='0')
    528c:	8a 85       	ldd	r24, Y+10	; 0x0a
    528e:	80 33       	cpi	r24, 0x30	; 48
    5290:	59 f4       	brne	.+22     	; 0x52a8 <main+0x102>
    			{
    				NUM[0]=0;
    5292:	1d 8e       	std	Y+29, r1	; 0x1d
    				LCD_writeNum(NUM[0]);
    5294:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5296:	88 2f       	mov	r24, r24
    5298:	90 e0       	ldi	r25, 0x00	; 0
    529a:	a0 e0       	ldi	r26, 0x00	; 0
    529c:	b0 e0       	ldi	r27, 0x00	; 0
    529e:	bc 01       	movw	r22, r24
    52a0:	cd 01       	movw	r24, r26
    52a2:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <LCD_writeNum>
    52a6:	2a c0       	rjmp	.+84     	; 0x52fc <main+0x156>
    			}else
    			{
    				NUM[0]=temp2-'0';
    52a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    52aa:	80 53       	subi	r24, 0x30	; 48
    52ac:	8d 8f       	std	Y+29, r24	; 0x1d
    				LCD_writeNum(NUM[0]);
    52ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52b0:	88 2f       	mov	r24, r24
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	a0 e0       	ldi	r26, 0x00	; 0
    52b6:	b0 e0       	ldi	r27, 0x00	; 0
    52b8:	bc 01       	movw	r22, r24
    52ba:	cd 01       	movw	r24, r26
    52bc:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <LCD_writeNum>
    52c0:	1d c0       	rjmp	.+58     	; 0x52fc <main+0x156>
    			}
    		}else if(counter==1)
    52c2:	8a 89       	ldd	r24, Y+18	; 0x12
    52c4:	81 30       	cpi	r24, 0x01	; 1
    52c6:	d1 f4       	brne	.+52     	; 0x52fc <main+0x156>
    		{
    			if(temp2=='0')
    52c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    52ca:	80 33       	cpi	r24, 0x30	; 48
    52cc:	59 f4       	brne	.+22     	; 0x52e4 <main+0x13e>
    			{
    				NUM[1]=0;
    52ce:	1e 8e       	std	Y+30, r1	; 0x1e
    				LCD_writeNum(NUM[1]);
    52d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    52d2:	88 2f       	mov	r24, r24
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	a0 e0       	ldi	r26, 0x00	; 0
    52d8:	b0 e0       	ldi	r27, 0x00	; 0
    52da:	bc 01       	movw	r22, r24
    52dc:	cd 01       	movw	r24, r26
    52de:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <LCD_writeNum>
    52e2:	0c c0       	rjmp	.+24     	; 0x52fc <main+0x156>
    			}else
    			{
    				NUM[1]=temp2-'0';
    52e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    52e6:	80 53       	subi	r24, 0x30	; 48
    52e8:	8e 8f       	std	Y+30, r24	; 0x1e
    				LCD_writeNum(NUM[1]);
    52ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    52ec:	88 2f       	mov	r24, r24
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	a0 e0       	ldi	r26, 0x00	; 0
    52f2:	b0 e0       	ldi	r27, 0x00	; 0
    52f4:	bc 01       	movw	r22, r24
    52f6:	cd 01       	movw	r24, r26
    52f8:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <LCD_writeNum>
    			}
    		}
    		counter++;
    52fc:	8a 89       	ldd	r24, Y+18	; 0x12
    52fe:	8f 5f       	subi	r24, 0xFF	; 255
    5300:	8a 8b       	std	Y+18, r24	; 0x12
	LCD_SendString(str2);
    while (1) 
    {
    	/* Keep checking if a temperature value is entered */
    	/* Assuming the user to set a temperature value of at least 2 integers */
    	while((check==0))
    5302:	8f 85       	ldd	r24, Y+15	; 0x0f
    5304:	88 23       	and	r24, r24
    5306:	09 f4       	brne	.+2      	; 0x530a <main+0x164>
    5308:	81 cf       	rjmp	.-254    	; 0x520c <main+0x66>
    	}

    	}
    	}
    	/*When the user set the temperature , it compares it to the surrounding temperature */
    	if(check==2)
    530a:	8f 85       	ldd	r24, Y+15	; 0x0f
    530c:	82 30       	cpi	r24, 0x02	; 2
    530e:	c9 f7       	brne	.-14     	; 0x5302 <main+0x15c>
    5310:	51 c0       	rjmp	.+162    	; 0x53b4 <main+0x20e>
    	{
    		while(temperature<res)
    		{
    			/* Turn off the fan */
    			CLR_BIT(PORTC_R,7);
    5312:	a5 e3       	ldi	r26, 0x35	; 53
    5314:	b0 e0       	ldi	r27, 0x00	; 0
    5316:	e5 e3       	ldi	r30, 0x35	; 53
    5318:	f0 e0       	ldi	r31, 0x00	; 0
    531a:	80 81       	ld	r24, Z
    531c:	8f 77       	andi	r24, 0x7F	; 127
    531e:	8c 93       	st	X, r24
    			LCD_GOTOXY(0,2);
    5320:	80 e0       	ldi	r24, 0x00	; 0
    5322:	62 e0       	ldi	r22, 0x02	; 2
    5324:	0e 94 d7 27 	call	0x4fae	; 0x4fae <LCD_GOTOXY>
            	LCD_SendString(str1);
    5328:	8d 85       	ldd	r24, Y+13	; 0x0d
    532a:	9e 85       	ldd	r25, Y+14	; 0x0e
    532c:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <LCD_SendString>
            	ADC_read_value(&x);
    5330:	ce 01       	movw	r24, r28
    5332:	4b 96       	adiw	r24, 0x1b	; 27
    5334:	0e 94 dd 20 	call	0x41ba	; 0x41ba <ADC_read_value>
            	uint32_t temp = x;
    5338:	8b 8d       	ldd	r24, Y+27	; 0x1b
    533a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    533c:	cc 01       	movw	r24, r24
    533e:	a0 e0       	ldi	r26, 0x00	; 0
    5340:	b0 e0       	ldi	r27, 0x00	; 0
    5342:	8d 83       	std	Y+5, r24	; 0x05
    5344:	9e 83       	std	Y+6, r25	; 0x06
    5346:	af 83       	std	Y+7, r26	; 0x07
    5348:	b8 87       	std	Y+8, r27	; 0x08
            	mv_value=(temp*5000)/1024;
    534a:	8d 81       	ldd	r24, Y+5	; 0x05
    534c:	9e 81       	ldd	r25, Y+6	; 0x06
    534e:	af 81       	ldd	r26, Y+7	; 0x07
    5350:	b8 85       	ldd	r27, Y+8	; 0x08
    5352:	28 e8       	ldi	r18, 0x88	; 136
    5354:	33 e1       	ldi	r19, 0x13	; 19
    5356:	40 e0       	ldi	r20, 0x00	; 0
    5358:	50 e0       	ldi	r21, 0x00	; 0
    535a:	bc 01       	movw	r22, r24
    535c:	cd 01       	movw	r24, r26
    535e:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <__mulsi3>
    5362:	dc 01       	movw	r26, r24
    5364:	cb 01       	movw	r24, r22
    5366:	07 2e       	mov	r0, r23
    5368:	7a e0       	ldi	r23, 0x0A	; 10
    536a:	b6 95       	lsr	r27
    536c:	a7 95       	ror	r26
    536e:	97 95       	ror	r25
    5370:	87 95       	ror	r24
    5372:	7a 95       	dec	r23
    5374:	d1 f7       	brne	.-12     	; 0x536a <main+0x1c4>
    5376:	70 2d       	mov	r23, r0
    5378:	8f 8b       	std	Y+23, r24	; 0x17
    537a:	98 8f       	std	Y+24, r25	; 0x18
    537c:	a9 8f       	std	Y+25, r26	; 0x19
    537e:	ba 8f       	std	Y+26, r27	; 0x1a
            	temperature=(mv_value/10);
    5380:	8f 89       	ldd	r24, Y+23	; 0x17
    5382:	98 8d       	ldd	r25, Y+24	; 0x18
    5384:	a9 8d       	ldd	r26, Y+25	; 0x19
    5386:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5388:	2a e0       	ldi	r18, 0x0A	; 10
    538a:	30 e0       	ldi	r19, 0x00	; 0
    538c:	40 e0       	ldi	r20, 0x00	; 0
    538e:	50 e0       	ldi	r21, 0x00	; 0
    5390:	bc 01       	movw	r22, r24
    5392:	cd 01       	movw	r24, r26
    5394:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__udivmodsi4>
    5398:	da 01       	movw	r26, r20
    539a:	c9 01       	movw	r24, r18
    539c:	8b 8b       	std	Y+19, r24	; 0x13
    539e:	9c 8b       	std	Y+20, r25	; 0x14
    53a0:	ad 8b       	std	Y+21, r26	; 0x15
    53a2:	be 8b       	std	Y+22, r27	; 0x16
            	LCD_writeNum(temperature);
    53a4:	8b 89       	ldd	r24, Y+19	; 0x13
    53a6:	9c 89       	ldd	r25, Y+20	; 0x14
    53a8:	ad 89       	ldd	r26, Y+21	; 0x15
    53aa:	be 89       	ldd	r27, Y+22	; 0x16
    53ac:	bc 01       	movw	r22, r24
    53ae:	cd 01       	movw	r24, r26
    53b0:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <LCD_writeNum>
    	}
    	}
    	/*When the user set the temperature , it compares it to the surrounding temperature */
    	if(check==2)
    	{
    		while(temperature<res)
    53b4:	88 89       	ldd	r24, Y+16	; 0x10
    53b6:	28 2f       	mov	r18, r24
    53b8:	30 e0       	ldi	r19, 0x00	; 0
    53ba:	40 e0       	ldi	r20, 0x00	; 0
    53bc:	50 e0       	ldi	r21, 0x00	; 0
    53be:	8b 89       	ldd	r24, Y+19	; 0x13
    53c0:	9c 89       	ldd	r25, Y+20	; 0x14
    53c2:	ad 89       	ldd	r26, Y+21	; 0x15
    53c4:	be 89       	ldd	r27, Y+22	; 0x16
    53c6:	82 17       	cp	r24, r18
    53c8:	93 07       	cpc	r25, r19
    53ca:	a4 07       	cpc	r26, r20
    53cc:	b5 07       	cpc	r27, r21
    53ce:	08 f4       	brcc	.+2      	; 0x53d2 <main+0x22c>
    53d0:	a0 cf       	rjmp	.-192    	; 0x5312 <main+0x16c>
            	uint32_t temp = x;
            	mv_value=(temp*5000)/1024;
            	temperature=(mv_value/10);
            	LCD_writeNum(temperature);
    		}
    		if(temperature>=res)
    53d2:	88 89       	ldd	r24, Y+16	; 0x10
    53d4:	28 2f       	mov	r18, r24
    53d6:	30 e0       	ldi	r19, 0x00	; 0
    53d8:	40 e0       	ldi	r20, 0x00	; 0
    53da:	50 e0       	ldi	r21, 0x00	; 0
    53dc:	8b 89       	ldd	r24, Y+19	; 0x13
    53de:	9c 89       	ldd	r25, Y+20	; 0x14
    53e0:	ad 89       	ldd	r26, Y+21	; 0x15
    53e2:	be 89       	ldd	r27, Y+22	; 0x16
    53e4:	82 17       	cp	r24, r18
    53e6:	93 07       	cpc	r25, r19
    53e8:	a4 07       	cpc	r26, r20
    53ea:	b5 07       	cpc	r27, r21
    53ec:	08 f4       	brcc	.+2      	; 0x53f0 <main+0x24a>
    53ee:	89 cf       	rjmp	.-238    	; 0x5302 <main+0x15c>
    53f0:	51 c0       	rjmp	.+162    	; 0x5494 <main+0x2ee>
    		{
    			while(temperature>=res)
    			{
    				/* Turn on the fan */
    				SET_BIT(PORTC_R,7);
    53f2:	a5 e3       	ldi	r26, 0x35	; 53
    53f4:	b0 e0       	ldi	r27, 0x00	; 0
    53f6:	e5 e3       	ldi	r30, 0x35	; 53
    53f8:	f0 e0       	ldi	r31, 0x00	; 0
    53fa:	80 81       	ld	r24, Z
    53fc:	80 68       	ori	r24, 0x80	; 128
    53fe:	8c 93       	st	X, r24
        			LCD_GOTOXY(0,2);
    5400:	80 e0       	ldi	r24, 0x00	; 0
    5402:	62 e0       	ldi	r22, 0x02	; 2
    5404:	0e 94 d7 27 	call	0x4fae	; 0x4fae <LCD_GOTOXY>
                	LCD_SendString(str1);
    5408:	8d 85       	ldd	r24, Y+13	; 0x0d
    540a:	9e 85       	ldd	r25, Y+14	; 0x0e
    540c:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <LCD_SendString>
                	ADC_read_value(&x);
    5410:	ce 01       	movw	r24, r28
    5412:	4b 96       	adiw	r24, 0x1b	; 27
    5414:	0e 94 dd 20 	call	0x41ba	; 0x41ba <ADC_read_value>
                	uint32_t temp = x;
    5418:	8b 8d       	ldd	r24, Y+27	; 0x1b
    541a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    541c:	cc 01       	movw	r24, r24
    541e:	a0 e0       	ldi	r26, 0x00	; 0
    5420:	b0 e0       	ldi	r27, 0x00	; 0
    5422:	89 83       	std	Y+1, r24	; 0x01
    5424:	9a 83       	std	Y+2, r25	; 0x02
    5426:	ab 83       	std	Y+3, r26	; 0x03
    5428:	bc 83       	std	Y+4, r27	; 0x04
                	mv_value=(temp*5000)/1024;
    542a:	89 81       	ldd	r24, Y+1	; 0x01
    542c:	9a 81       	ldd	r25, Y+2	; 0x02
    542e:	ab 81       	ldd	r26, Y+3	; 0x03
    5430:	bc 81       	ldd	r27, Y+4	; 0x04
    5432:	28 e8       	ldi	r18, 0x88	; 136
    5434:	33 e1       	ldi	r19, 0x13	; 19
    5436:	40 e0       	ldi	r20, 0x00	; 0
    5438:	50 e0       	ldi	r21, 0x00	; 0
    543a:	bc 01       	movw	r22, r24
    543c:	cd 01       	movw	r24, r26
    543e:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <__mulsi3>
    5442:	dc 01       	movw	r26, r24
    5444:	cb 01       	movw	r24, r22
    5446:	07 2e       	mov	r0, r23
    5448:	7a e0       	ldi	r23, 0x0A	; 10
    544a:	b6 95       	lsr	r27
    544c:	a7 95       	ror	r26
    544e:	97 95       	ror	r25
    5450:	87 95       	ror	r24
    5452:	7a 95       	dec	r23
    5454:	d1 f7       	brne	.-12     	; 0x544a <main+0x2a4>
    5456:	70 2d       	mov	r23, r0
    5458:	8f 8b       	std	Y+23, r24	; 0x17
    545a:	98 8f       	std	Y+24, r25	; 0x18
    545c:	a9 8f       	std	Y+25, r26	; 0x19
    545e:	ba 8f       	std	Y+26, r27	; 0x1a
                	temperature=(mv_value/10);
    5460:	8f 89       	ldd	r24, Y+23	; 0x17
    5462:	98 8d       	ldd	r25, Y+24	; 0x18
    5464:	a9 8d       	ldd	r26, Y+25	; 0x19
    5466:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5468:	2a e0       	ldi	r18, 0x0A	; 10
    546a:	30 e0       	ldi	r19, 0x00	; 0
    546c:	40 e0       	ldi	r20, 0x00	; 0
    546e:	50 e0       	ldi	r21, 0x00	; 0
    5470:	bc 01       	movw	r22, r24
    5472:	cd 01       	movw	r24, r26
    5474:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__udivmodsi4>
    5478:	da 01       	movw	r26, r20
    547a:	c9 01       	movw	r24, r18
    547c:	8b 8b       	std	Y+19, r24	; 0x13
    547e:	9c 8b       	std	Y+20, r25	; 0x14
    5480:	ad 8b       	std	Y+21, r26	; 0x15
    5482:	be 8b       	std	Y+22, r27	; 0x16
                	LCD_writeNum(temperature);
    5484:	8b 89       	ldd	r24, Y+19	; 0x13
    5486:	9c 89       	ldd	r25, Y+20	; 0x14
    5488:	ad 89       	ldd	r26, Y+21	; 0x15
    548a:	be 89       	ldd	r27, Y+22	; 0x16
    548c:	bc 01       	movw	r22, r24
    548e:	cd 01       	movw	r24, r26
    5490:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <LCD_writeNum>
            	temperature=(mv_value/10);
            	LCD_writeNum(temperature);
    		}
    		if(temperature>=res)
    		{
    			while(temperature>=res)
    5494:	88 89       	ldd	r24, Y+16	; 0x10
    5496:	28 2f       	mov	r18, r24
    5498:	30 e0       	ldi	r19, 0x00	; 0
    549a:	40 e0       	ldi	r20, 0x00	; 0
    549c:	50 e0       	ldi	r21, 0x00	; 0
    549e:	8b 89       	ldd	r24, Y+19	; 0x13
    54a0:	9c 89       	ldd	r25, Y+20	; 0x14
    54a2:	ad 89       	ldd	r26, Y+21	; 0x15
    54a4:	be 89       	ldd	r27, Y+22	; 0x16
    54a6:	82 17       	cp	r24, r18
    54a8:	93 07       	cpc	r25, r19
    54aa:	a4 07       	cpc	r26, r20
    54ac:	b5 07       	cpc	r27, r21
    54ae:	08 f0       	brcs	.+2      	; 0x54b2 <main+0x30c>
    54b0:	a0 cf       	rjmp	.-192    	; 0x53f2 <main+0x24c>
    54b2:	27 cf       	rjmp	.-434    	; 0x5302 <main+0x15c>

000054b4 <__mulsi3>:
    54b4:	62 9f       	mul	r22, r18
    54b6:	d0 01       	movw	r26, r0
    54b8:	73 9f       	mul	r23, r19
    54ba:	f0 01       	movw	r30, r0
    54bc:	82 9f       	mul	r24, r18
    54be:	e0 0d       	add	r30, r0
    54c0:	f1 1d       	adc	r31, r1
    54c2:	64 9f       	mul	r22, r20
    54c4:	e0 0d       	add	r30, r0
    54c6:	f1 1d       	adc	r31, r1
    54c8:	92 9f       	mul	r25, r18
    54ca:	f0 0d       	add	r31, r0
    54cc:	83 9f       	mul	r24, r19
    54ce:	f0 0d       	add	r31, r0
    54d0:	74 9f       	mul	r23, r20
    54d2:	f0 0d       	add	r31, r0
    54d4:	65 9f       	mul	r22, r21
    54d6:	f0 0d       	add	r31, r0
    54d8:	99 27       	eor	r25, r25
    54da:	72 9f       	mul	r23, r18
    54dc:	b0 0d       	add	r27, r0
    54de:	e1 1d       	adc	r30, r1
    54e0:	f9 1f       	adc	r31, r25
    54e2:	63 9f       	mul	r22, r19
    54e4:	b0 0d       	add	r27, r0
    54e6:	e1 1d       	adc	r30, r1
    54e8:	f9 1f       	adc	r31, r25
    54ea:	bd 01       	movw	r22, r26
    54ec:	cf 01       	movw	r24, r30
    54ee:	11 24       	eor	r1, r1
    54f0:	08 95       	ret

000054f2 <__udivmodsi4>:
    54f2:	a1 e2       	ldi	r26, 0x21	; 33
    54f4:	1a 2e       	mov	r1, r26
    54f6:	aa 1b       	sub	r26, r26
    54f8:	bb 1b       	sub	r27, r27
    54fa:	fd 01       	movw	r30, r26
    54fc:	0d c0       	rjmp	.+26     	; 0x5518 <__udivmodsi4_ep>

000054fe <__udivmodsi4_loop>:
    54fe:	aa 1f       	adc	r26, r26
    5500:	bb 1f       	adc	r27, r27
    5502:	ee 1f       	adc	r30, r30
    5504:	ff 1f       	adc	r31, r31
    5506:	a2 17       	cp	r26, r18
    5508:	b3 07       	cpc	r27, r19
    550a:	e4 07       	cpc	r30, r20
    550c:	f5 07       	cpc	r31, r21
    550e:	20 f0       	brcs	.+8      	; 0x5518 <__udivmodsi4_ep>
    5510:	a2 1b       	sub	r26, r18
    5512:	b3 0b       	sbc	r27, r19
    5514:	e4 0b       	sbc	r30, r20
    5516:	f5 0b       	sbc	r31, r21

00005518 <__udivmodsi4_ep>:
    5518:	66 1f       	adc	r22, r22
    551a:	77 1f       	adc	r23, r23
    551c:	88 1f       	adc	r24, r24
    551e:	99 1f       	adc	r25, r25
    5520:	1a 94       	dec	r1
    5522:	69 f7       	brne	.-38     	; 0x54fe <__udivmodsi4_loop>
    5524:	60 95       	com	r22
    5526:	70 95       	com	r23
    5528:	80 95       	com	r24
    552a:	90 95       	com	r25
    552c:	9b 01       	movw	r18, r22
    552e:	ac 01       	movw	r20, r24
    5530:	bd 01       	movw	r22, r26
    5532:	cf 01       	movw	r24, r30
    5534:	08 95       	ret

00005536 <__prologue_saves__>:
    5536:	2f 92       	push	r2
    5538:	3f 92       	push	r3
    553a:	4f 92       	push	r4
    553c:	5f 92       	push	r5
    553e:	6f 92       	push	r6
    5540:	7f 92       	push	r7
    5542:	8f 92       	push	r8
    5544:	9f 92       	push	r9
    5546:	af 92       	push	r10
    5548:	bf 92       	push	r11
    554a:	cf 92       	push	r12
    554c:	df 92       	push	r13
    554e:	ef 92       	push	r14
    5550:	ff 92       	push	r15
    5552:	0f 93       	push	r16
    5554:	1f 93       	push	r17
    5556:	cf 93       	push	r28
    5558:	df 93       	push	r29
    555a:	cd b7       	in	r28, 0x3d	; 61
    555c:	de b7       	in	r29, 0x3e	; 62
    555e:	ca 1b       	sub	r28, r26
    5560:	db 0b       	sbc	r29, r27
    5562:	0f b6       	in	r0, 0x3f	; 63
    5564:	f8 94       	cli
    5566:	de bf       	out	0x3e, r29	; 62
    5568:	0f be       	out	0x3f, r0	; 63
    556a:	cd bf       	out	0x3d, r28	; 61
    556c:	09 94       	ijmp

0000556e <__epilogue_restores__>:
    556e:	2a 88       	ldd	r2, Y+18	; 0x12
    5570:	39 88       	ldd	r3, Y+17	; 0x11
    5572:	48 88       	ldd	r4, Y+16	; 0x10
    5574:	5f 84       	ldd	r5, Y+15	; 0x0f
    5576:	6e 84       	ldd	r6, Y+14	; 0x0e
    5578:	7d 84       	ldd	r7, Y+13	; 0x0d
    557a:	8c 84       	ldd	r8, Y+12	; 0x0c
    557c:	9b 84       	ldd	r9, Y+11	; 0x0b
    557e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5580:	b9 84       	ldd	r11, Y+9	; 0x09
    5582:	c8 84       	ldd	r12, Y+8	; 0x08
    5584:	df 80       	ldd	r13, Y+7	; 0x07
    5586:	ee 80       	ldd	r14, Y+6	; 0x06
    5588:	fd 80       	ldd	r15, Y+5	; 0x05
    558a:	0c 81       	ldd	r16, Y+4	; 0x04
    558c:	1b 81       	ldd	r17, Y+3	; 0x03
    558e:	aa 81       	ldd	r26, Y+2	; 0x02
    5590:	b9 81       	ldd	r27, Y+1	; 0x01
    5592:	ce 0f       	add	r28, r30
    5594:	d1 1d       	adc	r29, r1
    5596:	0f b6       	in	r0, 0x3f	; 63
    5598:	f8 94       	cli
    559a:	de bf       	out	0x3e, r29	; 62
    559c:	0f be       	out	0x3f, r0	; 63
    559e:	cd bf       	out	0x3d, r28	; 61
    55a0:	ed 01       	movw	r28, r26
    55a2:	08 95       	ret

000055a4 <_exit>:
    55a4:	f8 94       	cli

000055a6 <__stop_program>:
    55a6:	ff cf       	rjmp	.-2      	; 0x55a6 <__stop_program>
